{"version":3,"sources":["./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisFillCircular.js","./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisLabelCircular.js","./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererCircular.js","./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererRadial.js","./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererX3D.js","./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererY3D.js","./node_modules/@amcharts/amcharts4/.internal/charts/axes/CategoryAxis.js","./node_modules/@amcharts/amcharts4/.internal/charts/axes/CategoryAxisBreak.js","./node_modules/@amcharts/amcharts4/.internal/charts/axes/DateAxis.js","./node_modules/@amcharts/amcharts4/.internal/charts/axes/DateAxisBreak.js","./node_modules/@amcharts/amcharts4/.internal/charts/axes/DurationAxis.js","./node_modules/@amcharts/amcharts4/.internal/charts/axes/GridCircular.js","./node_modules/@amcharts/amcharts4/.internal/charts/cursors/Cursor.js","./node_modules/@amcharts/amcharts4/.internal/charts/cursors/RadarCursor.js","./node_modules/@amcharts/amcharts4/.internal/charts/cursors/XYCursor.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/Candlestick.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/ChordLink.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/ChordNode.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/CircleBullet.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/ClockHand.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/Column.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/Column3D.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/ConeColumn.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/CurvedColumn.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/ErrorBullet.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/FlowDiagramLink.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/FlowDiagramNode.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/FunnelSlice.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/FunnelTick.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/LabelBullet.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/NavigationBar.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/OHLC.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/PieTick.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/RadarColumn.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/SankeyLink.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/SankeyNode.js","./node_modules/@amcharts/amcharts4/.internal/charts/elements/XYChartScrollbar.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/CandlestickSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/ColumnSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/ColumnSeries3D.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/ConeSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/CurvedColumnSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/FunnelSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/LineSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/LineSeriesSegment.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/OHLCSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/PercentSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/PictorialStackedSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/PieSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/PieSeries3D.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/PyramidSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/RadarColumnSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/RadarSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/StepLineSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/StepLineSeriesSegment.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/TreeMapSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/series/XYSeries.js","./node_modules/@amcharts/amcharts4/.internal/charts/types/ChordDiagram.js","./node_modules/@amcharts/amcharts4/.internal/charts/types/FlowDiagram.js","./node_modules/@amcharts/amcharts4/.internal/charts/types/GaugeChart.js","./node_modules/@amcharts/amcharts4/.internal/charts/types/PercentChart.js","./node_modules/@amcharts/amcharts4/.internal/charts/types/PieChart.js","./node_modules/@amcharts/amcharts4/.internal/charts/types/PieChart3D.js","./node_modules/@amcharts/amcharts4/.internal/charts/types/RadarChart.js","./node_modules/@amcharts/amcharts4/.internal/charts/types/SankeyDiagram.js","./node_modules/@amcharts/amcharts4/.internal/charts/types/SlicedChart.js","./node_modules/@amcharts/amcharts4/.internal/charts/types/TreeMap.js","./node_modules/@amcharts/amcharts4/.internal/charts/types/XYChart.js","./node_modules/@amcharts/amcharts4/.internal/charts/types/XYChart3D.js","./node_modules/@amcharts/amcharts4/.internal/core/elements/QuadraticCurve.js","./node_modules/@amcharts/amcharts4/charts.js","./src/app/views/charts/chart-am/chart-am.component.html","./src/app/views/charts/chart-apex/chart-apex.component.html","./src/app/views/charts/chart-high/chart-high.component.html","./src/app/views/charts/morris-chart/morris-chart.component.html","./src/app/views/charts/chart-am/chart-am.component.ts","./src/app/views/charts/chart-apex/chart-apex.component.ts","./src/app/views/charts/chart-high/chart-high.component.ts","./src/app/views/charts/charts-routing.module.ts","./src/app/views/charts/charts.module.ts","./src/app/views/charts/morris-chart/morris-chart.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACsC;AACa;AACJ;AACA;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8BAA8B;AACvC,SAAS,gCAAgC;AACzC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6GAA6G,yDAAc;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,kDAAQ;AACkB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,4C;;;;;;;;;;;;ACvHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACwC;AACO;AACA;AACA;AACI;AACF;AACE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,+BAA+B;AACxC,SAAS,iCAAiC;AAC1C;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yDAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA,mBAAmB,iEAAsB;AACzC;AACA;AACA,mBAAmB,iEAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA,qBAAqB,iBAAiB,oDAAS,0BAA0B,oDAAS;AAClF;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,kCAAkC,2DAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iCAAiC,oDAAS,2EAA2E,oDAAS;AACzJ,wBAAwB,2DAAY,YAAY,0DAAW;AAC3D;AACA,2CAA2C,mDAAmD;AAC9F;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA;AACA,oBAAoB,gEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oDAAS;AAC9B,qBAAqB,oDAAS;AAC9B;AACA,yCAAyC,oDAAS,+BAA+B,oDAAS;AAC1F,0CAA0C,oDAAS,+BAA+B,oDAAS;AAC3F;AACA,sFAAsF,oDAAS,2EAA2E,oDAAS;AACnL;AACA;AACA;AACA,4EAA4E,oDAAS,8DAA8D,oDAAS;AAC5J;AACA;AACA,+FAA+F,oDAAS,gFAAgF,oDAAS;AACjM;AACA;AACA,uBAAuB,oDAAS;AAChC,uBAAuB,oDAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,oDAAS;AAChE,mFAAmF,oDAAS;AAC5F;AACA;AACA;AACA;AACA;AACA,qDAAqD,oDAAS,QAAQ;AACtE;AACA,oDAAoD,oDAAS,QAAQ;AACrE,2BAA2B,oDAAS;AACpC,2BAA2B,oDAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,oDAAS;AACkB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,6C;;;;;;;;;;;;AC7SA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AAC8C;AACQ;AACR;AACU;AACT;AACa;AACb;AACI;AACF;AACF;AACL;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kEAAuB,EAAE,qCAAqC;AACtF;AACA,SAAS;AACT;AACA,wBAAwB,kEAAuB,EAAE,qCAAqC;AACtF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uEAA4B;AAC/C,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0DAAc;AACnC;AACA,+CAA+C,2DAAO;AACtD,sCAAsC,mEAAO;AAC7C;AACA;AACA;AACA,+CAA+C,2DAAO;AACtD;AACA;AACA;AACA,sCAAsC,mEAAO;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uEAA4B;AAC/C,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2DAAgB;AAC7C,yBAAyB,iBAAiB,oDAAS,yBAAyB,oDAAS;AACrF;AACA;AACA,gBAAgB,IAAI,oDAAS,iDAAiD,oDAAS,wBAAwB,oDAAS,iDAAiD,oDAAS;AAClL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2DAAY,EAAE,aAAa,oDAAS,0BAA0B,oDAAS,cAAc,IAAI,0DAAW;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAc,aAAa,0DAAc;AACrD,wBAAwB,wDAAa;AACrC,yBAAyB,uEAA4B,CAAC,0DAAc,8BAA8B,mEAAO;AACzG,kCAAkC,uEAA4B;AAC9D;AACA,8BAA8B,uEAA4B,CAAC,0DAAc;AACzE,wBAAwB,2DAAY,EAAE,kBAAkB,oDAAS,0BAA0B,oDAAS,SAAS,IAAI,2DAAY,EAAE,aAAa,oDAAS,qBAAqB,oDAAS,SAAS;AAC5L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wDAAa;AACrC;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAY,EAAE,aAAa,oDAAS,qBAAqB,oDAAS,SAAS,IAAI,2DAAY,EAAE,4BAA4B,oDAAS,oCAAoC,oDAAS,SAAS;AAChN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uDAAU;AACxC;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAa;AACjC,iBAAiB,aAAa,oDAAS,qBAAqB,oDAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAc,mBAAmB,0DAAc;AAC3D,iBAAiB,0DAAc;AAC/B;AACA;AACA,4BAA4B,oDAAS;AACrC,0BAA0B,oDAAS;AACnC;AACA;AACA;AACA,8BAA8B,uEAA4B;AAC1D,mCAAmC,uEAA4B;AAC/D;AACA;AACA;AACA,mBAAmB,wDAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0DAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oEAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gEAAqB,CAAC,yDAAc;AACxD;AACA;AACA;AACA,CAAC,CAAC,0DAAY;AACkB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,gD;;;;;;;;;;;;ACpfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACgD;AACF;AACgB;AACG;AACL;AACb;AACA;AACI;AACF;AACF;AACL;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uEAA4B;AAC/C,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0DAAc;AACnC;AACA,+CAA+C,2DAAO;AACtD,sCAAsC,mEAAO;AAC7C;AACA;AACA;AACA,+CAA+C,2DAAO;AACtD;AACA;AACA;AACA,sCAAsC,mEAAO;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uEAA4B;AAC/C,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2DAAgB;AACrC,gBAAgB,aAAa,oDAAS,8BAA8B,oDAAS;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2DAAY,EAAE,4BAA4B,oDAAS,6CAA6C,oDAAS,kBAAkB,IAAI,2DAAY,EAAE,uBAAuB,oDAAS,wCAAwC,oDAAS,kBAAkB;AACzQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4DAAiB;AACtC;AACA;AACA,YAAY,0DAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,0DAAY;AAC5G;AACA;AACA,uBAAuB,2DAAY,EAAE,aAAa,oDAAS,qBAAqB,oDAAS,SAAS;AAClG,+BAA+B,WAAW;AAC1C;AACA,4BAA4B,2DAAY,EAAE,aAAa,oDAAS,qBAAqB,oDAAS,SAAS;AACvG;AACA;AACA,wBAAwB,2DAAY,EAAE,aAAa,oDAAS,qBAAqB,oDAAS,SAAS;AACnG;AACA;AACA,uBAAuB,2DAAY,EAAE,aAAa,oDAAS,0BAA0B,oDAAS,cAAc,IAAI,0DAAW;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,0GAA0G;AAC1G,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,+DAAoB;AACnE;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,2DAAgB;AAC1C,qBAAqB,2DAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,0DAAY;AACxG;AACA;AACA,mBAAmB,2DAAY,EAAE,aAAa,oDAAS,qBAAqB,oDAAS,SAAS;AAC9F,2BAA2B,WAAW;AACtC;AACA,wBAAwB,2DAAY,EAAE,aAAa,oDAAS,qBAAqB,oDAAS,SAAS;AACnG;AACA;AACA,oBAAoB,2DAAY,EAAE,aAAa,oDAAS,qBAAqB,oDAAS,SAAS;AAC/F,oBAAoB,2DAAY,EAAE,kBAAkB,oDAAS,0BAA0B,oDAAS,SAAS;AACzG,mCAAmC,QAAQ;AAC3C;AACA,wBAAwB,2DAAY,EAAE,kBAAkB,oDAAS,0BAA0B,oDAAS,SAAS;AAC7G;AACA;AACA;AACA,mBAAmB,wDAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sEAAW;AAC7C,gCAAgC,sEAAW;AAC3C,kCAAkC,sEAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,0CAA0C;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+DAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAY,EAAE,aAAa,IAAI,2DAAY,EAAE,iBAAiB,oDAAS,yBAAyB,oDAAS,SAAS;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uDAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,4DAAa;AACe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,8C;;;;;;;;;;;;AC1kBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACsD;AACW;AAClB;AACI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,6BAA6B;AACtC,SAAS,+BAA+B;AACxC;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAY,EAAE,eAAe,IAAI,2DAAY,EAAE,mBAAmB,IAAI,2DAAY,EAAE,aAAa;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2DAAY,EAAE,eAAe,IAAI,2DAAY,EAAE,aAAa,IAAI,2DAAY,EAAE,aAAa;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,iEAAa;AACY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,2C;;;;;;;;;;;;ACxHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACsD;AACW;AACd;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,6BAA6B;AACtC,SAAS,+BAA+B;AACxC;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAY,EAAE,aAAa,IAAI,2DAAY,EAAE,eAAe,IAAI,2DAAY,EAAE,mBAAmB;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2DAAY,EAAE,aAAa;AACxD,cAAc,2DAAY,EAAE,aAAa;AACzC,cAAc,2DAAY,EAAE,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,iEAAa;AACY;AAC3B,2C;;;;;;;;;;;;AClHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AAC4C;AACI;AACA;AACD;AACU;AACD;AACT;AACA;AACI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAc;AAC9B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,kDAAY;AACkB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,SAAS,0BAA0B;AACnC,SAAS,4BAA4B;AACrC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iEAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oEAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,eAAe;AACvD;AACA;AACA;AACA;AACA,6CAA6C,8BAA8B;AAC3E;AACA;AACA;AACA,yCAAyC,yDAAc;AACvD;AACA;AACA,yCAAyC,yDAAc;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yDAAc;AAClC;AACA;AACA;AACA;AACA;AACA,oBAAoB,yDAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2DAAgB;AACzC,uBAAuB,2DAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oDAAS;AAC9B,mBAAmB,oDAAS;AAC5B;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0DAAe,EAAE,mDAAmD,GAAG,iDAAiD;AAC5I,oDAAoD,uBAAuB;AAC3E;AACA;AACA;AACA,sCAAsC,2DAAgB;AACtD;AACA;AACA;AACA,wDAAwD,uBAAuB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4DAAa,0FAA0F,4DAAa;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAkB;AAC9B;AACA;AACA,2CAA2C,yDAAc,sBAAsB,yDAAc;AAC7F;AACA;AACA,oBAAoB,0DAAe,EAAE,6CAA6C,GAAG,mCAAmC;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA;AACA;AACA,uBAAuB,2DAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA;AACA;AACA,uBAAuB,2DAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2DAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAkB;AAC9B;AACA;AACA;AACA;AACA,kCAAkC,oDAAS;AAC3C,gCAAgC,oDAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+GAA+G;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+GAA+G;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAc,yBAAyB,yDAAc;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,0CAAI;AACkB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,wC;;;;;;;;;;;;ACzmCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACwC;AACO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,+BAA+B;AACxC,SAAS,iCAAiC;AAC1C;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,oDAAS;AACkB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,6C;;;;;;;;;;;;AChPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAC4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AAC2D;AACd;AACY;AACT;AACD;AACA;AACA;AACI;AACJ;AACE;AACE;AACF;AACiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,4DAAiB;AACS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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;AAC3C,aAAa,+BAA+B;AAC5C,aAAa,+BAA+B;AAC5C,aAAa,+BAA+B;AAC5C,aAAa,gCAAgC;AAC7C,aAAa,gCAAgC;AAC7C,aAAa,gCAAgC;AAC7C,aAAa,iCAAiC;AAC9C,aAAa;AACb;AACA;AACA,aAAa,oCAAoC;AACjD,aAAa,qCAAqC;AAClD,aAAa,sCAAsC;AACnD,aAAa,+BAA+B;AAC5C,aAAa,gCAAgC;AAC7C,aAAa,+BAA+B;AAC5C,aAAa,gCAAgC;AAC7C,aAAa,6BAA6B;AAC1C,aAAa,4BAA4B;AACzC,aAAa,6BAA6B;AAC1C,aAAa,8BAA8B;AAC3C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4DAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4DAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4DAAiB;AAChD;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB,eAAe;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yDAAc;AAC5C;AACA;AACA;AACA;AACA,gCAAgC,sDAAQ,GAAG;AAC3C;AACA;AACA;AACA,oBAAoB,4DAAiB,gDAAgD,4DAAiB;AACtG,oCAAoC,sDAAQ,GAAG;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,YAAY,4DAAiB;AAC7B,2BAA2B,sDAAQ,GAAG;AACtC;AACA;AACA,6BAA6B,4DAAiB;AAC9C;AACA,iCAAiC,4DAAiB;AAClD,yBAAyB,sDAAW,2BAA2B,4DAAiB;AAChF;AACA,QAAQ,yDAAU;AAClB;AACA;AACA,gCAAgC,sDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,mBAAmB,EAAE;AAC5H;AACA;AACA;AACA;AACA,gCAAgC,oDAAS,CAAC,sDAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F,mBAAmB,EAAE;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gCAAgC,4DAAiB;AACjD;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,4DAAiB;AAC1D;AACA,uCAAuC,4DAAiB;AACxD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA,YAAY,uDAAW;AACvB;AACA;AACA;AACA;AACA;AACA,kCAAkC,2EAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAY;AAC5B;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,0CAA0C,sDAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAW;AACvC;AACA;AACA;AACA;AACA;AACA,wCAAwC,yDAAc;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,4BAA4B,wDAAY;AACxC;AACA;AACA,oCAAoC,yDAAc;AAClD;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,gCAAgC,uDAAW;AAC3C;AACA;AACA;AACA;AACA,4CAA4C,yDAAc;AAC1D;AACA,iDAAiD,yDAAc;AAC/D;AACA;AACA;AACA,uEAAuE,yDAAc;AACrF;AACA;AACA,wEAAwE,yDAAc;AACtF;AACA;AACA,gDAAgD,yDAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,yDAAc;AAC9D;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,gCAAgC,iEAAqB;AACrD,gCAAgC,wDAAY;AAC5C;AACA;AACA,wCAAwC,yDAAc;AACtD;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,wBAAwB,iEAAqB;AAC7C;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wDAAY;AACpB;AACA;AACA,4BAA4B,sDAAW;AACvC;AACA,0BAA0B,oDAAS;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yDAAc,cAAc,yDAAc;AAC/E;AACA;AACA;AACA,yCAAyC;AACzC;AACA,uBAAuB,sDAAW;AAClC;AACA;AACA,gBAAgB,oDAAS;AACzB;AACA;AACA,8BAA8B,6DAAc;AAC5C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sDAAW;AAC9C;AACA,wBAAwB,oDAAS;AACjC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAW;AACnB;AACA,sBAAsB,qDAAU;AAChC;AACA,wBAAwB,oDAAS;AACjC;AACA;AACA;AACA;AACA,YAAY,sDAAW;AACvB;AACA,gBAAgB,oDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,4DAAiB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAW;AACnB,QAAQ,oDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc,cAAc,yDAAc;AACtD;AACA;AACA;AACA;AACA;AACA,+BAA+B,qDAAU;AACzC;AACA;AACA;AACA,8CAA8C,qDAAU;AACxD;AACA,8BAA8B,qDAAU,OAAO;AAC/C,0BAA0B,oDAAS;AACnC;AACA;AACA,wBAAwB,4DAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,wBAAwB,EAAE;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAU;AAC1B;AACA;AACA;AACA;AACA,4BAA4B,4DAAiB;AAC7C;AACA;AACA;AACA;AACA,2CAA2C,qDAAU;AACrD,8CAA8C,oDAAS;AACvD;AACA;AACA,kDAAkD,qDAAU,OAAO;AACnE,8CAA8C,oDAAS;AACvD;AACA;AACA,4CAA4C,4DAAiB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,0BAA0B,EAAE;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc,cAAc,yDAAc;AACtD;AACA;AACA;AACA,iBAAiB,yDAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4DAAiB;AACpC,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sDAAW;AACnC,sBAAsB,oDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sDAAW;AACnC,sBAAsB,oDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4DAAiB;AAChD;AACA;AACA,mBAAmB,sDAAQ,GAAG;AAC9B;AACA;AACA;AACA,mBAAmB,sDAAQ,GAAG;AAC9B;AACA;AACA,mBAAmB,sDAAQ,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sDAAQ,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA,uBAAuB,2DAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA,uBAAuB,2DAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA,uBAAuB,2DAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA,aAAa,yDAAc;AAC3B;AACA,iBAAiB,yDAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc,eAAe,yDAAc;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,4DAAiB;AACnD;AACA;AACA;AACA;AACA,sCAAsC,4DAAiB;AACvD;AACA;AACA,sCAAsC,4DAAiB;AACvD;AACA;AACA,sCAAsC,4DAAiB;AACvD;AACA;AACA;AACA;AACA,kCAAkC,4DAAiB;AACnD;AACA;AACA;AACA,kCAAkC,4DAAiB,cAAc,4DAAiB;AAClF;AACA;AACA;AACA,kCAAkC,4DAAiB,cAAc,4DAAiB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,+BAA+B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yDAAc;AACnC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAW;AAC1B;AACA,YAAY,yDAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAW;AACnB;AACA,YAAY,oDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+GAA+G;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,uCAAuC,6DAA6D,GAAG,6DAA6D;AACpK;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAc;AAC9B;AACA;AACA,iIAAiI,4DAAiB,gCAAgC,4DAAiB;AACnM,sCAAsC,sDAAQ,GAAG;AACjD;AACA;AACA;AACA;AACA,qBAAqB,yDAAc,YAAY,yDAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sDAAW,CAAC,oDAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,6BAA6B,2DAAgB;AAC7C,2BAA2B,2DAAgB;AAC3C;AACA;AACA;AACA,qCAAqC,2DAAgB;AACrD;AACA;AACA;AACA,mCAAmC,2DAAgB;AACnD;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sDAAQ,GAAG;AACjD,SAAS;AACT;AACA;AACA,qCAAqC,sDAAQ,GAAG;AAChD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gCAAgC,sDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,+BAA+B;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,iBAAiB,2FAA2F;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjmCAAmC,yDAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,oDAAS;AACS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,oC;;;;;;;;;;;;ACvwEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACkD;AACH;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,2BAA2B;AACpC,SAAS,6BAA6B;AACtC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,8DAAc;AACS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,yC;;;;;;;;;;;;ACpGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAC4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AAC2D;AACZ;AACA;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,4DAAiB;AACa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,SAAS,gFAAgF;AACzF,SAAS,0BAA0B;AACnC,SAAS,4BAA4B;AACrC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sDAAQ,6CAA6C,oBAAoB;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wDAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB,gFAAgF;AACjG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sDAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,oDAAS;AACa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,wC;;;;;;;;;;;;AC1RA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AAC8B;AACiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,0BAA0B;AACnC,SAAS,4BAA4B;AACrC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,0CAAI;AACkB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,wC;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACiD;AACmB;AACrB;AACI;AACa;AACjB;AACE;AACF;AACJ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B,SAAS,sBAAsB;AAC/B;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mEAAO;AAC7B,uBAAuB,mEAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oFAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG,oFAAc;AACvH;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uEAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sDAAW;AAC7B,kBAAkB,sDAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oFAAc,kBAAkB,wEAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mDAAM;AACd;AACA,0BAA0B,oFAAc;AACxC,YAAY,4DAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wEAAgB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG,oFAAc;AAC/G;AACA;AACA;AACA,oBAAoB,uEAA4B;AAChD;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oFAAc;AAC9C;AACA;AACA,oBAAoB,uEAA4B;AAChD;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAc;AAC9B,gBAAgB,oFAAc;AAC9B;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,yDAAS;AACO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,kC;;;;;;;;;;;;ACjWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACI;AACsB;AACb;AACI;AACJ;AACE;AACF;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,yBAAyB;AAClC,SAAS,2BAA2B;AACpC;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAO;AAC9B,4BAA4B,mEAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4DAAiB;AACtC;AACA;AACA;AACA,sFAAsF;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yDAAc,gBAAgB,yDAA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AW;AACxC,2BAA2B,sDAAW;AACtC;AACA;AACA,6BAA6B,sDAAW;AACxC,2BAA2B,sDAAW;AACtC;AACA,+BAA+B;AAC/B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uEAA4B;AAC/C,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iEAAsB,CAAC,mEAAO,OAAO,oDAAS;AACjE,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2DAAO;AAC9C,8BAA8B,mEAAO;AACrC;AACA,mBAAmB,uEAA4B;AAC/C,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,kDAAQ;AACa;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uC;;;;;;;;;;;;AChbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACkC;AACS;AACqC;AAClC;AACF;AACE;AACC;AACA;AACwB;AACH;AACJ;AACjB;AACE;AACF;AACE;AACE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,sBAAsB;AAC/B,SAAS,wBAAwB;AACjC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA,kCAAkC,+EAAiB;AACnD;AACA,0CAA0C,mDAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mDAAM;AAC5C;AACA;AACA,qBAAqB,+DAAK;AAC1B;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,sCAAsC,mDAAM;AAC5C;AACA;AACA,qBAAqB,+DAAK;AAC1B;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4DAAY,EAAE,aAAa,IAAI,4DAAY,EAAE,4BAA4B;AACvG;AACA;AACA,8BAA8B,4DAAY,EAAE,aAAa,IAAI,4DAAY,EAAE,2BAA2B;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uDAAW;AACnC,wBAAwB,uDAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAAe;AAChD,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,yDAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAW;AAC3B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6DAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qFAAc;AAChD,2CAA2C,yEAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uEAA2B;AAClD;AACA;AACA,uBAAuB,qEAAyB;AAChD;AACA;AACA,uBAAuB,6DAAiB;AACxC;AACA,0BAA0B,qFAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uDAAW;AAChC,yBAAyB,uDAAW;AACpC,uBAAuB,uDAAW;AAClC,2BAA2B,uDAAW;AACtC;AACA;AACA,uBAAuB;AACvB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAW;AACnB,qBAAqB,uDAAW;AAChC,mBAAmB,uDAAW;AAC9B,yBAAyB,uDAAW;AACpC,uBAAuB,uDAAW;AAClC,uBAAuB,QAAQ,qDAAS,qBAAqB,qDAAS;AACtE,uBAAuB,QAAQ,qDAAS,qBAAqB,qDAAS;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kEAAa;AACvD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kEAAa;AACvD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAuB,EAAE,uCAAuC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+DAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAuB,EAAE,uCAAuC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+DAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAc,kBAAkB,0DAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAc,kBAAkB,0DAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAc;AAC9B,+BAA+B,yDAAa;AAC5C;AACA,gBAAgB,uDAAW;AAC3B,wBAAwB,0DAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,sCAAsC,yDAAQ;AAC9C;AACA;AACA;AACA,oBAAoB,uDAAW;AAC/B;AACA,qBAAqB;AACrB;AACA;AACA;AACA,oBAAoB,uDAAW;AAC/B,+FAA+F,qBAAqB,EAAE;AACtH,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yDAAS,uBAAuB,uDAAQ,sBAAsB,yDAAS,uBAAuB,uDAAQ;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD,iCAAiC,uBAAuB;AACxD;AACA,qCAAqC,wBAAwB;AAC7D;AACA;AACA,qCAAqC,wBAAwB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8CAAM;AACY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,oC;;;;;;;;;;;;AC35BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACkC;AACc;AACD;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,yBAAyB;AAClC,SAAS,2BAA2B;AACpC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,wDAAI;AAC5C;AACA,yCAAyC,wDAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8CAAM;AACe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uC;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AACkB;AACL;AACqB;AACrB;AACI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,4EAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oDAAS;AAC3C,kCAAkC,oDAAS;AAC3C,kCAAkC,oDAAS;AAC3C,kCAAkC,oDAAS;AAC3C;AACA,oDAAoD,WAAW,GAAG,WAAW;AAC7E;AACA;AACA,0BAA0B;AAC1B,2BAA2B,2DAAY,EAAE,eAAe;AACxD,wBAAwB,0DAAW;AACnC,wBAAwB,qEAAsB,EAAE,eAAe;AAC/D,wBAAwB,0DAAW;AACnC,wBAAwB,qEAAsB,EAAE,eAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,oDAAS;AAClD,yCAAyC,oDAAS;AAClD,yCAAyC,oDAAS;AAClD,yCAAyC,oDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,gEAAe;AACI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,qC;;;;;;;;;;;;ACtJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACoD;AACU;AACf;AACG;AACqB;AACpB;AACJ;AACA;AACH;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yEAAiB;AACvD;AACA;AACA,uBAAuB,KAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,0DAAK;AAC7C;AACA;AACA,0CAA0C,+EAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uDAAM;AAC3C;AACA,yBAAyB,yDAAc;AACvC;AACA;AACA;AACA,yBAAyB,yDAAc;AACvC;AACA;AACA;AACA;AACA,4CAA4C,oDAAS;AACrD,4CAA4C,oDAAS;AACrD;AACA,aAAa;AACb;AACA,8FAA8F;AAC9F,gBAAgB,sDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAU;AAC1B;AACA;AACA;AACA,wBAAwB,yDAAc;AACtC;AACA;AACA,iCAAiC,yDAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gBAAgB,yDAAU;AAC1B;AACA;AACA;AACA;AACA,6BAA6B,yDAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yDAAc;AAC1C,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oDAAS;AACnC,0BAA0B,oDAAS;AACnC,oBAAoB,yDAAc,EAAE,2CAA2C;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,gEAAe;AACI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,qC;;;;;;;;;;;;ACzMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACkC;AACkB;AACL;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B,SAAS,sBAAsB;AAC/B;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4DAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8CAAM;AACgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,wC;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACiD;AACG;AACM;AACsB;AAC7B;AACJ;AACwB;AACtB;AACF;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yEAAoB;AAC9C;AACA,kCAAkC,+EAAiB;AACnD;AACA;AACA,sBAAsB,4DAAM;AAC5B;AACA;AACA;AACA;AACA;AACA,sBAAsB,mEAAO;AAC7B,uBAAuB,mEAAO;AAC9B,uBAAuB,mEAAO;AAC9B,4BAA4B,mEAAO;AACnC,uBAAuB,kEAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAO;AAC/B,yBAAyB,mEAAO;AAChC;AACA;AACA,qBAAqB,uEAA4B;AACjD,qBAAqB,uEAA4B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yDAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qCAAqC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,kEAAa;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAc,iBAAiB,yDAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,yDAAS;AACU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,qC;;;;;;;;;;;;AC5XA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACiD;AACuB;AACzB;AACI;AACJ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B,SAAS,sBAAsB;AAC/B;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mEAAO;AAC7B,uBAAuB,mEAAO;AAC9B,iCAAiC;AACjC,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gFAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oDAAS;AACpC,4BAA4B,oDAAS;AACrC;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB,oBAAoB,oDAAS,0CAA0C,oDAAS;AACxG;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,yDAAS;AACO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,kC;;;;;;;;;;;;AC3HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACkC;AAC+B;AAClB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,sBAAsB;AAC/B,SAAS,wBAAwB;AACjC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yEAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8CAAM;AACY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,oC;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACkC;AACiB;AACJ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2DAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8CAAM;AACc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,sC;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACkC;AACS;AACQ;AACF;AACF;AACc;AACV;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,0BAA0B;AACnC,SAAS,4BAA4B;AACrC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,mDAAM;AACnD;AACA;AACA,qBAAqB,mEAAO;AAC5B,sBAAsB,mEAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAW;AACnB;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB,GAAG,iBAAiB,GAAG,iBAAiB;AAChF;AACA;AACA;AACA,uBAAuB,aAAa,GAAG,qBAAqB,GAAG,aAAa;AAC5E;AACA,mBAAmB,2DAAY,kBAAkB,iEAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,8CAAM;AACgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,wC;;;;;;;;;;;;ACvJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACkC;AACS;AACI;AACI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B,SAAS,sBAAsB;AAC/B;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mDAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2DAAY,EAAE,eAAe,IAAI,2DAAY,EAAE,cAAc,IAAI,2DAAY,EAAE,cAAc,IAAI,2DAAY,EAAE,aAAa,IAAI,2DAAY,EAAE,cAAc,IAAI,2DAAY,EAAE,aAAa;AACzN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8CAAM;AACe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uC;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AAC2C;AACM;AAC0B;AAC5B;AACH;AACG;AACoB;AACX;AACR;AACuB;AACpB;AACJ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,6BAA6B;AACtC,SAAS,+BAA+B;AACxC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gFAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS,EAAE,OAAO,EAAE,YAAY;AAC9D;AACA,uCAAuC,mDAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,yDAAS;AACjE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mDAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uDAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uDAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6DAAY,KAAK,uDAAM;AAC3D,yCAAyC,6DAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wDAAI,iCAAiC,wDAAI;AAC/E;AACA;AACA,sCAAsC,gEAAQ,iCAAiC,gEAAQ;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mFAAc;AACnD;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,yDAAS;AACgB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,2C;;;;;;;;;;;;AC7VA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACiD;AACI;AACR;AACE;AACwB;AACpB;AACA;AACF;AACE;AACqB;AACrB;AACR;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,6BAA6B;AACtC,SAAS,+BAA+B;AACxC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,uDAAc;AACjD;AACA;AACA;AACA,YAAY,+EAAiqDAAI;AAChD;AACA;AACA,gDAAgD,yDAAU,uDAAuD,QAAQ,wDAAa,yBAAyB,EAAE;AACjK;AACA;AACA,gDAAgD,yDAAU,uDAAuD,QAAQ,yDAAc,CAAC,wDAAa,oBAAoB,EAAE;AAC3K;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,qDAAI;AAChD;AACA;AACA,gDAAgD,yDAAU,uDAAuD,QAAQ,wDAAa,yBAAyB,EAAE;AACjK;AACA;AACA,gDAAgD,yDAAU,uDAAuD,QAAQ,yDAAc,CAAC,wDAAa,oBAAoB,EAAE;AAC3K;AACA;AACA;AACA;AACA,iBAAiB;AACjwCAAwC,iFAAgB;AACxD;AACA,QAAQ,kEAAsB,eAAe,6DAAgB;AAC7D;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,yDAAS;AACgB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,2C;;;;;;;;;;;;AC3WA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACiD;AACN;AACI;AACI;AACF;AACE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,yBAAyB;AAClC,SAAS,2BAA2B;AACpC,SAAS,iEAAiE;AAC1E;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA,wCAAwC,mDAAM;AAC9C;AACA;AACA;AACA;AACA,4BAA4B,mEAAO;AACnC,yBAAyB,mEAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iEAAsB;AAC3C,qBAAqB,iEAAsB;AAC3C,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,uBAAuB;AACvB,uBAAuB;AACvB,sBAAsB,2DAAY;AAClC;AACA;AACA,sBAAsB,qEAAsB;AAC5C,sBAAsB,qEAAsB;AAC5C;AACA,mBAAmB,2DAAY,OAAO,2DAAY,aAAa,2DAAY;AAC3E,8BAA8B;AAC9B;AACA;AACA,qBAAqB,iEAAsB;AAC3C,qBAAqB,iEAAsB;AAC3C,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,uBAAuB;AACvB,uBAAuB;AACvB,sBAAsB,2DAAY;AAClC;AACA;AACA,sBAAsB,qEAAsB;AAC5C,sBAAsB,qEAAsB;AAC5C;AACA,mBAAmB,2DAAY,OAAO,2DAAY,aAAa,2DAAY;AAC3E,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iEAAsB;AAC3C,qBAAqB,iEAAsB;AAC3C,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB;AACA;AACA,oBAAoB;AACpB;AACA;AACA,qBAAqB,iEAAsB;AAC3C,qBAAqB,iEAAsB;AAC3C,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,yDAAS;AACY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uC;;;;;;;;;;;;ACvPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACwC;AACwC;AACjC;AACE;AACE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qEAA0B;AAC/C,qBAAqB,qEAA0B,EAAE,eAAe;AAChE,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qEAA0B;AAC/C,qBAAqB,qEAA0B,EAAE,eAAe;AAChE,sBAAsB;AACtB;AACA;AACA;AACA;AACA,wBAAwB,2DAAY,OAAO,2DAAY,OAAO,2DAAY;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,kEAAa;AACpD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,mDAAI;AACgB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,sC;;;;;;;;;;;;AClMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACkC;AACgB;AACH;AACA;AACwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B,SAAS,sBAAsB;AAC/B;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0DAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+DAAK;AAC5B;AACA,yBAAyB,+EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8CAAM;AACe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uC;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACiD;AACF;AACoB;AACX;AACA;AACT;AACwB;AACpB;AACA;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,uDAAQ;AACuB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,2BAA2B;AACpC,SAAS,6BAA6B;AACtC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+EAAiB;AACnD,2BAA2B,gEAAQ;AACnC;AACA;AACA;AACA;AACA,0BAA0B,6DAAY;AACtC,kCAAkC,6DAAY;AAC9C;AACA,mCAAmC,iEAAkB,2BAA2B,6BAA6B,EAAE;AAC/G;AACA,2BAA2B,gEAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6DAAY;AAC3C,kCAAkC,6DAAY;AAC9C;AACA,6BAA6B,gEAAQ;AACrC;AACA;AACA;AACA;AACA,sBAAsB,mEAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,yDAAS;AACc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,yC;;;;;;;;;;;;AC3KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AAC4C;AACI;AACD;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,kBAAkB;AAC3B,SAAS,oBAAoB;AAC7B;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,wDAAI;AAC7C;AACA,4CAA4C,wDAAI;AAChD;AACA,0CAA0C,wDAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,wDAAW;AACG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,gC;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACwC;AACwC;AACjC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAChC;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qCAAqC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,kEAAa;AACpD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,mDAAI;AACa;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,mC;;;;;;;;;;;;ACrIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACkC;AACgB;AACH;AACA;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,yBAAyB;AAClC,SAAS,2BAA2B;AACpC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,0DAAK;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8CAAM;AACe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uC;;;;;;;;;;;;AChGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AACkB;AACL;AACa;AACW;AACxB;AACA;AACc;AACV;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oEAAU;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yDAAc;AAC/B;AACA;AACA,iBAAiB,yDAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oDAAS;AACxC,+BAA+B,oDAAS;AACxC,+BAA+B,oDAAS;AACxC,+BAA+B,oDAAS;AACxC,mCAAmC,oDAAS;AAC5C,mCAAmC,oDAAS;AAC5C,mCAAmC,oDAAS;AAC5C,mCAAmC,oDAAS;AAC5C;AACA,+DAA+D,oDAAS;AACxE,+DAA+D,oDAAS;AACxE;AACA;AACA,gBAAgB,yDAAc,QAAQ,yDAAc,QAAQ,yDAAc,QAAQ,yDAAc,QAAQ,yDAAc;AACtH;AACA,oBAAoB,sDAAW,YAAY,sDAAW;AACtD;AACA;AACA,oBAAoB,sDAAW,YAAY,sDAAW;AACtD;AACA;AACA,oBAAoB,sDAAW,YAAY,sDAAW;AACtD;AACA;AACA,oBAAoB,sDAAW,YAAY,sDAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,oDAAS;AAC9D,qDAAqD,oDAAS;AAC9D,qDAAqD,oDAAS;AAC9D,qDAAqD,oDAAS;AAC9D,qDAAqD,oDAAS;AAC9D,qDAAqD,oDAAS;AAC9D,qDAAqD,oDAAS;AAC9D,qDAAqD,oDAAS;AAC9D,4BAA4B,yDAAc,EAAE,mBAAmB,GAAG,mBAAmB;AACrF,8BAA8B,oDAAS,eAAe,oDAAS,UAAU,oDAAS;AAClF,8BAA8B,oDAAS,eAAe,oDAAS,UAAU,oDAAS;AAClF,+DAA+D,oDAAS;AACxE,+DAA+D,oDAAS;AACxE,+DAA+D,oDAAS;AACxE,+DAA+D,oDAAS;AACxE,8CAA8C,iBAAiB,GAAG,mBAAmB,GAAG,mBAAmB,GAAG,iBAAiB;AAC/H;AACA;AACA;AACA;AACA,wBAAwB,2DAAY,EAAE,iBAAiB;AACvD,4BAA4B,iEAAkB,8BAA8B,iBAAiB,GAAG,mBAAmB,GAAG,mBAAmB,GAAG,iBAAiB;AAC7J,wBAAwB,2DAAY,EAAE,iBAAiB;AACvD,4BAA4B,iEAAkB,8BAA8B,iBAAiB,GAAG,mBAAmB,GAAG,mBAAmB,GAAG,iBAAiB;AAC7J,wBAAwB,8DAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,gEAAe;AACK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,sC;;;;;;;;;;;;AClSA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACoD;AACR;AACG;AACwB;AACpB;AACJ;AACE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,wDAAW;AACrD;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,wDAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA;AACA;AACA,0CAA0C,+EAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAU;AAC1B;AACA;AACA,wBAAwB,yDAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sDAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gBAAgB,yDAAU;AAC1B;AACA;AACA;AACA,wBAAwB,yDAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,gEAAe;AACK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,sC;;;;;;;;;;;;AC5QA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AAC0D;AACf;AACE;AACoB;AACtB;AACG;AACF;AACG;AACwB;AACU;AAC9B;AACJ;AACI;AACF;AACE;AACJ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8BAA8B;AACvC,SAAS,gCAAgC;AACzC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA,kCAAkC,+EAAiB;AACnD;AACA,+CAA+C,sDAAO;AACtD;AACA;AACA;AACA;AACA;AACA,aAAa,uDAAW;AACxB,6BAA6B,0FAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,mDAAM;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qDAAI;AACvC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,kCAAkC,+EAAiB;AACnD;AACA,YAAY,uDAAW;AACvB,4BAA4B,gEAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oEAAO;AACjC;AACA;AACA;AACA;AACA,iCAAiC,uDAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0DAAc;AACtC;AACA;AACA,wBAAwB,0DAAc;AACtC;AACA;AACA,iBAAiB;AACjB;AACA,sCAAsC,yDAAS;AAC/C;AACA;AACA;AACA,qBAAqB,0DAAc;AACnC;AACA;AACA,qBAAqB,0DAAc;AACnC;AACA;AACA;AACA,wBAAwB,0DAAc;AACtC;AACA;AACA,wBAAwB,0DAAc;AACtC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC;AACA;AACA;AACA;AACA;AACA,iCAAiC,uDAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0DAAc;AACtC;AACA;AACA,wBAAwB,0DAAc;AACtC;AACA;AACA,iBAAiB;AACjB;AACA,sCAAsC,yDAAS;AAC/C;AACA;AACA;AACA,qBAAqB,0DAAc;AACnC;AACA;AACA,qBAAqB,0DAAc;AACnC;AACA;AACA;AACA,wBAAwB,0DAAc;AACtC;AACA;AACA,wBAAwB,0DAAc;AACtC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,0DAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB,oBAAoB,mBAAmB;AACvC,SAAS;AACT,QAAQ,0DAAU;AAClB,oBAAoB,mBAAmB;AACvC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gEAAgB;AACvC;AACA;AACA;AACA;AACA,iBAAiB;AACjB,wBAAwB,gEAAgB;AACxC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,uBAAuB,gEAAgB;AACvC;AACA;AACA;AACA;AACA,iBAAiB;AACjB,wBAAwB,gEAAgB;AACxC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAc,mBAAmB,yDAAa;AAC9D,2DAA2D,SAAS;AACpE;AACA,wBAAwB,0DAAc,YAAY,0DAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,kEAAS;AACiB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,4C;;;;;;;;;;;;ACthBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACoE;AACf;AACC;AACP;AACwB;AACtB;AACE;AACA;AACJ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,kEAAoB;AACe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,+BAA+B;AACxC,SAAS,iCAAiC;AAC1C;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+EAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4DAAiB;AACtD;AACA;AACA;AACA;AACA,qCAAqC,4DAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iEAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAsB,eAAe,6DAAgB;AAC7D,QAAQ,iEAAsB,gCAAgC,6DAAgB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iEAAW;AAC9B;AACA;AACA,CAAC,CAAC,0DAAY;AACe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,6C;;;;;;;;;;;;AC9bA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACwD;AACH;AACJ;AACkB;AACV;AACX;AACM;AACL;AACH;AAC4B;AACZ;AACb;AACI;AACA;AACF;AACF;AACM;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,YAAY,yDAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8DAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iEAAU;AACpD;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,0DAAgB;AACc;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,0BAA0B;AACnC,SAAS,4BAA4B;AACrC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oEAAO;AAC7B,uBAAuB,oEAAO;AAC9B;AACA;AACA;AACA,+DAA+D,yDAAS;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,gCAAgC;AAC7E;AACA;AACA,aAAa;AACb,iDAAiD,wBAAwB,EAAE;AAC3E;AACA,YAAY,uDAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAAY,qBAAqB,yDAAS;AAC3E;AACA;AACA;AACA;AACA,iCAAiC,+DAAY,qBAAqB,yDAAS;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,+CAA+C,mBAAmB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,uDAAW;AAC/C;AACA;AACA;AACA,0CAA0C,uDAAW;AACrD;AACA;AACA;AACA,gEAAgE,yDAAyD;AACzH;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAc;AAC1B,gBAAgB,0DAAc;AAC9B;AACA;AACA,+BAA+B,4DAAO;AACtC;AACA;AACA;AACA;AACA,mCAAmC,+DAAY,4BAA4B,+DAAY;AACvF;AACA;AACA;AACA;AACA;AACA,iBAAiB,uDAAW;AAC5B,6BAA6B,uDAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,iBAAiB,uDAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uDAAW;AAC5B,6BAA6B,uDAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,iBAAiB,uDAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uDAAW;AAC5B,6BAA6B,uDAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,iBAAiB,uDAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yDAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uDAAW;AAC5B,6BAA6B,uDAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,iBAAiB,uDAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yDAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAsB,iBAAiB,6DAAgB,EAAE;AACzE,gBAAgB,kEAAsB,kCAAkC,6DAAgB,EAAE;AAC1F;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kEAAsB,iBAAiB,6DAAgB;AAC3E,oBAAoB,kEAAsB,kCAAkC,6DAAgB;AAC5F,oBAAoB,uDAAW,CAAC,6DAAgB;AAChD;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,YAAY,0DAAU;AACtB;AACA;AACA;AACA;AACA,oBAAoB,kEAAsB,kCAAkC,6DAAgB,EAAE;AAC9F;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yDAAS,0BAA0B,yDAAS;AAClF;AACA;AACA;AACA;AACA,gFAAgF,yDAAS;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,yDAAS;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6DAAY;AAChD,yCAAyC,6DAAY;AACrD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uDAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iFAAgB;AACxD;AACA,QAAQ,kEAAsB,eAAe,6DAAgB;AAC7D;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,kDAAQ;AACc;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,wC;;;;;;;;;;;;AC9hCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AAC4E;AAC5B;AACD;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,yEAAoB;AACY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,4BAA4B;AACrC,SAAS,8BAA8B;AACvC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2DAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,iEAAY;AACY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,0C;;;;;;;;;;;;ACnKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACoE;AAChB;AACL;AACI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,kEAAoB;AACQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+DAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+DAAgB;AACnC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,0DAAY;AACQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,sC;;;;;;;;;;;;AChIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACoE;AACZ;AACT;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,kEAAoB;AACgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gCAAgC;AACzC,SAAS,kCAAkC;AAC3C;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,0DAAY;AACgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,8C;;;;;;;;;;;;ACzGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACuE;AACjB;AACF;AACe;AACpB;AACA;AACI;AACJ;AACE;AACE;AACE;AACR;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8DAAQ;AACjD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,oEAAqB;AACS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,0BAA0B;AACnC,SAAS,4BAA4B;AACrC,SAAS,iEAAiE;AAC1E;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oEAAO;AAC7B,uBAAuB,oEAAO;AAC9B,sCAAsC,oEAAO;AAC7C,uCAAuC,oEAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iEAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+DAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS,GAAG,kCAAkC,IAAI,YAAY;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA,YAAY,sDAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,YAAY,sDAAW;AACvB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA,4CAA4C,oDAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iEAAW;AAC/C;AACA;AACA;AACA;AACA;AACA,uCAAuC,6DAAY;AACnD,yCAAyC,6DAAY;AACrD;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA;AACA,aAAa,sDAAO;AACpB;AACA;AACA;AACA,QAAQ,yDAAU,CAAC,4DAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA;AACA,aAAa,sDAAO;AACpB;AACA;AACA,QAAQ,yDAAU,CAAC,4DAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oEAAO;AAC/C,yCAAyC,oEAAO;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,4DAAa;AACS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,wC;;;;;;;;;;;;ACpwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACwD;AACH;AACJ;AACkB;AACX;AACV;AACF;AACQ;AACA;AACL;AACC;AACE;AACQ;AACP;AACA;AACJ;AACE;AACL;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,0DAAgB;AACY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6DAAY;AACzC;AACA,kCAAkC,6DAAY;AAC9C;AACA,sCAAsC,kEAAkB,8BAA8B,gCAAgC,EAAE;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,yDAAS;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oEAAiB;AACpC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,qCAAqC,yDAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uDAAQ;AACjD,8FAA8F;AAC9F,uFAAuF;AACvF;AACA,8CAA8C,+DAAY;AAC1D;AACA;AACA,2FAA2F;AAC3F,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA,qCAAqC,yDAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uDAAQ;AACjD,8FAA8F;AAC9F,uFAAuF;AACvF;AACA,8CAA8C,+DAAY;AAC1D;AACA;AACA,2FAA2F;AAC3F,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yDAAS;AAC9C,yCAAyC,uDAAQ;AACjD;AACA;AACA,yCAAyC,+DAAY;AACrD;AACA;AACA;AACA;AACA;AACA,qCAAqC,yDAAS;AAC9C,yCAAyC,uDAAQ;AACjD;AACA;AACA,yCAAyC,+DAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAU;AACtB;AACA,aAAa;AACb,YAAY,0DAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,QAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,SAAS;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAW;AACnB,gBAAgB,0DAAc;AAC9B,wCAAwC,QAAQ;AAChD;AACA;AACA,4BAA4B,0DAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kEAAsB,8BAA8B,6DAAgB;AAChF;AACA;AACA,YAAY,kEAAsB,gBAAgB,6DAAgB;AAClE;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,+BAA+B,cAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uDAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA,qGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,+CAA+C,EAAE;AACvF,sCAAsC,uCAAuC,EAAE;AAC/E;AACA;AACA,sCAAsC,+CAA+C,EAAE;AACvF,sCAAsC,uCAAuC,EAAE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wDAAY;AACpB;AACA,gBAAgB,0DAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mFAAmF;AACpsCAAsC,yDAAI;AAC1C;AACA,mCAAmC;AACnC,QAAQ,kEAAsB,aAAa,6DAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA,0CAA0C,mEAAS;AACnD,uCAAuC;AACvC,YAAY,kEAAsB,aAAa,6DAAgB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAkB;AAC1B,mCAAmC,wDAAM;AACzC;AACA;AACA;AACA,kCAAkC,yDAAS;AAC3C;AACA,gBAAgB,0DAAU;AAC1B,yCAAyC,2DAAK;AAC9C;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0DAAc;AACnC;AACA;AACA,qBAAqB,0DAAc;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,kDAAQ;AACY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wDAAQ;AACR,wDAAQ;AACR,sC;;;;;;;;;;;;AC3tBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACiD;AACY;AACd;AACI;AACA;AACJ;AACc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,+BAA+B;AACxC,SAAS,iCAAiC;AAC1C;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mDAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,mDAAM;AACnD;AACA;AACA,4BAA4B,+DAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2DAAY,EAAE,6CAA6C,IAAI,2DAAY,kBAAkB,iEAAkB;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E;AAC9E,4BAA4B,2DAAY,uBAAuB,iEAAkB;AACjF,4BAA4B,2DAAY;AACxC,4BAA4B,8DAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAsB,iCAAiC,6DAAgB;AAC/E;AACA;AACA;AACA,QAAQ,iEAAsB,iCAAiC,6DAAgB;AAC/E;AACA;AACA;AACA;AACA,CAAC,CAAC,yDAAS;AACkB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,6C;;;;;;;;;;;;AC5HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACmF;AAC9B;AACb;AACO;AACI;AACA;AACJ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,4EAAyB;AACG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mDAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAsB,eAAe,6DAAgB;AAC7D,QAAQ,iEAAsB,gCAAgC,6DAAgB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mDAAI;AACvB;AACA;AACA,CAAC,CAAC,oEAAiB;AACG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,sC;;;;;;;;;;;;AC9OA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACkD;AACP;AACO;AACH;AACP;AAC2B;AAClB;AACI;AACN;AACI;AACJ;AACA;AACM;AAC6B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACbyCAAyC,8DAAQ;AACjD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8DAAQ;AACjD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8DAAQ;AACjD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,sDAAc;AACiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,2BAA2B;AACpC,SAAS,6BAA6B;AACtC;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6DAAQ;AACnC;AACA;AACA;AACA,gDAAgD,yDAAS;AACzD;AACA;AACA;AACA,+CAA+C,yDAAS;AACxD;AACA;AACA;AACA;AACA,gDAAgD,yDAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,wDAAY;AACpD;AACA,iCAAiC,SAAS,GAAG,kCAAkC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mDAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mDAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0DAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,iBAAiB,gEAAgE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,6DAAY;AAC/C,yCAAyC,6DAAY;AACrD;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,iBAAiB,gEAAgE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6DAAY;AAC9C,yCAAyC,6DAAY;AACrD;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,iBAAiB,gEAAgE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,6DAAY;AAC/C,yCAAyC,6DAAY;AACrD;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS,GAAG,kCAAkC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA,wBAAwB,0DAAc;AACtC;AACA;AACA,gDAAgD,uDAAK;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8CAAM;AACiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,oEAAY;AACZ,cAAc,6EAAqB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,yC;;;;;;;;;;;;ACv3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACuE;AAC5B;AACI;AACA;AACA;AACI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,oEAAqB;AACmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oCAAoC;AAC7C,SAAS,sCAAsC;AAC/C,SAAS,iEAAiE;AAC1E;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mEAAO;AAChC,4BAA4B,mEAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,mDAAM;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,oBAAoB,oDAAS;AAC7B;AACA,sBAAsB;AACtB;AACA,gBAAgB,oDAAS;AACzB;AACA;AACA,uBAAuB,oDAAS;AAChC,wBAAwB,oDAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,4DAAa;AACmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,kD;;;;;;;;;;;;AC7XA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACuE;AACrB;AAClD,UAAU,UAAU;AAC0C;AAChB;AACC;AACA;AACA;AACa;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,oEAAqB;AACM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mEAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0DAAK;AACxB;AACA;AACA;AACA;AACA;AACA,mBAAmB,yDAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,mBAAmB,yEAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS,GAAG,kCAAkC,IAAI,YAAY;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAgB;AACxC;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAc;AAC9B;AACA;AACA,+CAA+C,2DAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,yBAAyB,yDAAc;AACvgBAAgB,yDAAc;AAC9B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,+DAAoB;AACpE,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAc;AAC9B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA,8CAA8C,oDAAS;AACvD,+CAA+C,oDAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2DAAgB;AACvC;AACA,mBAAmB,2DAAgB;AACnC,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,4DAAa;AACM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,qC;;;;;;;;;;;;ACzfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACkC;AACiC;AACV;AACV;AACA;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,mEAAiB;AACY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,yBAAyB;AAClC,SAAS,2BAA2B;AACpC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iEAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,2DAAS;AACY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,uC;;;;;;;;;;;;ACvMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACoE;AACrB;AACA;AACE;AACE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,kEAAoB;AACW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,2BAA2B;AACpC,SAAS,6BAA6B;AACtC,SAAS,iEAAiE;AAC1E;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mEAAO;AAChC,4BAA4B,mEAAO;AACnC,8BAA8B,mEAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,8BAA8B,iEAAsB;AACpD,6BAA6B,iEAAsB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iEAAsB;AACjD,iBAAiB,yDAAc;AAC/B;AACA;AACA,8BAA8B,iEAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iEAAsB;AACjD,iBAAiB,yDAAc;AAC/B;AACA;AACA,8BAA8B,iEAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,0DAAY;AACW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,yC;;;;;;;;;;;;ACtZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AAC4E;AACvB;AACD;AACE;AACP;AACI;AACJ;AACI;AACA;AACA;AACF;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,yEAAoB;AACe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,+BAA+B;AACxC,SAAS,iCAAiC;AAC1C;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iEAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAU;AACtB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAsB,oBAAoB,6DAAgB,EAAE;AACxE,YAAY,iEAAsB,qCAAqC,6DAAgB,EAAE;AACzF;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,6BAA6B,2DAAO;AACpC;AACA;AACA,qBAAqB,sDAAW;AAChC;AACA;AACA;AACA,mCAAmC,+DAAY,4BAA4B,+DAAY;AACvF,sBAAsB,4DAAiB,EAAE,uGAAuG;AAChJ,sBAAsB,4DAAiB,EAAE,+GAA+G;AACxJ;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAiB,EAAE,yJAAyJ;AAClM,sBAAsB,4DAAiB,EAAE,yKAAyK;AAClN;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAiB,EAAE,+HAA+H;AACxK,sBAAsB,4DAAiB,EAAE,mIAAmI;AAC5K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2DAAgB;AACjC,iBAAiB,2DAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAU;AACtB;AACA;AACA;AACA,oBAAoB,sEAA2B,sCAAsC,6DAAgB;AACrG,oBAAoB,iEAAsB,kCAAkC,6DAAgB,EAAE;AAC9F;AACA,wBAAwB,yDAAa;AACrC;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4DAAiB,EAAE,aAAa;AACrD;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa,oDAAS,qBAAqB,oDAAS;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,iEAAY;AACe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,6C;;;;;;;;;;;;AC9RA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AAC8D;AACf;AACA;AACI;AACnD,UAAU,uBAAuB;AACjC,UAAU,SAAS;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8DAAkB;AACW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,yBAAyB;AAClC,SAAS,2BAA2B;AACpC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4DAAiB,EAAE,aAAa;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,aAAa,oDAAS,qBAAqB,oDAAS;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,sDAAU;AACW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,uC;;;;;;;;;;;;ACtOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AAC8D;AACE;AACjB;AACA;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8DAAkB;AACc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,4BAA4B;AACrC,SAAS,8BAA8B;AACvC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,2DAAgB,sBAAsB;AACnD,aAAa,2DAAgB,sBAAsB;AACnD,aAAa,2DAAgB,sBAAsB;AACnD,aAAa,2DAAgB,sBAAsB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wBAAwB;AAC7D;AACA;AACA,qCAAqC,wBAAwB;AAC7D;AACA;AACA;AACA;AACA,qCAAqC,wBAAwB;AAC7D;AACA;AACA,qCAAqC,wBAAwB;AAC7D;AACA;AACA;AACA;AACA,sBAAsB;AACtB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4EAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,sDAAU;AACc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,0C;;;;;;;;;;;;ACvOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACwD;AACT;AACI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mCAAmC;AAC5C,SAAS,qCAAqC;AAC9C;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2DAAY;AACvC;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA,oCAAoC,2DAAY;AAChD;AACA;AACA,oCAAoC,2DAAY;AAChD;AACA;AACA;AACA;AACA,8EAA8E;AAC9E,2BAA2B,2DAAY,cAAc,6DAAc;AACnE,4BAA4B,2DAAY,mBAAmB,6DAAc;AACzE,4BAA4B,2DAAY;AACxC,4BAA4B,8DAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2DAAY,cAAc,6DAAc;AACnE;AACA,8EAA8E;AAC9E,4BAA4B,2DAAY,mBAAmB,6DAAc;AACzE,4BAA4B,2DAAY;AACxC,4BAA4B,8DAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,oEAAiB;AACc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,iD;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACoE;AACf;AACN;AACwB;AACxB;AACyB;AACrB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACbkEAAoB;AACW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,2BAA2B;AACpC,SAAS,6BAA6B;AACtC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,WAAW,EAAE,KAAK,GAAG,MAAM,EAAE;AAC5E;AACA,kCAAkC,+EAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yDAAc,wBAAwB,yDAAc;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gFAAgB;AACxD;AACA,QAAQ,iEAAsB,eAAe,6DAAgB;AAC7D;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,0DAAY;AACW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,yC;;;;;;;;;;;;AC7TA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAC4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACkD;AACW;AACf;AACW;AACQ;AACtB;AACS;AACR;AACG;AACI;AACJ;AACE;AACF;AACA;AACE;AACE;AACA;AACN;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,aAAa,0DAAc;AAC3B;AACA;AACA,QAAQ,uDAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAc;AAC9C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,aAAa,0DAAc;AAC3B;AACA;AACA,QAAQ,uDAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAc;AAC9C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC,CAAC,sDAAc;AACY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,sBAAsB;AAC/B,SAAS,wBAAwB;AACjC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2FAA2F;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA,2BAA2B,yEAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mDAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sBAAsB,6DAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAc,oCAAoC,0DAAc;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,6DAAiB;AACxD;AACA;AACA,uCAAuC,6DAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+DAAY,uBAAuB,+DAAY;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yDAAS;AACrC,gBAAgB,0DAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAU;AACtB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gEAAgB;AACnC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qDAAS;AACnC,0BAA0B,qDAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,iEAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sDAAO;AAC7C;AACA;AACA,sDAAsD,iEAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uDAAQ;AAC7C;AACA;AACA,qCAAqC,uDAAQ;AAC7C;AACA;AACA,qCAAqC,+DAAY;AACjD;AACA;AACA,qCAAqC,+DAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,iCAAiC,uDAAQ;AACzC;AACA;AACA;AACA;AACA,iCAAiC,uDAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA;AACA,mBAAmB,qDAAS;AAC5B,mBAAmB,qDAAS;AAC5B,mBAAmB,qDAAS;AAC5B,mBAAmB,qDAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,yDAAS;AAC3C;AACA;AACA,kCAAkC,yDAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA;AACA,uBAAuB,qDAAS;AAChC,uBAAuB,qDAAS;AAChC,uBAAuB,qDAAS;AAChC,uBAAuB,qDAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,yDAAS;AAC3C;AACA;AACA,kCAAkC,yDAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yDAAS,uBAAuB,uDAAQ;AAC7E;AACA,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA;AACA,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA;AACA,qCAAqC,yDAAS,uBAAuB,uDAAQ;AAC7E;AACA,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA;AACA,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0DAAc,6BAA6B,0DAAc;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,kDAAkD,sDAAQ,mCAAmC,UAAU;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,QAAQ,gBAAgB;AACvE;AACA;AACA;AACA;AACA,6CAA6C,0BAA0B;AACvE;AACA;AACA;AACA,uCAAuC,mEAAuB,EAAE,uCAAuC;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sDAAQ,oDAAoD,UAAU;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA,mCAAmC,yDAAS,4DAA4D,yDAAS;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA,8BAA8B,yDAAS,uDAAuD,yDAAS;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uDAAQ;AAC7C,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,uDAAW;AAC/C,qCAAqC,qDAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,yDAAS;AACnD,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,+DAAY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA;AACA,qCAAqC,uDAAQ;AAC7C,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,uDAAW;AAC/C,qCAAqC,qDAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,yDAAS;AACnD,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,+DAAY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,yDAAS;AAC5E;AACA;AACA,mEAAmE,yDAAS;AAC5E;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,yDAAS;AAC3C;AACA;AACA,kCAAkC,yDAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAc;AAC1B;AACA;AACA,aAAa,sDAAO;AACpB;AACA;AACA;AACA,QAAQ,0DAAU,CAAC,6DAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yDAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yDAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAc;AAC1B;AACA;AACA,aAAa,sDAAO;AACpB;AACA;AACA;AACA;AACA,QAAQ,0DAAU,CAAC,6DAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,yDAAS;AACpE;AACA;AACA,2DAA2D,yDAAS;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kEAAkB;AAC9B;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAc,qBAAqB,0DAAc;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAc,kBAAkB,0DAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAc,kBAAkB,0DAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAc,uBAAuB,yDAAa;AAClE,+DAA+D,SAAS;AACxE;AACA,yBAAyB,0DAAc;AACvC;AACA;AACA,wBAAwB,0DAAc,gBAAgB,0DAAc;AACpE;AACA;AACA,6BAA6B,0DAAc,qBAAqB,0DAAc;AAC9E;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAc,wBAAwB,0DAAc;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAgB,+BAA+B;AAC/D,gBAAgB,4DAAgB,+BAA+B;AAC/D,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wDAAY;AACpB,sBAAsB,YAAY;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iEAAqB,uBAAuB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8CAAM;AACY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,oC;;;;;;;;;;;;ACx0EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACiE;AACd;AACF;AACF;AACG;AACA;AACC;AACJ;AACA;AACE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,gEAAmB;AACW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,0BAA0B;AACnC,SAAS,4BAA4B;AACrC,SAAS,kEAAkE;AAC3E;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAO;AAC9B;AACA;AACA,8DAA8D,yDAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2DAAgB;AACnC,yBAAyB;AACzB,eAAe,mEAAwB;AACvC;AACA,aAAa,yDAAc;AAC3B;AACA;AACA,qBAAqB,wEAA4B;AACjD,+BAA+B,wEAA4B;AAC3D;AACA;AACA;AACA,QAAQ,yDAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,yDAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,SAAS;AACT,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uBAAuB,6DAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAS;AAChC;AACA;AACA;AACA;AACA,CAAC,CAAC,wDAAW;AACW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,wC;;;;;;;;;;;;AC/UA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACgD;AACmB;AACkB;AACpC;AACF;AACe;AACA;AAC6B;AACtC;AACG;AACL;AACJ;AACI;AACF;AACI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,kEAAO;AAC7C,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8DAAQ;AACjD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,oDAAa;AACgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,yBAAyB;AAClC,SAAS,2BAA2B;AACpC;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6DAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,yDAAS;AACvE;AACA;AACA;AACA;AACA,8DAA8D,yDAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,mGAAsB;AAC/D;AACA;AACA;AACA;AACA,uCAAuC,mGAAsB;AAC7D;AACA;AACA;AACA;AACA,gBAAgB,0DAAc;AAC9B;AACA;AACA,oCAAoC,0DAAc;AAClD;AACA;AACA,qCAAqC,0DAAc;AACnD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA,qCAAqC,wDAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAU,yCAAyC,QAAQ,0DAAc,CAAC,yDAAa,0BAA0B,EAAE;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA,gBAAgB,0DAAc;AAC9B;AACA;AACA,SAAS;AACT,QAAQ,0DAAU;AAClB;AACA,gBAAgB,0DAAc;AAC9B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kCAAkC,yEAAkB;AACpD,yCAAyC,yEAAkB;AAC3D;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uBAAuB,yEAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,kCAAkC,6DAAY;AAC9C,yCAAyC,6DAAY;AACrD;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uBAAuB,yEAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,4CAAK;AACgB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uC;;;;;;;;;;;;ACngBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AAC8D;AACK;AACjB;AACH;AACA;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8DAAkB;AACU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC,SAAS,gEAAgE;AACzE;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6DAAY,KAAK,6DAAS;AACpD;AACA,kCAAkC,6DAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,sDAAU;AACU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,sC;;;;;;;;;;;;ACpIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACiE;AACT;AACT;AACI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,gEAAmB;AACW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,0BAA0B;AACnC,SAAS,4BAA4B;AACrC,SAAS,8DAA8D;AACvE,SAAS,iEAAiE;AAC1E;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAU;AACtB;AACA,oBAAoB,yDAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD,iDAAiD,kCAAkC;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,CAAC,CAAC,wDAAW;AACW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,wC;;;;;;;;;;;;ACrJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACoE;AACR;AACZ;AACD;AACI;AACF;AACF;AACA;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,kEAAoB;AACM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,IAAI;AACJ;AACA;AACA,SAAS,sBAAsB;AAC/B,SAAS,wBAAwB;AACjC,SAAS,8DAA8D;AACvE;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2DAAgB;AACnC,yBAAyB;AACzB;AACA,mCAAmC,2DAAO;AAC1C,wBAAwB,2DAAgB;AACxC;AACA;AACA,eAAe,mEAAwB;AACvC;AACA,aAAa,yDAAc;AAC3B;AACA;AACA,0BAA0B,uEAA4B;AACtD,oCAAoC,uEAA4B;AAChE;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAU,CAAC,4DAAa;AACpC;AACA;AACA,qDAAqD,uEAA4B;AACjF,0DAA0D,uEAA4B;AACtF,qBAAqB,yDAAc;AACnC;AACA;AACA,qBAAqB,yDAAc;AACnC;AACA;AACA;AACA;AACA,aAAa;AACb,gDAAgD;AAChmBAAmB,2DAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC,CAAC,0DAAY;AACM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,oC;;;;;;;;;;;;ACrbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACwD;AACJ;AACL;AACA;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,0DAAgB;AACY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,IAAI;AACJ;AACA;AACA,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC,SAAS,8DAA8D;AACvE;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2DAAgB;AACpC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+DAAW;AAC9B;AACA;AACA,CAAC,CAAC,kDAAQ;AACY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,sC;;;;;;;;;;;;AChNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACqD;AACO;AACR;AACH;AACG;AACL;AACqB;AACJ;AACf;AACE;AACJ;AACA;AACI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,wDAAe;AACa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC,SAAS,0BAA0B;AACnC,SAAS,gEAAgE;AACzE;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+EAAoB;AACnD;AACA;AACA;AACA,+BAA+B,2EAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAO;AAC9B;AACA,6DAA6D,yDAAS;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF,uDAAuD,4DAAM;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAc,oBAAoB,0DAAc;AAChE;AACA;AACA;AACA,gBAAgB,0DAAc,mBAAmB,yDAAa;AAC9D,2DAA2D,SAAS;AACpE;AACA;AACA;AACA;AACA;AACA,0DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA,0DAA0D,SAAS;AACnE;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4DAAgB;AACnC,yBAAyB;AACzB;AACA;AACA;AACA,mCAAmC,2DAAO;AAC1C;AACA;AACA;AACA;AACA,wBAAwB,4DAAgB;AACxC;AACA,0BAA0B,mEAAO;AACjC;AACA;AACA,eAAe,oEAAwB;AACvC;AACA,uBAAuB,uEAA4B;AACnD;AACA;AACA;AACA,iCAAiC,uEAA4B;AAC7D,gCAAgC,yDAAS;AACzC,QAAQ,0DAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ,0DAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+DAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,gDAAO;AACa;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,sC;;;;;;;;;;;;AC9ZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACiE;AACd;AACJ;AACK;AACA;AACG;AACJ;AACJ;AACA;AACI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,gEAAmB;AACY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,2BAA2B;AACpC,SAAS,6BAA6B;AACtC,SAAS,mEAAmE;AAC5E;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mEAAO;AAC5C,sCAAsC,mEAAO;AAC7C,qCAAqC,mEAAO;AAC5C,sCAAsC,mEAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gCAAgC,oDAAS;AACzC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAU;AAClB;AACA,oBAAoB,yDAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,oCAAoC,sDAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAU;AAClB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAc;AAC9B;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAc;AAC9B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wDAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,yDAAc;AAC1D;AACA;AACA,8BAA8B,yDAAc;AAC5C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,+DAAS,QAAQ,mEAAmE;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAU;AACtB;AACA,aAAa;AACb,YAAY,yDAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,2DAAY;AACnG;AACA;AACA;AACA,+BAA+B,sCAAsC,GAAG,4BAA4B;AACpG,gBAAgB,yDAAU;AAC1B;AACA;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,yDAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mEAAmE;AAC7F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uBAAuB,+DAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+DAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,wDAAW;AACY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,yC;;;;;;;;;;;;ACrdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACoE;AACrB;AACA;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,kEAAoB;AACS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,yBAAyB;AAClC,SAAS,2BAA2B;AACpC,SAAS,iEAAiE;AAC1E;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,0DAAY;AACS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,uDAAQ;AACR,uC;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACqD;AACN;AACsC;AACvC;AACU;AACH;AACW;AACb;AACJ;AACE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAU;AAC1B;AACA,wBAAwB,yDAAc;AACtC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,yBAAyB;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,CAAC,CAAC,wDAAe;AACU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAChC,SAAS,4DAA4D;AACrE;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kFAAkF;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6DAAQ;AACnC;AACA;AACA,yCAAyC,yDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mEAAa;AACxC,oCAAoC,yEAAkB;AACtD;AACA,kCAAkC,yEAAkB;AACpD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA,QAAQ,yDAAU;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAW;AACnB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8BAA8B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA,aAAa;AACb;AACA,0DAA0D,wEAAgB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAc,+BAA+B,yDAAc;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAc,2BAA2B,yDAAc;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAU;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+BAA+B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmaAAa;AACb;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yDAAc;AAClC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC,CAAC,gDAAO;AACU;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,mC;;;;;;;;;;;;ACz0CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACiE;AAChB;AACU;AACZ;AACD;AACF;AACU;AACA;AACF;AACN;AACO;AACa;AACf;AACJ;AACiB;AACjB;AACI;AACJ;AACE;AACA;AACE;AAC+B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,gEAAmB;AACM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,KAAK;AACL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,IAAI;AACJ;AACA;AACA;AACA,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAChC,SAAS,6DAA6D;AACtE;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iEAAa;AAC5C;AACA;AACA;AACA,+BAA+B,iEAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,yDAAS;AAC9D;AACA;AACA,4BAA4B,oEAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,yDAAS;AACnE;AACA;AACA,iCAAiC,oEAAO;AACxC,kCAAkC,oEAAO;AACzC;AACA;AACA;AACA,wDAAwD,yDAAS;AACjE;AACA,+BAA+B,oEAAO;AACtC;AACA;AACA;AACA;AACA,wDAAwD,yDAAS;AACjE;AACA;AACA,8BAA8B,oEAAO;AACrC;AACA;AACA;AACA;AACA;AACA,oDAAoD,yDAAS;AAC7D;AACA,0BAA0B,oEAAO;AACjC,yBAAyB,oEAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,yDAAS;AAClE;AACA;AACA,+BAA+B,oEAAO;AACtC;AACA;AACA;AACA;AACA;AACA,iDAAiD,2EAAa;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,yDAAS;AAC5E;AACA,qCAAqC,oEAAO;AAC5C,sCAAsC,oEAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAU;AACtB;AACA,aAAa;AACb,YAAY,0DAAU;AACtB;AACA,aAAa;AACb,YAAY,0DAAU;AACtB;AACA,aAAa;AACbkEAAkB;AAC9B;AACA;AACA;AACA,4BAA4B,uDAAW;AACvC;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAW,uBAAuB,uDAAW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,kEAAkB;AAC9B;AACA;AACA;AACA,4BAA4B,uDAAW;AACvC;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAW,uBAAuB,uDAAW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yDAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0DAAc;AACnC;AACA;AACA,qBAAqB,0DAAc;AACnC;AACA;AACA;AACA,SAAS;AACT,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8DAAQ;AACrC;AACA,SAAS;AACT;AACA;AACA,wBAAwB,sEAA0B,EAAE,aAAa;AACjE,yCAAyC,iEAAa;AACtD;AACA;AACA,yCAAyC,iEAAa;AACtD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAW;AACvB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qDAAI;AACtC;AACA;AACA,yCAAyC,6DAAY;AACrD;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qDAAI;AACtC;AACA;AACA,yCAAyC,6DAAY;AACrD;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAQ;AACxB;AACA;AACA,YAAY,uDAAW,eAAe;AACtC,YAAY,uDAAW,eAAe;AACtC;AACA;AACA;AACA,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA,wBAAwB,0DAAc;AACtC;AACA;AACA,iDAAiD,uDAAK;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,4CAA4C,0DAAQ;AACpD;AACA;AACA;AACA,gBAAgB,uDAAW;AAC3B;AACA;AACA,yCAAyC,yDAAS,uBAAuB,uDAAQ,sBAAsB,yDAAS,uBAAuB,uDAAQ;AAC/I;AACA;AACA,yBAAyB;AACzB,wBAAwB,uDAAW;AACnC,wBAAwB,uDAAW;AACnC;AACA;AACA;AACA,4BAA4B,uDAAW;AACvC;AACA;AACA;AACA,4BAA4B,uDAAW;AACvC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yDAAS,KAAK,0DAAc;AACjE;AACA;AACA,qCAAqC,yDAAS,KAAK,0DAAc;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,6DAA6D;AAC7D,yCAAyC,uDAAQ,0DAA0D,uDAAQ;AACnH;AACA;AACA;AACA;AACA;AACA,6CAA6C,kEAAsB,EAAE,iEAAiE;AACtI,uCAAuC,+BAA+B;AACtE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAc;AAC1C,oCAAoC,mEAAuB,EAAE,2CAA2C;AACxG;AACA;AACA;AACA,gBAAgB,uDAAW;AAC3B;AACA;AACA;AACA,qCAAqC;AACrC,gDAAgD,6DAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oBAAoB,uDAAW;AAC/B,qCAAqC,6DAAiB;AACtD,oDAAoD,uDAAuD;AAC3G;AACA;AACA;AACA;AACA,gCAAgC,uDAAW;AAC3C;AACA,2DAA2D;AAC3D,iCAAiC;AACjC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,4BAA4B,uDAAW;AACvC;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,8CAA8C,iDAAiD;AAC/F;AACA;AACA;AACA;AACA,4BAA4B,mEAAuB,EAAE,mBAAmB;AACxE,gCAAgC,mEAAuB,EAAE,kFAAkF;AAC3I;AACA;AACA,YAAY,uDAAW;AACvB;AACA,6BAA6B,+DAAmB,SAAS,8GAA8G;AACvK,iDAAiD,2CAA2C;AAC5F;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,QAAQ,yDAAa,uBAAuB,EAAE;AACjG;AACA;AACA,mDAAmD,QAAQ,yDAAa,uBAAuB,EAAE;AACjG;AACA;AACA;AACA,uBAAuB,qEAAyB,EAAE,aAAa;AAC/D;AACA;AACA;AACA;AACA,gBAAgB,wEAA4B,EAAE,iBAAiB;AAC/D;AACA;AACA;AACA,yDAAyD,QAAQ;AACjE;AACA;AACA;AACA,2CAA2C,oEAAoE;AAC/G;AACA;AACA;AACA;AACA,qCAAqC,mEAAuB,EAAE,mFAAmF;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,SAAS;AACvE;AACA;AACA;AACA,2CAA2C,yDAAyD;AACpG;AACA;AACA;AACA;AACA,gCAAgC,mEAAuB,EAAE,qHAAqH;AAC9K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6DAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iEAAiE;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iEAAiE;AACxiBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,iCAAiC;AACjC;AACA,YAAY,0DAAU;AACtB;AACA,4BAA4B,6DAAiB;AAC7C;AACA;AACA;AACA;AACA,wCAAwC,+DAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6DAAiB;AACjD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qEAAyB;AAChD,wBAAwB,mEAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qEAAyB;AAChD,wBAAwB,mEAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iCAAiC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iCAAiC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iCAAiC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iCAAiC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+EAA+E;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+EAA+E;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAU;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAc,kBAAkB,yDAAa;AAC7D,0DAA0D,SAAS;AACnE;AACA;AACA;AACA,6BAA6B,0DAAc;AAC3C;AACA,qFAAqF,WAAW;AAChG;AACA,gCAAgC,0DAAc,gBAAgB,0DAAc;AAC5E;AACA;AACA,gCAAgC,0DAAc,mBAAmB,0DAAc;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,gBAAgB,0DAAc,kBAAkB,yDAAa;AAC7D,0DAA0D,SAAS;AACnE;AACA;AACA;AACA,6BAA6B,0DAAc;AAC3C;AACA,qFAAqF,WAAW;AAChG;AACA,gCAAgC,0DAAc,gBAAgB,0DAAc;AAC5E;AACA;AACA,gCAAgC,0DAAc,mBAAmB,0DAAc;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAc,mBAAmB,yDAAa;AAC9D,2DAA2D,SAAS;AACpE;AACA;AACA;AACA;AACA,gBAAgB,0DAAc,oBAAoB,0DAAc;AAChE;AACA;AACA;AACA,gBAAgB,0DAAc,wBAAwB,0DAAc;AACpE;AACA;AACA,gBAAgB,0DAAc,wBAAwB,0DAAc;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0DAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,mBAAmB;AACpE,iDAAiD,mBAAmB;AACpE,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,4EAAgB;AAChE;AACA;AACA;AACA,gDAAgD,4EAAgB;AAChE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4EAAgB;AACvD;AACA;AACA,uCAAuC,4EAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4EAAgB;AACvD;AACA;AACA,uCAAuC,4EAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,wDAAW;AACM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,wDAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,oEAAY;AACZ,cAAc,6EAAqB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,oEAAY;AACZ,cAAc,6EAAqB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,mC;;;;;;;;;;;;ACriEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACqD;AACJ;AACN;AACe;AACA;AACA;AACX;AACI;AACJ;AACA;AACI;AACF;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,wDAAe;AACY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC,SAAS,6DAA6D;AACtE;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qEAAe;AAC9C;AACA;AACA;AACA,+BAA+B,qEAAe;AAC9C;AACA;AACA;AACA;AACA;AACA,iEAAiE,yDAAS;AAC1E;AACA;AACA;AACA;AACA,wDAAwD,mDAAM;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oDAAS;AAC5B,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAS;AAC7B,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAU;AAClB,kCAAkC,qEAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,yDAAU;AAClB,kCAAkC,qEAAc;AAChD;AACA;AACA;AACA,wDAAwD,oDAAS;AACjE,yDAAyD,oDAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAc,mBAAmB,yDAAa;AAC9D,2DAA2D,SAAS;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4DAAY,EAAE,aAAa,IAAI,4DAAY,EAAE,eAAe,IAAI,4DAAY,EAAE,mBAAmB,IAAI,4DAAY,EAAE,uBAAuB,IAAI,4DAAY,EAAE,aAAa,IAAI,4DAAY,EAAE,aAAa,IAAI,4DAAY,EAAE,aAAa,IAAI,+DAAe;AAC7Q;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,gDAAO;AACY;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAQ;AACR,qC;;;;;;;;;;;;AChSA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACA;AACA;AACA;AAC8B;AACS;AACI;AACJ;AACA;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,4BAA4B;AACrC,SAAS,8BAA8B;AACvC;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0DAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAc;AAC1B,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,oBAAoB,sDAAY,OAAO,gEAAsB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;AAClB,qBAAqB,oEAA8B;AACnD,qBAAqB,oEAA8B;AACnD,gBAAgB,kCAAkC,oDAAc;AAChE;AACA;AACA,CAAC,CAAC,0CAAI;AACoqF;AACA;AACT;AACY;AACH;AACN;AACS;AACA;AACM;AACH;AACf;AACM;AAClF;AACA;AACA;AACgE;AACmB;AACf;AACpE;AACA;AACA;AAC0E;AACM;AACM;AACN;AAC2B;AACrB;AACM;AACM;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AAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAA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EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,CAAC;iBACT,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,CAAC;iBACT,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,CAAC;iBACT,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,CAAC;iBACT,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,CAAC;iBACT,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV;gBACC;oBACA,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE;iBACV,EAAE;oBACD,IAAI,EA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E,EAAE,CAAC,EAAE,CAAC,EAAE;gBACf,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE;gBAChB,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE;gBAClB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE;gBACjB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE;gBACjB,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;gBACd,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE;gBAClB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE;gBACjB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE;gBACjB,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE;gBAClB,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE;gBAChB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE;gBACjB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE;gBACjB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE;gBACjB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE;gBACjB,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE;gBAChB,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE;gBAClB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE;gBACjB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE;gBACjB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE;gBACf,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE;gBACf,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE;gBACjB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE;gBACjB,EAAE,CAAC,EAAE,EAAE,EAAE,C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zE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBAC1E,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;iBAEjF,EAAE;oBACC,IAAI,EAAE,MAAM;oBACZ,KAAK,EAAE,yBAAyB;oBAChC,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBAC5E,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBAC1E,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;wBACzE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;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","file":"views-charts-charts-module-es2015.js","sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nvar AxisFillCircular = /** @class */ (function (_super) {\r\n    __extends(AxisFillCircular, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Axis\r\n     */\r\n    function AxisFillCircular(axis) {\r\n        var _this = _super.call(this, axis) || this;\r\n        _this.className = \"AxisFillCircular\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.radius = percent(100);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the fill element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisFillCircular.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this.__disabled || this.disabled) {\r\n            return;\r\n        }\r\n        if (this.axis) {\r\n            var renderer = this.axis.renderer;\r\n            this.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n            this.path = this.fillPath;\r\n        }\r\n    };\r\n    Object.defineProperty(AxisFillCircular.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n         *\r\n         * @param value  Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisFillCircular.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisFillCircular.prototype, \"cornerRadius\", {\r\n        /**\r\n         * @return Corner radius (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cornerRadius\");\r\n        },\r\n        /**\r\n         * Corner radius for the fill. In pixels.\r\n         *\r\n         * @param value  Corner radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cornerRadius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return AxisFillCircular;\r\n}(AxisFill));\r\nexport { AxisFillCircular };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n//# sourceMappingURL=AxisFillCircular.js.map","/**\r\n * Axis Label module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nvar AxisLabelCircular = /** @class */ (function (_super) {\r\n    __extends(AxisLabelCircular, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function AxisLabelCircular() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         *\r\n         * @ignore\r\n         */\r\n        _this.fdx = 0;\r\n        /**\r\n         *\r\n         * @ignore\r\n         */\r\n        _this.fdy = 0;\r\n        _this.className = \"AxisLabelCircular\";\r\n        _this.padding(0, 0, 0, 0);\r\n        _this.location = 0.5;\r\n        _this.locationOnPath = 0.5;\r\n        _this.radius = 0;\r\n        _this.isMeasured = false;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(AxisLabelCircular.prototype, \"relativeRotation\", {\r\n        /**\r\n         * @return Rotation angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"relativeRotation\");\r\n        },\r\n        /**\r\n         * Relative rotation of the label.\r\n         *\r\n         * It is an angle to circle. In case 90, labels will be positioned like rays\r\n         * of light, if 0 - positioned along the circle.\r\n         *\r\n         * @param value Rotation angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"relativeRotation\", value, true);\r\n            if (!$type.hasValue(value)) {\r\n                this.rotation = undefined;\r\n                var dataItem = this.dataItem;\r\n                if (dataItem && dataItem.component) {\r\n                    dataItem.component.invalidateDataItems();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisLabelCircular.prototype, \"radius\", {\r\n        /**\r\n         * @return Distance (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Distance from axis circle to label in pixels or percent.\r\n         *\r\n         * @param value Distance (px or percent)\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisLabelCircular.prototype, \"bent\", {\r\n        /**\r\n         * @return Bent?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"bent\");\r\n        },\r\n        /**\r\n         * Specifies if label should be bent along the circle.\r\n         *\r\n         * IMPORTANT: Use this with caution, since it is quite CPU-greedy.\r\n         *\r\n         * @since 4.1.2\r\n         * @default false\r\n         * @param  value  Bent?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"bent\", value, true);\r\n            this.setPropertyValue(\"wrap\", false);\r\n            this.setPropertyValue(\"horizontalCenter\", \"none\");\r\n            this.setPropertyValue(\"verticalCenter\", \"none\");\r\n            if (value) {\r\n                this.setPropertyValue(\"dx\", 0);\r\n                this.setPropertyValue(\"dy\", 0);\r\n                this.setPropertyValue(\"x\", 0);\r\n                this.setPropertyValue(\"y\", 0);\r\n                this.setPropertyValue(\"rotation\", 0);\r\n                //this.setPropertyValue(\"relativeRotation\", undefined);\r\n                this.fdx = 0;\r\n                this.fdy = 0;\r\n                this.textAlign = \"middle\";\r\n            }\r\n            else {\r\n                if (this.textPathElement) {\r\n                    this.textPathElement.dispose();\r\n                    this.textPathElement = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns label radius in pixels.\r\n     *\r\n     * @param   axisRadius  Radius\r\n     * @return              Pixel radius\r\n     */\r\n    AxisLabelCircular.prototype.pixelRadius = function (axisRadius) {\r\n        var sign = 1;\r\n        if (this.inside) {\r\n            sign = -1;\r\n        }\r\n        return $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n    };\r\n    /**\r\n     * Returns label horizontal radius in pixels.\r\n     *\r\n     * @param   axisRadius   Radius\r\n     * @param   axisRadiusY  Vertical radius\r\n     * @return               Radius\r\n     */\r\n    AxisLabelCircular.prototype.pixelRadiusY = function (axisRadius, axisRadiusY) {\r\n        var sign = 1;\r\n        if (this.inside) {\r\n            sign = -1;\r\n        }\r\n        var radius = this.radius;\r\n        if ($type.isNumber(radius)) {\r\n            radius *= axisRadiusY / axisRadius;\r\n            return $utils.relativeToValue(radius, axisRadius) * sign;\r\n        }\r\n        else {\r\n            return $utils.relativeToValue(radius, axisRadiusY) * sign;\r\n        }\r\n    };\r\n    /**\r\n     * [fixPosition description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param point       Label affixation point\r\n     * @param axisRadius  Distance from point (px)\r\n     */\r\n    AxisLabelCircular.prototype.fixPosition = function (angle, axisRadius, axisRadiusY, dx, dy) {\r\n        if (!$type.isNumber(axisRadiusY)) {\r\n            axisRadiusY = axisRadius;\r\n        }\r\n        if (!$type.isNumber(dx)) {\r\n            dx = 0;\r\n        }\r\n        if (!$type.isNumber(dy)) {\r\n            dy = 0;\r\n        }\r\n        var point = { x: axisRadius * $math.cos(angle), y: axisRadiusY * $math.sin(angle) };\r\n        if (this.invalid) {\r\n            this.validate(); //@todo\" check if we need this\r\n        }\r\n        var isNegative = false;\r\n        var realRadius = this.radius;\r\n        if (realRadius instanceof Percent && realRadius.value < 0) {\r\n            isNegative = true;\r\n        }\r\n        else if (realRadius < 0) {\r\n            isNegative = true;\r\n        }\r\n        var relativeRotation = this.relativeRotation;\r\n        var labelRadius = this.pixelRadius(axisRadius);\r\n        if (this.bent) {\r\n            var point_1 = { x: (axisRadius + labelRadius) * $math.cos(angle + 180), y: (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle + 180) };\r\n            this.path = $path.moveTo(point_1) + $path.arcTo(angle + 180, 360, axisRadius + labelRadius, axisRadiusY + labelRadius * axisRadiusY / axisRadius);\r\n            if (this.textPathElement) {\r\n                this.textPathElement.attr({ \"startOffset\": (this.locationOnPath * 100) + \"%\" });\r\n            }\r\n            return;\r\n        }\r\n        // WHEN ROTATED\r\n        if ($type.isNumber(relativeRotation)) {\r\n            this.horizontalCenter = \"none\";\r\n            this.verticalCenter = \"none\";\r\n            angle = $math.fitAngleToRange(angle, -180, 180);\r\n            var pixelWidth = this.bbox.width;\r\n            var pixelHeight = this.bbox.height;\r\n            var pixelPaddingBottom = this.pixelPaddingBottom;\r\n            var pixelPaddingTop = this.pixelPaddingTop;\r\n            var pixelPaddingLeft = this.pixelPaddingLeft;\r\n            var pixelPaddingRight = this.pixelPaddingRight;\r\n            if (angle > 90 || angle < -90) {\r\n                if (relativeRotation == -90) {\r\n                    relativeRotation = 90;\r\n                    pixelWidth = 0;\r\n                }\r\n            }\r\n            else {\r\n                if (relativeRotation == -90) {\r\n                    pixelHeight = -pixelHeight;\r\n                }\r\n                if (relativeRotation == 90) {\r\n                    relativeRotation = -90;\r\n                    pixelWidth = -pixelPaddingLeft - pixelPaddingRight;\r\n                    pixelHeight = -pixelHeight - pixelPaddingTop - pixelPaddingBottom;\r\n                }\r\n            }\r\n            this.rotation = relativeRotation + angle + 90;\r\n            var dH = $math.sin(relativeRotation) / 2;\r\n            var dW = $math.cos(relativeRotation) / 2;\r\n            var rotation = this.rotation;\r\n            this.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n            this.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n            if (!this.inside) {\r\n                labelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n            }\r\n            else {\r\n                if (angle > 90 || angle < -90) {\r\n                    labelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n                }\r\n                else {\r\n                    labelRadius += (pixelPaddingBottom + this.bbox.height + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight + this.bbox.width) * $math.sin(relativeRotation);\r\n                }\r\n            }\r\n            point.x += $math.cos(angle) * labelRadius;\r\n            point.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n        }\r\n        else {\r\n            // END OF ROTATED\r\n            this.horizontalCenter = \"middle\";\r\n            this.verticalCenter = \"middle\";\r\n            if (isNegative) {\r\n                this.dx = 0;\r\n                this.dy = 0;\r\n                point.x = (axisRadius + labelRadius) * $math.cos(angle);\r\n                point.y = (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle);\r\n            }\r\n            else {\r\n                // we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n                // this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n                // @todo with this math doesn't work well with inside = true\r\n                this.dy = this._measuredHeight / 2 * $math.sin(angle); //(1 - (point.y + axisRadiusY) / (2 * axisRadiusY));\r\n                // simmilar with dx\r\n                this.dx = this._measuredWidth / 2 * $math.cos(angle); //(1 - (point.x + axisRadius) / (2 * axisRadius));\r\n                point.x += $math.cos(angle) * labelRadius;\r\n                point.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n            }\r\n        }\r\n        point.x += dx;\r\n        point.y += dy;\r\n        this.fdx = this.dx;\r\n        this.fdy = this.dy;\r\n        this.moveTo(point);\r\n    };\r\n    return AxisLabelCircular;\r\n}(AxisLabel));\r\nexport { AxisLabelCircular };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n//# sourceMappingURL=AxisLabelCircular.js.map","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nvar AxisRendererCircular = /** @class */ (function (_super) {\r\n    __extends(AxisRendererCircular, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Related axis\r\n     */\r\n    function AxisRendererCircular() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.pixelRadiusReal = 0;\r\n        // axis.layout = \"none\"; // does not trigger redraw when size changes\r\n        _this.layout = \"none\";\r\n        _this.className = \"AxisRendererCircular\";\r\n        _this.isMeasured = false;\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        _this.useChartAngles = true;\r\n        _this.radius = percent(100);\r\n        _this.isMeasured = false;\r\n        _this.grid.template.location = 0;\r\n        _this.labels.template.location = 0;\r\n        _this.labels.template.radius = 15;\r\n        _this.ticks.template.location = 0;\r\n        _this.ticks.template.pixelPerfect = false;\r\n        _this.tooltipLocation = 0;\r\n        _this.line.strokeOpacity = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n    * @ignore\r\n    */\r\n    AxisRendererCircular.prototype.setAxis = function (axis) {\r\n        var _this = this;\r\n        _super.prototype.setAxis.call(this, axis);\r\n        axis.isMeasured = false;\r\n        // modify x and y so that tooltip would always be on circle\r\n        var tooltip = axis.tooltip;\r\n        tooltip.adapter.add(\"dx\", function (x, target) {\r\n            var point = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, _this);\r\n            return _this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n        });\r\n        tooltip.adapter.add(\"dy\", function (y, target) {\r\n            var point = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, _this);\r\n            return _this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n        });\r\n    };\r\n    /**\r\n     * Validates Axis renderer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererCircular.prototype.validate = function () {\r\n        // so that radius would be updated\r\n        if (this.chart && this.chart.invalid) {\r\n            this.chart.validate();\r\n        }\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"axisLength\", {\r\n        /**\r\n         * Returns actual length of the Axis, in pixels.\r\n         *\r\n         * @return Length (px)\r\n         */\r\n        get: function () {\r\n            return 2 * Math.PI * this.pixelRadius;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the axis.\r\n         *\r\n         * Can be absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"pixelRadius\", {\r\n        /**\r\n         * Outer radius in pixels.\r\n         *\r\n         * @return Outer radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            var chart = this.chart;\r\n            var innerRadius = this.getPropertyValue(\"innerRadius\");\r\n            if (chart) {\r\n                if (!$type.hasValue(innerRadius)) {\r\n                    innerRadius = chart.innerRadius;\r\n                    if (innerRadius instanceof Percent && chart) {\r\n                        innerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100);\r\n                    }\r\n                }\r\n                else {\r\n                    if (innerRadius instanceof Percent && chart) {\r\n                        var mr = chart.mr;\r\n                        var value = innerRadius.value;\r\n                        value = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n                        innerRadius = percent(value * 100);\r\n                    }\r\n                }\r\n                return innerRadius;\r\n            }\r\n        },\r\n        /**\r\n         * Inner radius of the axis.\r\n         *\r\n         * Can be absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Inner radius\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"useChartAngles\", {\r\n        /**\r\n         * @return Use chart angles\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"useChartAngles\");\r\n        },\r\n        /**\r\n         * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n         * inherit them from relative properties from chart.\r\n         *\r\n         * @default false\r\n         * @param value  Use chart's angles\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"useChartAngles\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Inner radius in pixels.\r\n         *\r\n         * @return Inner radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position on axis to point coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @param position2  Position (0-1) Position on the second axis\r\n     * @return Point\r\n     */\r\n    AxisRendererCircular.prototype.positionToPoint = function (position, position2) {\r\n        if (!$type.isNumber(position2)) {\r\n            position2 = 1;\r\n        }\r\n        var coordinate = this.positionToCoordinate(position);\r\n        var angle = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n        var radius = this.pixelRadius;\r\n        var innerRadius = this.pixelInnerRadius;\r\n        if (this.axisRendererY) {\r\n            var realRadius = $math.fitToRange(this.axisRendererY.positionToCoordinate(position2), 0, Infinity);\r\n            var point = { x: realRadius * $math.cos(angle), y: realRadius * $math.sin(angle) };\r\n            return point;\r\n        }\r\n        return { x: $math.cos(angle) * innerRadius + (radius - innerRadius) * $math.cos(angle) * position2, y: $math.sin(angle) * innerRadius + (radius - innerRadius) * $math.sin(angle) * position2 };\r\n    };\r\n    /**\r\n     * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @return Angle (0-360)\r\n     */\r\n    AxisRendererCircular.prototype.positionToAngle = function (position) {\r\n        var axis = this.axis;\r\n        var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n        var angle;\r\n        if (axis.renderer.inversed) {\r\n            angle = this.startAngle + (axis.end - position) * arc;\r\n        }\r\n        else {\r\n            angle = this.startAngle + (position - axis.start) * arc;\r\n        }\r\n        return $math.round(angle, 3);\r\n    };\r\n    /**\r\n     * Converts angle on axis to relative position(0-1).\r\n     *\r\n     * @param angle Angle in degrees\r\n     * @return Position (0-1)\r\n     */\r\n    AxisRendererCircular.prototype.angleToPosition = function (angle) {\r\n        var axis = this.axis;\r\n        var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n        var position;\r\n        if (axis.renderer.inversed) {\r\n            position = axis.end - (angle - this.startAngle) / arc;\r\n        }\r\n        else {\r\n            position = (angle - this.startAngle) / arc + axis.start;\r\n        }\r\n        return $math.round(position, 5);\r\n    };\r\n    /**\r\n     * Updates and positions the axis line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererCircular.prototype.updateAxisLine = function () {\r\n        var radius = this.pixelRadius;\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        var arc = endAngle - startAngle;\r\n        this.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n    };\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param grid         Grid element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererCircular.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        if ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\r\n            var angle = $math.DEGREES * Math.atan2(point.y, point.x);\r\n            var radius = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n            var gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n            grid.zIndex = 0;\r\n            var innerRadius = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadiusReal, true);\r\n            grid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n        }\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param tick         Tick element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererCircular.prototype.updateTickElement = function (tick, position, endPosition) {\r\n        position = position + (endPosition - position) * tick.location;\r\n        var point = this.positionToPoint(position);\r\n        if (tick.element) {\r\n            var radius = this.pixelRadius;\r\n            var angle = $math.DEGREES * Math.atan2(point.y, point.x);\r\n            var tickLength = tick.length;\r\n            if (tick.inside) {\r\n                tickLength = -tickLength;\r\n            }\r\n            tick.zIndex = 1;\r\n            tick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n        }\r\n        this.toggleVisibility(tick, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions axis bullet.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param bullet       AxisBullet element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererCircular.prototype.updateBullet = function (bullet, position, endPosition) {\r\n        var location = 0.5;\r\n        if (bullet instanceof AxisBullet) {\r\n            location = bullet.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        var radius = this.pixelRadius;\r\n        var angle = $math.DEGREES * Math.atan2(point.y, point.x);\r\n        point = { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n        this.positionItem(bullet, point);\r\n        this.toggleVisibility(bullet, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a label element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param label        Label element\r\n     * @param position     Starting position\r\n     * @param endPosition  Ending position\r\n     */\r\n    AxisRendererCircular.prototype.updateLabelElement = function (label, position, endPosition, location) {\r\n        if (!$type.hasValue(location)) {\r\n            location = label.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        label.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n        label.zIndex = 2;\r\n        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n    };\r\n    /**\r\n     * Checks if point is within bounds of a container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param point Point coordinates\r\n     * @return Fits?\r\n     */\r\n    AxisRendererCircular.prototype.fitsToBounds = function (point) {\r\n        return true;\r\n    };\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Start angle of the axis in degrees (0-360).\r\n         *\r\n         * @param value  Start angle\r\n         */\r\n        set: function (value) {\r\n            // do not normalize angel here!\r\n            if (this.setPropertyValue(\"startAngle\", value)) {\r\n                this.invalidateAxisItems();\r\n                if (this.axis) {\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle of the axis in degrees (0-360).\r\n         *\r\n         * @param value  End angle\r\n         */\r\n        set: function (value) {\r\n            // do not normalize angel here!\r\n            if (this.setPropertyValue(\"endAngle\", value)) {\r\n                this.invalidateAxisItems();\r\n                if (this.axis) {\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param startPosition  Starting position\r\n     * @param endPosition    End position\r\n     * @return SVG path\r\n     */\r\n    AxisRendererCircular.prototype.getPositionRangePath = function (startPosition, endPosition, radius, innerRadius, cornerRadius) {\r\n        var path = \"\";\r\n        if ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n            if (!$type.hasValue(radius)) {\r\n                radius = this.radius;\r\n            }\r\n            startPosition = $math.max(startPosition, this.axis.start);\r\n            endPosition = $math.min(endPosition, this.axis.end);\r\n            if (endPosition < startPosition) {\r\n                endPosition = startPosition;\r\n            }\r\n            var pixelRadius = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n            var pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n            var startAngle = this.positionToAngle(startPosition);\r\n            var endAngle = this.positionToAngle(endPosition);\r\n            var arc = endAngle - startAngle;\r\n            path = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n        }\r\n        return path;\r\n    };\r\n    /**\r\n     * Returns a new grid element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return Grid element\r\n     */\r\n    AxisRendererCircular.prototype.createGrid = function () {\r\n        return new GridCircular();\r\n    };\r\n    /**\r\n     * Returns a new fill element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return Fill element\r\n     */\r\n    AxisRendererCircular.prototype.createFill = function (axis) {\r\n        return new AxisFillCircular(axis);\r\n    };\r\n    /**\r\n     * Returns a new label element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return Label element\r\n     */\r\n    AxisRendererCircular.prototype.createLabel = function () {\r\n        return new AxisLabelCircular();\r\n    };\r\n    /**\r\n     * Converts a point at specific coordinates to a relative position (0-1)\r\n     * on the axis.\r\n     *\r\n     * @param point  Point\r\n     * @return Position (0-1)\r\n     */\r\n    AxisRendererCircular.prototype.pointToPosition = function (point) {\r\n        var angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n        return this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n    };\r\n    return AxisRendererCircular;\r\n}(AxisRenderer));\r\nexport { AxisRendererCircular };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n//# sourceMappingURL=AxisRendererCircular.js.map","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nvar AxisRendererRadial = /** @class */ (function (_super) {\r\n    __extends(AxisRendererRadial, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Related axis\r\n     */\r\n    function AxisRendererRadial() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A related chart.\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.pixelRadiusReal = 0;\r\n        _this.className = \"AxisRendererRadial\";\r\n        _this.isMeasured = false;\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        _this.minGridDistance = 30;\r\n        _this.gridType = \"circles\";\r\n        _this.axisAngle = -90;\r\n        _this.isMeasured = false;\r\n        _this.layout = \"none\";\r\n        _this.radius = percent(100);\r\n        _this.line.strokeOpacity = 0;\r\n        _this.labels.template.horizontalCenter = \"middle\";\r\n        _this._disposers.push(_this._chart);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Validates Axis renderer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererRadial.prototype.validate = function () {\r\n        // so that radius would be updated\r\n        if (this.chart && this.chart.invalid) {\r\n            this.chart.validate();\r\n        }\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"axisLength\", {\r\n        /**\r\n         * Returns actual length of the Axis, in pixels.\r\n         *\r\n         * @return Length (px)\r\n         */\r\n        get: function () {\r\n            return this.pixelRadius - this.pixelInnerRadius;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the axis.\r\n         *\r\n         * Can be absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"pixelRadius\", {\r\n        /**\r\n         * Outer radius in pixels.\r\n         *\r\n         * @return Outer radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            var chart = this.chart;\r\n            var innerRadius = this.getPropertyValue(\"innerRadius\");\r\n            if (chart) {\r\n                if (!$type.hasValue(innerRadius)) {\r\n                    innerRadius = chart.innerRadius;\r\n                    if (innerRadius instanceof Percent && chart) {\r\n                        innerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100);\r\n                    }\r\n                }\r\n                else {\r\n                    if (innerRadius instanceof Percent && chart) {\r\n                        var mr = chart.mr;\r\n                        var value = innerRadius.value;\r\n                        value = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n                        innerRadius = percent(value * 100);\r\n                    }\r\n                }\r\n            }\r\n            return innerRadius;\r\n        },\r\n        /**\r\n         * Inner radius of the axis.\r\n         *\r\n         * Can be absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Inner radius in pixels.\r\n         *\r\n         * @return Inner radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position on axis to point coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @param position2  Position (0-1) Position on the second axis\r\n     * @return Point\r\n     */\r\n    AxisRendererRadial.prototype.positionToPoint = function (position, position2) {\r\n        var radius = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n        return { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n    };\r\n    /**\r\n     * Updates and positions the axis line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererRadial.prototype.updateAxisLine = function () {\r\n        this.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n        var title = this.axis.title;\r\n        title.valign = \"none\";\r\n        title.horizontalCenter = \"middle\";\r\n        title.verticalCenter = \"bottom\";\r\n        title.y = -this.axisLength / 2;\r\n        var rotation = 90;\r\n        if (this.opposite) {\r\n            if (!this.inside) {\r\n                rotation = -90;\r\n            }\r\n        }\r\n        else {\r\n            if (this.inside) {\r\n                rotation = -90;\r\n            }\r\n        }\r\n        title.rotation = rotation;\r\n    };\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param grid         Grid element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererRadial.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        var path;\r\n        var radius = $math.getDistance(point);\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        if ($type.isNumber(radius) && grid.element) {\r\n            var chart = this.chart;\r\n            var xAxis = chart.xAxes.getIndex(0);\r\n            var count = 0;\r\n            var series = chart.series.getIndex(0);\r\n            if (series) {\r\n                count = series.dataItems.length;\r\n            }\r\n            // polygons are only possible if x axis is present\r\n            // @todo: review this\r\n            if (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n                var gridLocation = xAxis.renderer.grid.template.location;\r\n                var angle = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n                path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n                for (var i = 1; i < count; i++) {\r\n                    angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n                    path += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n                }\r\n                angle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n                path += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n            }\r\n            else {\r\n                path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n            }\r\n            grid.path = path;\r\n        }\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a label element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param label        Label element\r\n     * @param position     Starting position\r\n     * @param endPosition  Ending position\r\n     */\r\n    AxisRendererRadial.prototype.updateLabelElement = function (label, position, endPosition, location) {\r\n        if (!$type.hasValue(location)) {\r\n            location = label.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        this.positionItem(label, point);\r\n        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererRadial.prototype.updateBaseGridElement = function () {\r\n        // @todo? zero grid for radar chart, is it needed?\r\n    };\r\n    /**\r\n     * Checks if point is within bounds of a container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param point Point coordinates\r\n     * @return Fits?\r\n     */\r\n    AxisRendererRadial.prototype.fitsToBounds = function (point) {\r\n        return true;\r\n    };\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Start angle of the axis in degrees. (0-360)\r\n         *\r\n         * @param value  Start angle\r\n         */\r\n        set: function (value) {\r\n            // do not normalize angle here!\r\n            if (this.setPropertyValue(\"startAngle\", value)) {\r\n                this.invalidateAxisItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle of the axis in degrees. (0-360)\r\n         *\r\n         * @param value  End angle\r\n         */\r\n        set: function (value) {\r\n            // do not normalize angel here!\r\n            if (this.setPropertyValue(\"endAngle\", value)) {\r\n                this.invalidateAxisItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"axisAngle\", {\r\n        /**\r\n         * @return Axis angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"axisAngle\");\r\n            //return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n        },\r\n        /**\r\n         * Angle of the radial axis in degrees. (0-360)\r\n         *\r\n         * @param value  Axis angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n            this.invalidateAxisItems();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"gridType\", {\r\n        /**\r\n         * Grid type\r\n         */\r\n        get: function () {\r\n            var axis = this.chart.xAxes.getIndex(0);\r\n            if (axis instanceof CategoryAxis) {\r\n                return this.getPropertyValue(\"gridType\");\r\n            }\r\n            else {\r\n                return \"circles\";\r\n            }\r\n        },\r\n        // polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n        /**\r\n         * Grid type for radial axis.\r\n         *\r\n         * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n         * straight lines (\"polygons\").\r\n         *\r\n         * @default \"circles\"\r\n         * @param value  Grid type\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"gridType\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param startPosition  Starting position\r\n     * @param endPosition    End position\r\n     * @return SVG path\r\n     */\r\n    AxisRendererRadial.prototype.getPositionRangePath = function (startPosition, endPosition) {\r\n        var pixelInnerRadius = this.pixelInnerRadius;\r\n        var pixelRadius = this.axisLength + pixelInnerRadius;\r\n        var innerRadius = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n        var radius = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n        //let angleCount: number = this.angleCount;\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        var arc = endAngle - startAngle;\r\n        var path;\r\n        var chart = this.chart;\r\n        var xAxis = chart.xAxes.getIndex(0);\r\n        var series = chart.series.getIndex(0);\r\n        var count = 0;\r\n        if (series) {\r\n            count = series.dataItems.length;\r\n        }\r\n        // polygons are only possible if x axis is present\r\n        // @todo: review this\r\n        if (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n            var gridLocation = xAxis.renderer.grid.template.location;\r\n            var angle = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n            path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n            for (var i = 1; i < count; i++) {\r\n                angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n                path += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n            }\r\n            angle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n            path += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n            path += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n            for (var i = count - 1; i >= 0; i--) {\r\n                angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n                path += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n            }\r\n        }\r\n        else {\r\n            path = $path.arc(startAngle, arc, radius, innerRadius);\r\n        }\r\n        return path;\r\n    };\r\n    /**\r\n     * Updates and positions an axis break element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axisBreak Break element\r\n     */\r\n    AxisRendererRadial.prototype.updateBreakElement = function (axisBreak) {\r\n        // @todo: someday we might need axis break when gridType is polygons\r\n        var startLine = axisBreak.startLine;\r\n        var endLine = axisBreak.endLine;\r\n        var fillShape = axisBreak.fillShape;\r\n        var startPoint = axisBreak.startPoint;\r\n        var endPoint = axisBreak.endPoint;\r\n        startLine.radius = Math.abs(startPoint.y);\r\n        endLine.radius = Math.abs(endPoint.y);\r\n        fillShape.radius = Math.abs(endPoint.y);\r\n        fillShape.innerRadius = Math.abs(startPoint.y);\r\n    };\r\n    /**\r\n     * Creates visual elements for and axis break.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axisBreak Axis break\r\n     */\r\n    AxisRendererRadial.prototype.createBreakSprites = function (axisBreak) {\r\n        axisBreak.startLine = new WavedCircle();\r\n        axisBreak.endLine = new WavedCircle();\r\n        axisBreak.fillShape = new WavedCircle();\r\n    };\r\n    /**\r\n     * Updates some of the Axis tooltip's visual properties, related to\r\n     * rendering of the Axis.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererRadial.prototype.updateTooltip = function () {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var bigNum = 4000;\r\n            var bbx = -4000;\r\n            var bby = -4000;\r\n            var bbw = bigNum * 2;\r\n            var bbh = bigNum * 2;\r\n            var axisAngle = this.axisAngle;\r\n            if (axisAngle < 0) {\r\n                axisAngle += 360;\r\n            }\r\n            var tooltipOrientation = \"vertical\";\r\n            if ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n                tooltipOrientation = \"horizontal\";\r\n            }\r\n            this.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n        }\r\n    };\r\n    /**\r\n     * Updates and positions a tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param tick      Tick element\r\n     * @param position  Position\r\n     */\r\n    AxisRendererRadial.prototype.updateTickElement = function (tick, position, endPosition) {\r\n        position = position + (endPosition - position) * tick.location;\r\n        var point = this.positionToPoint(position);\r\n        if (tick.element) {\r\n            var angle = $math.normalizeAngle(this.axisAngle + 90);\r\n            if (angle / 90 != Math.round(angle / 90)) {\r\n                tick.pixelPerfect = false;\r\n            }\r\n            else {\r\n                tick.pixelPerfect = true;\r\n            }\r\n            var tickLength = -tick.length;\r\n            if (tick.inside) {\r\n                tickLength *= -1;\r\n            }\r\n            tick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n        }\r\n        this.positionItem(tick, point);\r\n        this.toggleVisibility(tick, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions axis bullet.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param bullet       AxisBullet element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererRadial.prototype.updateBullet = function (bullet, position, endPosition) {\r\n        var location = 0.5;\r\n        if (bullet instanceof AxisBullet) {\r\n            location = bullet.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        this.positionItem(bullet, point);\r\n        this.toggleVisibility(bullet, position, 0, 1);\r\n    };\r\n    /**\r\n     * Converts a position on the axis to a coordinate in pixels.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position  Position (0-1)\r\n     * @return Coordinate (px)\r\n     */\r\n    AxisRendererRadial.prototype.positionToCoordinate = function (position) {\r\n        var coordinate;\r\n        var axis = this.axis;\r\n        var axisFullLength = axis.axisFullLength;\r\n        var innerRadius = this.pixelInnerRadius;\r\n        if (axis.renderer.inversed) {\r\n            coordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n        }\r\n        else {\r\n            coordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n        }\r\n        return $math.round(coordinate, 1);\r\n    };\r\n    /**\r\n     * Converts a point at specific coordinates to a relative position (0-1)\r\n     * on the axis.\r\n     *\r\n     * @param point  Point\r\n     * @return Position (0-1)\r\n     */\r\n    AxisRendererRadial.prototype.pointToPosition = function (point) {\r\n        var coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n        return this.coordinateToPosition(coordinate);\r\n    };\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"chart\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Chart\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * A chart, associated with the Axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Chart\r\n         */\r\n        set: function (value) {\r\n            this._chart.set(value, null);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return AxisRendererRadial;\r\n}(AxisRendererY));\r\nexport { AxisRendererRadial };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n//# sourceMappingURL=AxisRendererRadial.js.map","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nvar AxisRendererX3D = /** @class */ (function (_super) {\r\n    __extends(AxisRendererX3D, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Related axis\r\n     */\r\n    function AxisRendererX3D() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A related chart.\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        _this.className = \"AxisRendererX3D\";\r\n        _this._disposers.push(_this._chart);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param grid         Grid element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererX3D.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        if (grid.element) {\r\n            var dx = this.chart.dx3D || 0;\r\n            var dy = this.chart.dy3D || 0;\r\n            var h = this.getHeight();\r\n            grid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n        }\r\n        this.positionItem(grid, point);\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX3D.prototype.updateBaseGridElement = function () {\r\n        _super.prototype.updateBaseGridElement.call(this);\r\n        var h = this.getHeight();\r\n        var dx = this.chart.dx3D || 0;\r\n        var dy = this.chart.dy3D || 0;\r\n        this.baseGrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n    };\r\n    Object.defineProperty(AxisRendererX3D.prototype, \"chart\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Chart\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * Chart, associated with the Axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Chart\r\n         */\r\n        set: function (chart) {\r\n            if (chart) {\r\n                this._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Invoked when 3D-related settings change, like depth or angle.\r\n     *\r\n     * @param event Event\r\n     */\r\n    AxisRendererX3D.prototype.handle3DChanged = function (event) {\r\n        if (event.property == \"depth\" || event.property == \"angle\") {\r\n            this.invalidate();\r\n        }\r\n    };\r\n    return AxisRendererX3D;\r\n}(AxisRendererX));\r\nexport { AxisRendererX3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n//# sourceMappingURL=AxisRendererX3D.js.map","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nvar AxisRendererY3D = /** @class */ (function (_super) {\r\n    __extends(AxisRendererY3D, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Related axis\r\n     */\r\n    function AxisRendererY3D() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A related chart.\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        _this.className = \"AxisRendererY3D\";\r\n        _this._disposers.push(_this._chart);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param grid         Grid element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererY3D.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        if (grid.element) {\r\n            var dx = this.chart.dx3D || 0;\r\n            var dy = this.chart.dy3D || 0;\r\n            var w = this.getWidth();\r\n            grid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n        }\r\n        this.positionItem(grid, point);\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererY3D.prototype.updateBaseGridElement = function () {\r\n        _super.prototype.updateBaseGridElement.call(this);\r\n        var dx = this.chart.dx3D || 0;\r\n        var dy = this.chart.dy3D || 0;\r\n        var w = this.getWidth();\r\n        this.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n            + $path.lineTo({ x: w, y: 0 })\r\n            + $path.lineTo({ x: w + dx, y: dy });\r\n    };\r\n    Object.defineProperty(AxisRendererY3D.prototype, \"chart\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Chart\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * Chart, associated with the Axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Chart\r\n         */\r\n        set: function (chart) {\r\n            if (chart) {\r\n                this._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Invoked when 3D-related settings change, like depth or angle.\r\n     *\r\n     * @param event Event\r\n     */\r\n    AxisRendererY3D.prototype.handle3DChanged = function (event) {\r\n        if (event.property == \"depth\" || event.property == \"angle\") {\r\n            this.invalidate();\r\n        }\r\n    };\r\n    return AxisRendererY3D;\r\n}(AxisRendererY));\r\nexport { AxisRendererY3D };\r\n//# sourceMappingURL=AxisRendererY3D.js.map","/**\r\n * Category axis module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisRendererX } from \"./AxisRendererX\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar CategoryAxisDataItem = /** @class */ (function (_super) {\r\n    __extends(CategoryAxisDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CategoryAxisDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.seriesDataItems = {};\r\n        _this.className = \"CategoryAxisDataItem\";\r\n        _this.text = \"{category}\";\r\n        _this.locations.category = 0;\r\n        _this.locations.endCategory = 1;\r\n        _this.deltaPosition = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CategoryAxisDataItem.prototype, \"category\", {\r\n        /**\r\n         * @return Category\r\n         */\r\n        get: function () {\r\n            if (this._adapterO) {\r\n                if (this._adapterO.isEnabled(\"category\")) {\r\n                    return this._adapterO.apply(\"category\", this.properties.category);\r\n                }\r\n            }\r\n            return this.properties.category;\r\n        },\r\n        /**\r\n         * Category.\r\n         *\r\n         * @param value  Category\r\n         */\r\n        set: function (value) {\r\n            var oldCategory = this.properties.category;\r\n            this.setProperty(\"category\", value);\r\n            if ($type.hasValue(oldCategory) && oldCategory != value) {\r\n                if (this.component) {\r\n                    this.component.validateDataElement(this);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisDataItem.prototype, \"endCategory\", {\r\n        /**\r\n         * @return End category\r\n         */\r\n        get: function () {\r\n            return this.properties.endCategory;\r\n        },\r\n        /**\r\n         * End category.\r\n         *\r\n         * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n         *\r\n         * @param value  End category\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"endCategory\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisDataItem.prototype, \"deltaPosition\", {\r\n        get: function () {\r\n            return this.properties.deltaCoordinate;\r\n        },\r\n        set: function (value) {\r\n            if (value != this.properties.deltaCoordinate) {\r\n                this.setProperty(\"deltaCoordinate\", value);\r\n                if (this.component) {\r\n                    this.component.invalidateDataItems();\r\n                    this.component.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CategoryAxisDataItem;\r\n}(AxisDataItem));\r\nexport { CategoryAxisDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar CategoryAxis = /** @class */ (function (_super) {\r\n    __extends(CategoryAxis, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CategoryAxis() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A collection that holds Axis' data items sorted by each category.\r\n         */\r\n        _this.dataItemsByCategory = new Dictionary();\r\n        _this.className = \"CategoryAxis\";\r\n        // Set field name\r\n        _this.axisFieldName = \"category\";\r\n        _this._lastDataItem = _this.createDataItem();\r\n        _this._lastDataItem.component = _this;\r\n        _this._disposers.push(_this._lastDataItem);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    CategoryAxis.prototype.createDataItem = function () {\r\n        return new CategoryAxisDataItem();\r\n    };\r\n    /**\r\n     * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n     *\r\n     * @return Axis break\r\n     */\r\n    CategoryAxis.prototype.createAxisBreak = function () {\r\n        return new CategoryAxisBreak();\r\n    };\r\n    /**\r\n     * Processes a related series' data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param dataItem  Data item\r\n     */\r\n    CategoryAxis.prototype.processSeriesDataItem = function (dataItem, axisLetter) {\r\n        _super.prototype.processSeriesDataItem.call(this, dataItem, axisLetter);\r\n        var category = dataItem[\"category\" + this.axisLetter];\r\n        if ($type.hasValue(category)) {\r\n            var categoryAxisDataItem = this.dataItemsByCategory.getKey(category);\r\n            if (categoryAxisDataItem) {\r\n                var seriesId = dataItem.component.uid;\r\n                var seriesDataItems = categoryAxisDataItem.seriesDataItems[seriesId];\r\n                if (!seriesDataItems) {\r\n                    seriesDataItems = [];\r\n                    categoryAxisDataItem.seriesDataItems[seriesId] = seriesDataItems;\r\n                }\r\n                seriesDataItems.push(dataItem);\r\n            }\r\n        }\r\n        else {\r\n            dataItem.component.dataItems.remove(dataItem);\r\n        }\r\n    };\r\n    /**\r\n     * Validates the data range.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     */\r\n    CategoryAxis.prototype.validateDataRange = function () {\r\n        var _this = this;\r\n        _super.prototype.validateDataRange.call(this);\r\n        $iter.each(this._series.iterator(), function (series) {\r\n            if ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n                series.invalidateDataRange();\r\n            }\r\n            else {\r\n                var startIndex = _this.positionToIndex(_this.start);\r\n                var endIndex = _this.positionToIndex(_this.end);\r\n                if (endIndex >= _this.dataItems.length) {\r\n                    endIndex--;\r\n                }\r\n                var seriesId = series.uid;\r\n                var minIndex = void 0;\r\n                var maxIndex = void 0;\r\n                for (var i = startIndex; i <= endIndex; i++) {\r\n                    var axisDataItem = _this.dataItems.getIndex(i);\r\n                    if (axisDataItem) {\r\n                        var seriesDataItems = axisDataItem.seriesDataItems[seriesId];\r\n                        if (seriesDataItems) {\r\n                            for (var i_1 = 0; i_1 < seriesDataItems.length; i_1++) {\r\n                                var seriesDataItem = seriesDataItems[i_1];\r\n                                if (seriesDataItem) {\r\n                                    var index = seriesDataItem.index;\r\n                                    if (!$type.isNumber(minIndex) || index < minIndex) {\r\n                                        minIndex = index;\r\n                                    }\r\n                                    if (!$type.isNumber(maxIndex) || index > maxIndex) {\r\n                                        maxIndex = index;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if ($type.isNumber(minIndex)) {\r\n                    series.startIndex = minIndex;\r\n                }\r\n                else {\r\n                    series.start = _this.start;\r\n                }\r\n                if ($type.isNumber(maxIndex)) {\r\n                    series.endIndex = maxIndex + 1;\r\n                }\r\n                else {\r\n                    series.end = _this.end;\r\n                }\r\n                // range might not change, but axis breaks might.\r\n                if (_this._axisBreaks && _this._axisBreaks.length > 0) {\r\n                    series.invalidateDataRange();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Validates the whole axis. Causes it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     */\r\n    CategoryAxis.prototype.validate = function () {\r\n        var _this = this;\r\n        _super.prototype.validate.call(this);\r\n        var dataCount = this.dataItems.length;\r\n        var startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n        var endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n        if (this.renderer.invalid) {\r\n            this.renderer.validate();\r\n        }\r\n        // find frequency at which we'll show items\r\n        var maxCount = this.renderer.axisLength / this.renderer.minGridDistance;\r\n        var frequency = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n        this._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n        this._endIndex = Math.ceil(this.end * dataCount);\r\n        this.fixAxisBreaks();\r\n        if (this._startIndex == this._endIndex) {\r\n            this._endIndex++;\r\n        }\r\n        this._frequency = frequency;\r\n        if (this.axisLength <= 0) {\r\n            return;\r\n        }\r\n        this.maxZoomFactor = this.dataItems.length;\r\n        if (this.dataItems.length <= 0) {\r\n            this.maxZoomFactor = 1;\r\n        }\r\n        this.resetIterators();\r\n        // it's important to use protected variables here, as getters will return 0 - length\r\n        // TODO use iterator instead\r\n        // @ todo: not solved cat axis item fading\r\n        startIndex = $math.max(0, this._startIndex - this._frequency);\r\n        endIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n        var itemIndex = 0;\r\n        for (var i = 0; i < startIndex; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            dataItem.__disabled = true;\r\n        }\r\n        for (var i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            dataItem.__disabled = true;\r\n        }\r\n        for (var i = startIndex; i < endIndex; i++) {\r\n            if (i < this.dataItems.length) {\r\n                var dataItem = this.dataItems.getIndex(i);\r\n                if (i / this._frequency == Math.round(i / this._frequency)) {\r\n                    var axisBreak = this.isInBreak(i);\r\n                    if (!axisBreak) {\r\n                        this.appendDataItem(dataItem);\r\n                        this.validateDataElement(dataItem, itemIndex);\r\n                    }\r\n                    itemIndex++;\r\n                }\r\n                else {\r\n                    //previously we disabled all before, but this is better for cpu\r\n                    //this.validateDataElement(dataItem, itemIndex); // helps to solve shrinking // not good - creates all items\r\n                    dataItem.__disabled = true;\r\n                }\r\n            }\r\n        }\r\n        this.appendDataItem(this._lastDataItem);\r\n        this.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n        if (this._axisBreaks) {\r\n            var axisBreaks = this._axisBreaks;\r\n            axisBreaks.each(function (axisBreak) {\r\n                var adjustedStartValue = axisBreak.adjustedStartValue;\r\n                var adjustedEndValue = axisBreak.adjustedEndValue;\r\n                if ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: _this._startIndex, end: _this._endIndex })) {\r\n                    for (var b = adjustedStartValue; b <= adjustedEndValue; b++) {\r\n                        var dataItem = _this.dataItems.getIndex(b);\r\n                        dataItem.__disabled = true;\r\n                    }\r\n                    var frequency_1 = $math.fitToRange(Math.ceil(_this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n                    var itemIndex_1 = 0;\r\n                    if (axisBreak.breakSize > 0) {\r\n                        // TODO use iterator instead\r\n                        for (var b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency_1) {\r\n                            var dataItem = _this.dataItems.getIndex(b);\r\n                            dataItem.__disabled = false;\r\n                            _this.appendDataItem(dataItem);\r\n                            _this.validateDataElement(dataItem, itemIndex_1);\r\n                            itemIndex_1++;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        this.validateBreaks();\r\n        this.validateAxisRanges();\r\n        this.ghostLabel.invalidate(); // solves font issue\r\n        this.renderer.invalidateLayout();\r\n    };\r\n    /**\r\n     * [validateDataElement description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param dataItem   [description]\r\n     * @param itemIndex  [description]\r\n     */\r\n    CategoryAxis.prototype.validateDataElement = function (dataItem, itemIndex, index) {\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n        dataItem.itemIndex = this._axisItemCount;\r\n        this._axisItemCount++;\r\n        //dataItem.__disabled = false;\r\n        var renderer = this.renderer;\r\n        if (!$type.isNumber(index)) {\r\n            index = this.categoryToIndex(dataItem.category);\r\n        }\r\n        var endIndex = this.categoryToIndex(dataItem.endCategory);\r\n        if (!$type.isNumber(endIndex)) {\r\n            endIndex = index;\r\n        }\r\n        var position = this.indexToPosition(index, dataItem.locations.category);\r\n        var endPosition = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n        dataItem.position = position;\r\n        var fillEndIndex;\r\n        var fillPosition;\r\n        var fillEndPosition;\r\n        if (dataItem.isRange) {\r\n            fillEndIndex = endIndex;\r\n            fillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n            fillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n        }\r\n        dataItem.point = renderer.positionToPoint(position);\r\n        var tick = dataItem.tick;\r\n        if (tick && !tick.disabled) {\r\n            renderer.updateTickElement(tick, position, endPosition);\r\n        }\r\n        var grid = dataItem.grid;\r\n        if (grid && !grid.disabled) {\r\n            renderer.updateGridElement(grid, position, endPosition);\r\n        }\r\n        var label = dataItem.label;\r\n        if (label && !label.disabled) {\r\n            // theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" wont' work, which is not intuitive.\r\n            if (!dataItem.isRange || label.text == undefined) {\r\n                dataItem.text = dataItem.text;\r\n            }\r\n            renderer.updateLabelElement(label, position, endPosition);\r\n            if ((renderer instanceof AxisRendererY && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (renderer instanceof AxisRendererX && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n                if (dataItem.label.html) {\r\n                    this.ghostLabel.html = dataItem.label.currentText;\r\n                }\r\n                else {\r\n                    this.ghostLabel.text = dataItem.label.currentText;\r\n                }\r\n            }\r\n        }\r\n        var fill = dataItem.axisFill;\r\n        if (fill && !fill.disabled) {\r\n            if (!dataItem.isRange) {\r\n                fillEndIndex = index + this._frequency;\r\n                fillPosition = this.indexToPosition(index, fill.location);\r\n                fillEndPosition = this.indexToPosition(fillEndIndex, fill.location);\r\n            }\r\n            renderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n            if (!dataItem.isRange) {\r\n                this.fillRule(dataItem, itemIndex);\r\n            }\r\n        }\r\n        if (dataItem.bullet) {\r\n            renderer.updateBullet(dataItem.bullet, position, endPosition);\r\n        }\r\n        var mask = dataItem.mask;\r\n        if (mask) {\r\n            renderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    CategoryAxis.prototype.disposeData = function () {\r\n        this.dataItemsByCategory.clear();\r\n        _super.prototype.disposeData.call(this);\r\n    };\r\n    /**\r\n     * Processes the axis data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem     Data item\r\n     * @param dataContext  The raw data that corresponds to this data item\r\n     */\r\n    CategoryAxis.prototype.processDataItem = function (dataItem, dataContext) {\r\n        if (dataItem) {\r\n            // creat a collection for fast access\r\n            _super.prototype.processDataItem.call(this, dataItem, dataContext);\r\n            // check if such category already exists\r\n            //let existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n            //if (existingDataItem && existingDataItem != dataItem) {\r\n            //\tthis.dataItems.remove(existingDataItem);\r\n            //}\r\n            if ($type.hasValue(dataItem.category)) {\r\n                this.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n            }\r\n        }\r\n    };\r\n    CategoryAxis.prototype.getDataItem = function (dataContext) {\r\n        var category = (dataContext[this.dataFields.category]);\r\n        if ($type.hasValue(category)) {\r\n            var dataItem = this.dataItemsByCategory.getKey(category);\r\n            if (dataItem) {\r\n                return dataItem;\r\n            }\r\n            else {\r\n                return this.dataItems.create();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Converts a category index to an actual screen coordinate on the axis.\r\n     *\r\n     * `location` identifies relative location within category. 0 - beginning,\r\n     * 0.5 - middle, 1 - end, and anything inbetween.\r\n     *\r\n     * @param index     Index\r\n     * @param location  Location (0-1)\r\n     * @return Position (px)\r\n     */\r\n    CategoryAxis.prototype.indexToPosition = function (index, location) {\r\n        if (!$type.isNumber(location)) {\r\n            location = 0.5;\r\n        }\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        var difference = this.adjustDifference(startIndex, endIndex);\r\n        var startLocation = this.startLocation;\r\n        var endLocation = this.endLocation;\r\n        difference -= startLocation;\r\n        difference -= (1 - endLocation);\r\n        if (this._axisBreaks) {\r\n            var axisBreaks = this._axisBreaks;\r\n            $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\r\n                var breakStartIndex = axisBreak.adjustedStartValue;\r\n                var breakEndIndex = axisBreak.adjustedEndValue;\r\n                if (index < startIndex || !$type.isNumber(breakStartIndex) || !$type.isNumber(breakEndIndex)) {\r\n                    return false;\r\n                }\r\n                if ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n                    breakStartIndex = Math.max(startIndex, breakStartIndex);\r\n                    breakEndIndex = Math.min(endIndex, breakEndIndex);\r\n                    var breakSize = axisBreak.breakSize;\r\n                    // value to the right of break end\r\n                    if (index > breakEndIndex) {\r\n                        startIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n                    }\r\n                    // value to the left of break start\r\n                    else if (index < breakStartIndex) {\r\n                    }\r\n                    // value within break\r\n                    else {\r\n                        index = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        var deltaPosition = 0;\r\n        var dataItem = this.dataItems.getIndex(index);\r\n        if (dataItem) {\r\n            deltaPosition = dataItem.deltaPosition;\r\n        }\r\n        return $math.round(deltaPosition + (index + location - startLocation - startIndex) / difference, 5);\r\n    };\r\n    /**\r\n     * Converts a string category name to relative position on axis.\r\n     *\r\n     * `location` identifies relative location within category. 0 - beginning,\r\n     * 0.5 - middle, 1 - end, and anything inbetween.\r\n     *\r\n     * @param category  Category name\r\n     * @param location  Location (0-1)\r\n     * @return Position\r\n     */\r\n    CategoryAxis.prototype.categoryToPosition = function (category, location) {\r\n        var index = this.categoryToIndex(category);\r\n        return this.indexToPosition(index, location);\r\n    };\r\n    /**\r\n     * Converts a string category name to a orientation point (x, y, angle) on axis\r\n     *\r\n     * `location` identifies relative location within category. 0 - beginning,\r\n     * 0.5 - middle, 1 - end, and anything inbetween.\r\n     * @param category  Category name\r\n     * @param location  Location (0-1)\r\n     * @return Orientation point\r\n     */\r\n    CategoryAxis.prototype.categoryToPoint = function (category, location) {\r\n        var position = this.categoryToPosition(category, location);\r\n        var point = this.renderer.positionToPoint(position);\r\n        var angle = this.renderer.positionToAngle(position);\r\n        return { x: point.x, y: point.y, angle: angle };\r\n    };\r\n    /**\r\n     * Converts a string category name to a orientation point (x, y, angle) on axis\r\n     *\r\n     * `location` identifies relative location within category. 0 - beginning,\r\n     * 0.5 - middle, 1 - end, and anything inbetween.\r\n     * @param category  Category name\r\n     * @param location  Location (0-1)\r\n     * @return Orientation point\r\n     */\r\n    CategoryAxis.prototype.anyToPoint = function (category, location) {\r\n        return this.categoryToPoint(category, location);\r\n    };\r\n    /**\r\n     * Converts a string category name to relative position on axis.\r\n     *\r\n     * An alias to `categoryToPosition()`.\r\n     *\r\n     * @param category  Category name\r\n     * @param location  Location (0-1)\r\n     * @return Relative position\r\n     */\r\n    CategoryAxis.prototype.anyToPosition = function (category, location) {\r\n        return this.categoryToPosition(category, location);\r\n    };\r\n    /**\r\n     * Converts named category to an index of data item it corresponds to.\r\n     *\r\n     * @param category  Category\r\n     * @return Data item index\r\n     */\r\n    CategoryAxis.prototype.categoryToIndex = function (category) {\r\n        if ($type.hasValue(category)) {\r\n            var dataItem = this.dataItemsByCategory.getKey(category);\r\n            if (dataItem) {\r\n                return dataItem.index;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Zooms the axis to specific named ctaegories.\r\n     *\r\n     * @param startCategory  Start category\r\n     * @param endCategory    End category\r\n     */\r\n    CategoryAxis.prototype.zoomToCategories = function (startCategory, endCategory) {\r\n        this.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n    };\r\n    /**\r\n     * [getAnyRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param start         [description]\r\n     * @param end           [description]\r\n     * @param startLocation [description]\r\n     * @param endLocation   [description]\r\n     * @return [description]\r\n     */\r\n    CategoryAxis.prototype.getAnyRangePath = function (start, end, startLocation, endLocation) {\r\n        var startPos = this.categoryToPosition(start, startLocation);\r\n        var endPos = this.categoryToPosition(end, endLocation);\r\n        return this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n    };\r\n    /**\r\n     * Takes an absolute position (px) within axis and adjust it to a specific\r\n     * `location` within category it corresponds to.\r\n     *\r\n     * @param position  Source position (px)\r\n     * @param location  Location within category (0-1)\r\n     * @return Adjusted position (px)\r\n     */\r\n    CategoryAxis.prototype.roundPosition = function (position, location) {\r\n        var index = this.positionToIndex(position);\r\n        return this.indexToPosition(index, location);\r\n    };\r\n    /**\r\n     * Finds and returns first series data item with specific category\r\n     * @param series    Target series\r\n     * @param category  Category\r\n     * @return XYSeriesDataItem data item\r\n     */\r\n    CategoryAxis.prototype.getFirstSeriesDataItem = function (series, category) {\r\n        for (var i = 0; i < series.dataItems.length; i++) {\r\n            var dataItem = series.dataItems.getIndex(i);\r\n            if (series.xAxis == this) {\r\n                if (dataItem.categoryX == category) {\r\n                    return dataItem;\r\n                }\r\n            }\r\n            if (series.yAxis == this) {\r\n                if (dataItem.categoryY == category) {\r\n                    return dataItem;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Finds and returns last series data item with specific category.\r\n     * @param series    Target series\r\n     * @param category  Category\r\n     * @return XYSeriesDataItem data item\r\n     */\r\n    CategoryAxis.prototype.getLastSeriesDataItem = function (series, category) {\r\n        for (var i = series.dataItems.length - 1; i >= 0; i--) {\r\n            var dataItem = series.dataItems.getIndex(i);\r\n            if (series.xAxis == this) {\r\n                if (dataItem.categoryX == category) {\r\n                    return dataItem;\r\n                }\r\n            }\r\n            if (series.yAxis == this) {\r\n                if (dataItem.categoryY == category) {\r\n                    return dataItem;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    // todo: optimize\r\n    CategoryAxis.prototype.getSeriesDataItemByCategory = function (category, series) {\r\n        var _this = this;\r\n        var seriesDataItem;\r\n        series.dataItems.each(function (dataItem) {\r\n            if (series.xAxis == _this) {\r\n                if (dataItem.categoryX == category) {\r\n                    seriesDataItem = dataItem;\r\n                }\r\n            }\r\n            else if (series.yAxis == _this) {\r\n                if (dataItem.categoryY == category) {\r\n                    seriesDataItem = dataItem;\r\n                }\r\n            }\r\n        });\r\n        return seriesDataItem;\r\n    };\r\n    /**\r\n     * Returns a data item from Series that corresponds to a specific absolute\r\n     * position on the Axis.\r\n     *\r\n     * @param series    Target series\r\n     * @param position  Position (px)\r\n     * @return XYSeriesDataItem data item\r\n     */\r\n    CategoryAxis.prototype.getSeriesDataItem = function (series, position, findNearest) {\r\n        var _this = this;\r\n        if ($type.isNumber(position)) {\r\n            var index_1 = this.positionToIndex(position);\r\n            if (index_1 >= this.dataItems.length) {\r\n                index_1--;\r\n            }\r\n            var dataItem = this.dataItems.getIndex(index_1);\r\n            if (dataItem) {\r\n                var category_1 = dataItem.category;\r\n                var sdi_1;\r\n                var seriesDataItem = series.dataItems.getIndex(index_1);\r\n                if (seriesDataItem) {\r\n                    if (series.xAxis == this) {\r\n                        if (seriesDataItem.categoryX == category_1) {\r\n                            return seriesDataItem;\r\n                        }\r\n                    }\r\n                    if (series.yAxis == this) {\r\n                        if (seriesDataItem.categoryY == category_1) {\r\n                            return seriesDataItem;\r\n                        }\r\n                    }\r\n                }\r\n                series.dataItems.each(function (dataItem) {\r\n                    if (series.xAxis == _this) {\r\n                        if (dataItem.categoryX == category_1) {\r\n                            if (!sdi_1) {\r\n                                sdi_1 = dataItem;\r\n                            }\r\n                            if (Math.abs(index_1 - sdi_1.index) > Math.abs(index_1 - dataItem.index)) {\r\n                                sdi_1 = dataItem;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (series.yAxis == _this) {\r\n                        if (dataItem.categoryY == category_1) {\r\n                            if (!sdi_1) {\r\n                                sdi_1 = dataItem;\r\n                            }\r\n                            if (Math.abs(index_1 - sdi_1.index) > Math.abs(index_1 - dataItem.index)) {\r\n                                sdi_1 = dataItem;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                //@todo\r\n                if (findNearest) {\r\n                }\r\n                return sdi_1;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the X coordinate for series' data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param dataItem  Data item\r\n     * @param key       Category\r\n     * @param location  Location (0-1)\r\n     * @return X coordinate (px)\r\n     */\r\n    CategoryAxis.prototype.getX = function (dataItem, key, location, stackKey, range) {\r\n        var position = this.getPositionX(dataItem, key, location, stackKey, range);\r\n        if ($type.isNaN(position)) {\r\n            return this.basePoint.x;\r\n        }\r\n        else {\r\n            return this.renderer.positionToPoint(position).x;\r\n        }\r\n    };\r\n    /**\r\n     * Returns relative position on axis for series' data item.\r\n     *\r\n     * @since 4.5.14\r\n     * @param  dataItem  Data item\r\n     * @param  key       Category\r\n     * @param  location  Location (0-1)\r\n     * @return           Relative position\r\n     */\r\n    CategoryAxis.prototype.getPositionX = function (dataItem, key, location, stackKey, range) {\r\n        var position;\r\n        if ($type.hasValue(key)) {\r\n            position = this.categoryToPosition(dataItem.categories[key], location);\r\n        }\r\n        if (range) {\r\n            position = $math.fitToRange(position, range.start, range.end);\r\n        }\r\n        return position;\r\n    };\r\n    /**\r\n     * Returns the Y coordinate for series' data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param dataItem  Data item\r\n     * @param key       Category\r\n     * @param location  Location (0-1)\r\n     * @return Y coordinate (px)\r\n     */\r\n    CategoryAxis.prototype.getY = function (dataItem, key, location, stackKey, range) {\r\n        var position = this.getPositionY(dataItem, key, location, stackKey, range);\r\n        if ($type.isNaN(position)) {\r\n            return this.basePoint.y;\r\n        }\r\n        else {\r\n            return this.renderer.positionToPoint(position).y;\r\n        }\r\n    };\r\n    /**\r\n     * Returns relative position on axis for series' data item.\r\n     *\r\n     * @since 4.5.14\r\n     * @param  dataItem  Data item\r\n     * @param  key       Category\r\n     * @param  location  Location (0-1)\r\n     * @return           Relative position\r\n     */\r\n    CategoryAxis.prototype.getPositionY = function (dataItem, key, location, stackKey, range) {\r\n        var position;\r\n        if ($type.hasValue(key)) {\r\n            position = this.categoryToPosition(dataItem.categories[key], location);\r\n        }\r\n        if (range) {\r\n            position = $math.fitToRange(position, range.start, range.end);\r\n        }\r\n        return position;\r\n    };\r\n    /**\r\n     * Returns an angle for series data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param dataItem  Data item\r\n     * @param key       Category\r\n     * @param location  Location (0-1)\r\n     * @param stackKey  Stack key (?)\r\n     * @param range Range to fit in\r\n     * @return Angle\r\n     */\r\n    CategoryAxis.prototype.getAngle = function (dataItem, key, location, stackKey, range) {\r\n        var position = this.categoryToPosition(dataItem.categories[key], location);\r\n        if (range) {\r\n            position = $math.fitToRange(position, range.start, range.end);\r\n        }\r\n        return this.positionToAngle(position);\r\n    };\r\n    /**\r\n     * Returns an absolute pixel coordinate of the start of the cell (category),\r\n     * that specific position value falls into.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param position  Position (px)\r\n     * @return Cell start position (px)\r\n     */\r\n    CategoryAxis.prototype.getCellStartPosition = function (position) {\r\n        return this.roundPosition(position, 0);\r\n    };\r\n    /**\r\n     * Returns an absolute pixel coordinate of the end of the cell (category),\r\n     * that specific position value falls into.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param position  Position (px)\r\n     * @return Cell end position (px)\r\n     */\r\n    CategoryAxis.prototype.getCellEndPosition = function (position) {\r\n        return this.roundPosition(position, 1);\r\n    };\r\n    /**\r\n     * Returns text to show in a category tooltip, based on specific position\r\n     * within axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position  Position (px)\r\n     * @return Label (category)\r\n     */\r\n    CategoryAxis.prototype.getTooltipText = function (position) {\r\n        var dataItem = this.dataItems.getIndex(this.positionToIndex(position));\r\n        if (dataItem) {\r\n            this.tooltipDataItem = dataItem;\r\n            this.tooltip.dataItem = dataItem;\r\n            if (this.tooltipText) {\r\n                return this.tooltipText;\r\n            }\r\n            if (!this._adapterO) {\r\n                return dataItem.category;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"getTooltipText\", dataItem.category);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns an index of the category that corresponds to specific pixel\r\n     * position within axis.\r\n     *\r\n     * @param position  Position (px)\r\n     * @return Category index\r\n     */\r\n    CategoryAxis.prototype.positionToIndex = function (position) {\r\n        position = $math.round(position, 10);\r\n        if (position < 0) {\r\n            position = 0;\r\n        }\r\n        if (position > 1) {\r\n            position = 1;\r\n        }\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        var difference = endIndex - startIndex - this.startLocation - (1 - this.endLocation);\r\n        position += 1 / difference * this.startLocation;\r\n        var index = null;\r\n        if (this._axisBreaks) {\r\n            var axisBreaks = this._axisBreaks;\r\n            // in case we have some axis breaks\r\n            $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\r\n                var breakStartPosition = axisBreak.startPosition;\r\n                var breakEndPosition = axisBreak.endPosition;\r\n                var breakStartIndex = axisBreak.adjustedStartValue;\r\n                var breakEndIndex = axisBreak.adjustedEndValue;\r\n                breakStartIndex = $math.max(breakStartIndex, startIndex);\r\n                breakEndIndex = $math.min(breakEndIndex, endIndex);\r\n                var breakSize = axisBreak.breakSize;\r\n                difference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n                // position to the right of break end\r\n                if (position > breakEndPosition) {\r\n                    startIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n                }\r\n                // position to the left of break start\r\n                else if (position < breakStartPosition) {\r\n                }\r\n                // value within break\r\n                else {\r\n                    var breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n                    index = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        if (!$type.isNumber(index)) {\r\n            index = Math.floor(position * difference + startIndex);\r\n        }\r\n        if (index >= this.dataItems.length) {\r\n            index = this.dataItems.length - 1;\r\n        }\r\n        // not good, when panning out of bounds, each time one less item gets selected\r\n        //if (index >= endIndex) {\r\n        //\tindex--;\r\n        //}\r\n        return index;\r\n    };\r\n    /**\r\n     * Returns category based on position.\r\n     *\r\n     * Please note that `position` represents position within axis which may be\r\n     * zoomed and not correspond to Cursor's `position`.\r\n     *\r\n     * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n     *\r\n     * This is a synonim of `getPositionLabel()` implemented here for consistentcy.\r\n     *\r\n     * @since 4.3.8\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n     * @param position  Relative position on axis (0-1)\r\n     * @return Position label\r\n     */\r\n    CategoryAxis.prototype.positionToCategory = function (position) {\r\n        return this.getPositionLabel(position);\r\n    };\r\n    /**\r\n     * Returns category based on position.\r\n     *\r\n     * Please note that `position` represents position within axis which may be\r\n     * zoomed and not correspond to Cursor's `position`.\r\n     *\r\n     * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n     * @param position  Relative position on axis (0-1)\r\n     * @return Position label\r\n     */\r\n    CategoryAxis.prototype.getPositionLabel = function (position) {\r\n        var dataItem = this.dataItems.getIndex(this.positionToIndex(position));\r\n        if (dataItem) {\r\n            return dataItem.category;\r\n        }\r\n    };\r\n    Object.defineProperty(CategoryAxis.prototype, \"basePoint\", {\r\n        /**\r\n         * Coordinates of the actual axis start.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Base point\r\n         */\r\n        get: function () {\r\n            // This makes base grid to be drawn at the end of the axis and adds extra\r\n            // grid which we need to nicely close the chart.\r\n            return this.renderer.positionToPoint(1);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Initializes Axis' renderer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    CategoryAxis.prototype.initRenderer = function () {\r\n        _super.prototype.initRenderer.call(this);\r\n        var renderer = this.renderer;\r\n        renderer.baseGrid.disabled = true;\r\n    };\r\n    Object.defineProperty(CategoryAxis.prototype, \"frequency\", {\r\n        /**\r\n         * Current frequency of labels of the axis.\r\n         *\r\n         * Normally it would be 1, but when labels start to be hidden due\r\n         * to `minGridDistance` this read-only property will increase.\r\n         *\r\n         * @readonly\r\n         * @since 4.2.0\r\n         * @return Label frequency\r\n         */\r\n        get: function () {\r\n            return this._frequency;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxis.prototype, \"sortBySeries\", {\r\n        /**\r\n         * @return Sort categories?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"sortBySeries\");\r\n        },\r\n        /**\r\n         * If set to a reference of [[ColumnSeries]] the categories will be sorted\r\n         * by actual values.\r\n         *\r\n         * The categories are ordered in descending order (from highest values to\r\n         * lowest). To reverse the order, use axis renderer's `inversed` setting.\r\n         * E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * categoryAxis.sortBySeries = series;\r\n         * categoryAxis.renderer.inversed = true;\r\n         * ```\r\n         * ```JavaScript\r\n         * categoryAxis.sortBySeries = series;\r\n         * categoryAxis.renderer.inversed = true;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"xAxes\": [{\r\n         *     // ...\r\n         *     \"sortBySeries\": \"s1\",\r\n         *     \"renderer\": {\r\n         *       // ...\r\n         *       \"inversed\": true\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @since 4.8.7\r\n         * @param  value  Sort categories?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"sortBySeries\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    CategoryAxis.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            if ($type.hasValue(config.sortBySeries) && $type.isString(config.sortBySeries)) {\r\n                if (this.map.hasKey(config.sortBySeries)) {\r\n                    config.sortBySeries = this.map.getKey(config.sortBySeries);\r\n                }\r\n                else {\r\n                    this.addDelayedMap(\"sortBySeries\", config.sortBySeries);\r\n                    delete config.sortBySeries;\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return CategoryAxis;\r\n}(Axis));\r\nexport { CategoryAxis };\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n//# sourceMappingURL=CategoryAxis.js.map","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nvar CategoryAxisBreak = /** @class */ (function (_super) {\r\n    __extends(CategoryAxisBreak, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CategoryAxisBreak() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"CategoryAxisBreak\";\r\n        _this.properties.startLocation = 0.5;\r\n        _this.properties.endLocation = 0.5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CategoryAxisBreak.prototype, \"startPosition\", {\r\n        /**\r\n         * Pixel position of the break's start.\r\n         *\r\n         * @return Position (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            if (this.axis) {\r\n                return this.axis.indexToPosition(this.adjustedStartValue, this.startLocation);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisBreak.prototype, \"endPosition\", {\r\n        /**\r\n         * Pixel position of the break's end.\r\n         *\r\n         * @return Position (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            if (this.axis) {\r\n                return this.axis.indexToPosition(this.adjustedEndValue, this.endLocation);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisBreak.prototype, \"startCategory\", {\r\n        /**\r\n         * @return Start category\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startCategory\");\r\n        },\r\n        /**\r\n         * A category break starts on.\r\n         *\r\n         * @param value Start category\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startCategory\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidateDataItems();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisBreak.prototype, \"endCategory\", {\r\n        /**\r\n         * @return End category\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endCategory\");\r\n        },\r\n        /**\r\n         * A category break ends on.\r\n         *\r\n         * @param value  End category\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endCategory\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidateDataItems();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisBreak.prototype, \"startValue\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            var category = this.getPropertyValue(\"startCategory\");\r\n            if (category) {\r\n                return this.axis.categoryToIndex(category);\r\n            }\r\n            else {\r\n                return this.getPropertyValue(\"startValue\");\r\n            }\r\n        },\r\n        /**\r\n         * An index of start category.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startValue\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidateDataItems();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisBreak.prototype, \"endValue\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            var category = this.getPropertyValue(\"endCategory\");\r\n            if (category) {\r\n                return this.axis.categoryToIndex(category);\r\n            }\r\n            else {\r\n                return this.getPropertyValue(\"endValue\");\r\n            }\r\n        },\r\n        /**\r\n         * An index of end category or a end value.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endValue\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidateDataItems();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisBreak.prototype, \"startLocation\", {\r\n        /**\r\n         * @return Break start location\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startLocation\");\r\n        },\r\n        /**\r\n         * Indicates where within starting category break should begin.\r\n         *\r\n         * Values range from `0` (start) to `1` (end), with default being `0.5` (middle).\r\n         *\r\n         * E.g. if you want to a break to fully encompass start and end categories,\r\n         * you should set `startLocation = 0` and `endLocation = 1`.\r\n         *\r\n         * @since 4.9.17\r\n         * @default 0.5\r\n         * @param  value  Break start location\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startLocation\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidateDataItems();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisBreak.prototype, \"endLocation\", {\r\n        /**\r\n         * @return Break end location\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endLocation\");\r\n        },\r\n        /**\r\n         * Indicates where within ending category break should end.\r\n         *\r\n         * Values range from `0` (start) to `1` (end), with default being `0.5` (middle).\r\n         *\r\n         * E.g. if you want to a break to fully encompass start and end categories,\r\n         * you should set `startLocation = 0` and `endLocation = 1`.\r\n         *\r\n         * @since 4.9.17\r\n         * @default 0.5\r\n         * @param  value  Break end location\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endLocation\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidateDataItems();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CategoryAxisBreak;\r\n}(AxisBreak));\r\nexport { CategoryAxisBreak };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n//# sourceMappingURL=CategoryAxisBreak.js.map","/**\r\n * DateAxis module\r\n */\r\nimport { __assign, __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem } from \"./ValueAxis\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar DateAxisDataItem = /** @class */ (function (_super) {\r\n    __extends(DateAxisDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DateAxisDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"DateAxisDataItem\";\r\n        _this.applyTheme();\r\n        _this.values.date = {};\r\n        _this.values.endDate = {};\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DateAxisDataItem.prototype, \"date\", {\r\n        /**\r\n         * @return Date\r\n         */\r\n        get: function () {\r\n            return this.dates[\"date\"];\r\n        },\r\n        /**\r\n         * Date position of the data item.\r\n         *\r\n         * @param date  Date\r\n         */\r\n        set: function (date) {\r\n            this.setDate(\"date\", date);\r\n            this.value = date.getTime();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxisDataItem.prototype, \"endDate\", {\r\n        /**\r\n         * @return End date\r\n         */\r\n        get: function () {\r\n            return this.dates[\"endDate\"];\r\n        },\r\n        /**\r\n         * End date for data item.\r\n         *\r\n         * @param date End date\r\n         */\r\n        set: function (date) {\r\n            this.setDate(\"endDate\", date);\r\n            this.endValue = date.getTime();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DateAxisDataItem;\r\n}(ValueAxisDataItem));\r\nexport { DateAxisDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/} got `DateAxis` documention\r\n * @important\r\n */\r\nvar DateAxis = /** @class */ (function (_super) {\r\n    __extends(DateAxis, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DateAxis() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this._gapBreaks = false;\r\n        /**\r\n         * A list of date/time intervals for Date axis.\r\n         *\r\n         * This define various granularities available for the axis. For example\r\n         * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n         * the axis will choose the granularity of 10 minutes, displaying a label\r\n         * every 10 minutes.\r\n         *\r\n         * Default intervals:\r\n         *\r\n         * ```JSON\r\n         * [\r\n         *  { timeUnit: \"millisecond\", count: 1 },\r\n         *  { timeUnit: \"millisecond\", count: 5 },\r\n         *  { timeUnit: \"millisecond\", count: 10 },\r\n         *  { timeUnit: \"millisecond\", count: 50 },\r\n         *  { timeUnit: \"millisecond\", count: 100 },\r\n         *  { timeUnit: \"millisecond\", count: 500 },\r\n         *  { timeUnit: \"second\", count: 1 },\r\n         *  { timeUnit: \"second\", count: 5 },\r\n         *  { timeUnit: \"second\", count: 10 },\r\n         *  { timeUnit: \"second\", count: 30 },\r\n         *  { timeUnit: \"minute\", count: 1 },\r\n         *  { timeUnit: \"minute\", count: 5 },\r\n         *  { timeUnit: \"minute\", count: 10 },\r\n         *  { timeUnit: \"minute\", count: 30 },\r\n         *  { timeUnit: \"hour\", count: 1 },\r\n         *  { timeUnit: \"hour\", count: 3 },\r\n         *  { timeUnit: \"hour\", count: 6 },\r\n         *  { timeUnit: \"hour\", count: 12 },\r\n         *  { timeUnit: \"day\", count: 1 },\r\n         *  { timeUnit: \"day\", count: 2 },\r\n         *  { timeUnit: \"day\", count: 3 },\r\n         *  { timeUnit: \"day\", count: 4 },\r\n         *  { timeUnit: \"day\", count: 5 },\r\n         *  { timeUnit: \"week\", count: 1 },\r\n         *  { timeUnit: \"month\", count: 1 },\r\n         *  { timeUnit: \"month\", count: 2 },\r\n         *  { timeUnit: \"month\", count: 3 },\r\n         *  { timeUnit: \"month\", count: 6 },\r\n         *  { timeUnit: \"year\", count: 1 },\r\n         *  { timeUnit: \"year\", count: 2 },\r\n         *  { timeUnit: \"year\", count: 5 },\r\n         *  { timeUnit: \"year\", count: 10 },\r\n         *  { timeUnit: \"year\", count: 50 },\r\n         *  { timeUnit: \"year\", count: 100 }\r\n         * ]\r\n         * ```\r\n         */\r\n        _this.gridIntervals = new List();\r\n        /**\r\n         * If data aggregation is enabled by setting Axis' `groupData = true`, the\r\n         * chart will try to aggregate data items into grouped data items.\r\n         *\r\n         * If there are more data items in selected period than `groupCount`, it will\r\n         * group data items into bigger period.\r\n         *\r\n         * For example seconds might be grouped into 10-second aggregate data items.\r\n         *\r\n         * This setting indicates what group intervals can the chart group to.\r\n         *\r\n         * Default intervals:\r\n         *\r\n         * ```JSON\r\n         * [\r\n         *   { timeUnit: \"millisecond\", count: 1},\r\n         *   { timeUnit: \"millisecond\", count: 10 },\r\n         *   { timeUnit: \"millisecond\", count: 100 },\r\n         *   { timeUnit: \"second\", count: 1 },\r\n         *   { timeUnit: \"second\", count: 10 },\r\n         *   { timeUnit: \"minute\", count: 1 },\r\n         *   { timeUnit: \"minute\", count: 10 },\r\n         *   { timeUnit: \"hour\", count: 1 },\r\n         *   { timeUnit: \"day\", count: 1 },\r\n         *   { timeUnit: \"week\", count: 1 },\r\n         *   { timeUnit: \"month\", count: 1 },\r\n         *   { timeUnit: \"year\", count: 1 }\r\n         * ]\r\n         * ```\r\n         * `groupData = true` does not work in combination with `skipEmptyPeriods = true`.\r\n         *\r\n         * @since 4.7.0\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n         */\r\n        _this.groupIntervals = new List();\r\n        /**\r\n         * A collection of date formats to use when formatting different time units\r\n         * on Date/time axis.\r\n         *\r\n         * Actual defaults will depend on the language locale set for the chart.\r\n         *\r\n         * To override format for a specific time unit, say days, you need to set\r\n         * the appropriate key to a format string. E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n         * ```\r\n         * ```JavaScript\r\n         * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n         * ```\r\n         * ```JSON\r\n         * \"xAxes\": [{\r\n         *   \"type\": \"DateAxis\",\r\n         *   \"dateFormats\": {\r\n         *     \"day\": \"MMMM d, yyyy\"\r\n         *   }\r\n         * }]\r\n         * ```\r\n         *\r\n         * @see {@link DateFormatter}\r\n         */\r\n        _this.dateFormats = new Dictionary();\r\n        /**\r\n         * These formats are applied to labels that are first in a larger unit.\r\n         *\r\n         * For example, if we have a DateAxis with days on it, the first day of month\r\n         * indicates a break in month - a start of the bigger period.\r\n         *\r\n         * For those labels, `periodChangeDateFormats` are applied instead of\r\n         * `dateFormats`.\r\n         *\r\n         * This allows us implement convenient structures, like instead of:\r\n         *\r\n         * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n         *\r\n         * We can have:\r\n         *\r\n         * `Jan - 1 - 2 - 3 - ...`\r\n         *\r\n         * This can be disabled by setting `markUnitChange = false`.\r\n         */\r\n        _this.periodChangeDateFormats = new Dictionary();\r\n        /**\r\n         * Actual interval (granularity) derived from the actual data.\r\n         */\r\n        _this._baseIntervalReal = { timeUnit: \"day\", count: 1 };\r\n        /**\r\n         */\r\n        _this._prevSeriesTime = {};\r\n        /**\r\n         * [_minDifference description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._minDifference = {};\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this._firstWeekDay = 1;\r\n        /**\r\n         * A collection of start timestamps to use as axis' min timestamp for\r\n         * particular data item item periods.\r\n         *\r\n         * @since 4.7.0\r\n         * @readonly\r\n         */\r\n        _this.groupMin = {};\r\n        /**\r\n         * A collection of start timestamps to use as axis' max timestamp for\r\n         * particular data item item periods.\r\n         *\r\n         * @since 4.7.0\r\n         * @readonly\r\n         */\r\n        _this.groupMax = {};\r\n        _this.className = \"DateAxis\";\r\n        _this.setPropertyValue(\"markUnitChange\", true);\r\n        _this.snapTooltip = true;\r\n        _this.tooltipPosition = \"pointer\";\r\n        _this.setPropertyValue(\"groupData\", false);\r\n        _this.groupCount = 200;\r\n        _this.events.on(\"parentset\", _this.getDFFormatter, _this, false);\r\n        // Translatable defaults are applied in `applyInternalDefaults()`\r\n        // ...\r\n        // Define default intervals\r\n        _this.gridIntervals.pushAll([\r\n            { timeUnit: \"millisecond\", count: 1 },\r\n            { timeUnit: \"millisecond\", count: 5 },\r\n            { timeUnit: \"millisecond\", count: 10 },\r\n            { timeUnit: \"millisecond\", count: 50 },\r\n            { timeUnit: \"millisecond\", count: 100 },\r\n            { timeUnit: \"millisecond\", count: 500 },\r\n            { timeUnit: \"second\", count: 1 },\r\n            { timeUnit: \"second\", count: 5 },\r\n            { timeUnit: \"second\", count: 10 },\r\n            { timeUnit: \"second\", count: 30 },\r\n            { timeUnit: \"minute\", count: 1 },\r\n            { timeUnit: \"minute\", count: 5 },\r\n            { timeUnit: \"minute\", count: 10 },\r\n            { timeUnit: \"minute\", count: 15 },\r\n            { timeUnit: \"minute\", count: 30 },\r\n            { timeUnit: \"hour\", count: 1 },\r\n            { timeUnit: \"hour\", count: 3 },\r\n            { timeUnit: \"hour\", count: 6 },\r\n            { timeUnit: \"hour\", count: 12 },\r\n            { timeUnit: \"day\", count: 1 },\r\n            { timeUnit: \"day\", count: 2 },\r\n            { timeUnit: \"day\", count: 3 },\r\n            { timeUnit: \"day\", count: 4 },\r\n            { timeUnit: \"day\", count: 5 },\r\n            { timeUnit: \"week\", count: 1 },\r\n            { timeUnit: \"month\", count: 1 },\r\n            { timeUnit: \"month\", count: 2 },\r\n            { timeUnit: \"month\", count: 3 },\r\n            { timeUnit: \"month\", count: 6 },\r\n            { timeUnit: \"year\", count: 1 },\r\n            { timeUnit: \"year\", count: 2 },\r\n            { timeUnit: \"year\", count: 5 },\r\n            { timeUnit: \"year\", count: 10 },\r\n            { timeUnit: \"year\", count: 50 },\r\n            { timeUnit: \"year\", count: 100 },\r\n            { timeUnit: \"year\", count: 200 },\r\n            { timeUnit: \"year\", count: 500 },\r\n            { timeUnit: \"year\", count: 1000 },\r\n            { timeUnit: \"year\", count: 2000 },\r\n            { timeUnit: \"year\", count: 5000 },\r\n            { timeUnit: \"year\", count: 10000 },\r\n            { timeUnit: \"year\", count: 100000 }\r\n        ]);\r\n        _this.groupIntervals.pushAll([\r\n            { timeUnit: \"millisecond\", count: 1 },\r\n            { timeUnit: \"millisecond\", count: 10 },\r\n            { timeUnit: \"millisecond\", count: 100 },\r\n            { timeUnit: \"second\", count: 1 },\r\n            { timeUnit: \"second\", count: 10 },\r\n            { timeUnit: \"minute\", count: 1 },\r\n            { timeUnit: \"minute\", count: 10 },\r\n            { timeUnit: \"hour\", count: 1 },\r\n            { timeUnit: \"day\", count: 1 },\r\n            { timeUnit: \"week\", count: 1 },\r\n            { timeUnit: \"month\", count: 1 },\r\n            { timeUnit: \"year\", count: 1 }\r\n        ]);\r\n        // Set field name\r\n        _this.axisFieldName = \"date\";\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * A function which applies fills to axis cells.\r\n     *\r\n     * Default function fills every second fill. You can set this to a function\r\n     * that follows some other logic.\r\n     *\r\n     * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n     * property accordingly.\r\n     */\r\n    DateAxis.prototype.fillRule = function (dataItem) {\r\n        var value = dataItem.value;\r\n        var axis = dataItem.component;\r\n        var gridInterval = axis._gridInterval;\r\n        var gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n        if (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n            dataItem.axisFill.__disabled = true;\r\n        }\r\n        else {\r\n            dataItem.axisFill.__disabled = false;\r\n        }\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    DateAxis.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Set default date formats\r\n        if (!this.dateFormats.hasKey(\"millisecond\")) {\r\n            this.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n        }\r\n        if (!this.dateFormats.hasKey(\"second\")) {\r\n            this.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n        }\r\n        if (!this.dateFormats.hasKey(\"minute\")) {\r\n            this.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n        }\r\n        if (!this.dateFormats.hasKey(\"hour\")) {\r\n            this.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n        }\r\n        if (!this.dateFormats.hasKey(\"day\")) {\r\n            this.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n        }\r\n        if (!this.dateFormats.hasKey(\"week\")) {\r\n            this.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\")); // not a mistake\r\n        }\r\n        if (!this.dateFormats.hasKey(\"month\")) {\r\n            this.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n        }\r\n        if (!this.dateFormats.hasKey(\"year\")) {\r\n            this.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n        }\r\n        if (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n            this.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n        }\r\n        if (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n            this.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n        }\r\n        if (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n            this.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n        }\r\n        if (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n            this.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_day\"));\r\n        }\r\n        if (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n            this.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n        }\r\n        if (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n            this.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n        }\r\n        if (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n            this.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    DateAxis.prototype.createDataItem = function () {\r\n        return new DateAxisDataItem();\r\n    };\r\n    /**\r\n     * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n     *\r\n     * @return Axis break\r\n     */\r\n    DateAxis.prototype.createAxisBreak = function () {\r\n        return new DateAxisBreak();\r\n    };\r\n    /**\r\n     * Validates Axis' data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    DateAxis.prototype.validateDataItems = function () {\r\n        // allows to keep selection of the same size\r\n        var start = this.start;\r\n        var end = this.end;\r\n        var baseDuration = this.baseDuration;\r\n        var periodCount = (this.max - this.min) / baseDuration;\r\n        this._firstWeekDay = this.getFirstWeekDay();\r\n        this.getDFFormatter();\r\n        _super.prototype.validateDataItems.call(this);\r\n        var mainBaseDuration = $time.getDuration(this.mainBaseInterval.timeUnit, this.mainBaseInterval.count);\r\n        this.maxZoomFactor = (this.max - this.min) / mainBaseDuration;\r\n        this._deltaMinMax = this.baseDuration / 2;\r\n        // allows to keep selection of the same size\r\n        var newPeriodCount = (this.max - this.min) / baseDuration;\r\n        start = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n        this.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n    };\r\n    /**\r\n     * Handles process after zoom.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Does nothing?\r\n     */\r\n    DateAxis.prototype.handleSelectionExtremesChange = function () {\r\n    };\r\n    /**\r\n     * Calculates all positions, related to axis as per current zoom.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    DateAxis.prototype.calculateZoom = function () {\r\n        var _this = this;\r\n        _super.prototype.calculateZoom.call(this);\r\n        var difference = this.adjustDifference(this._minZoomed, this._maxZoomed);\r\n        var dataSetChanged = false;\r\n        // if data has to be grouped, choose interval and set dataset\r\n        if (this.groupData && $type.hasValue(difference)) {\r\n            var mainBaseInterval = this.mainBaseInterval;\r\n            var modifiedDifference = difference + this.startLocation + (1 - this.endLocation) * this.baseDuration;\r\n            var groupInterval = void 0;\r\n            if (this.groupInterval) {\r\n                groupInterval = __assign({}, this.groupInterval);\r\n            }\r\n            else {\r\n                groupInterval = this.chooseInterval(0, modifiedDifference, this.groupCount, this.groupIntervals);\r\n                if ($time.getDuration(groupInterval.timeUnit, groupInterval.count) < $time.getDuration(mainBaseInterval.timeUnit, mainBaseInterval.count)) {\r\n                    groupInterval = __assign({}, mainBaseInterval);\r\n                }\r\n            }\r\n            this._groupInterval = groupInterval;\r\n            var newId = groupInterval.timeUnit + groupInterval.count;\r\n            if (this._currentDataSetId != newId) {\r\n                this._currentDataSetId = newId;\r\n                this.dispatch(\"groupperiodchanged\");\r\n            }\r\n            this.series.each(function (series) {\r\n                if (series.baseAxis == _this) {\r\n                    if (series.setDataSet(_this._currentDataSetId)) {\r\n                        dataSetChanged = true;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        var gridInterval = this.chooseInterval(0, difference, this._gridCount);\r\n        if ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n            gridInterval = __assign({}, this.baseInterval);\r\n        }\r\n        this._gridInterval = gridInterval;\r\n        this._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n        // the following is needed to avoid grid flickering while scrolling\r\n        this._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n        this._gridDate = $time.round(new Date(this.minZoomed - $time.getDuration(gridInterval.timeUnit, gridInterval.count)), gridInterval.timeUnit, gridInterval.count, this._firstWeekDay, this._df.utc, new Date(this.min));\r\n        // tell series start/end\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (series.baseAxis == _this) {\r\n                var field_1 = series.getAxisField(_this);\r\n                var minZoomed = $time.round(new Date(_this._minZoomed), _this.baseInterval.timeUnit, _this.baseInterval.count, _this._firstWeekDay, _this._df.utc).getTime();\r\n                var minZoomedStr = minZoomed.toString();\r\n                var startDataItem = series.dataItemsByAxis.getKey(_this.uid).getKey(minZoomedStr + series.currentDataSetId);\r\n                var startIndex = 0;\r\n                if (_this.start != 0) {\r\n                    if (startDataItem) {\r\n                        startDataItem = _this.findFirst(startDataItem, minZoomed, field_1);\r\n                        startIndex = startDataItem.index;\r\n                    }\r\n                    else {\r\n                        startIndex = series.dataItems.findClosestIndex(_this._minZoomed, function (x) { return x[field_1]; }, \"left\");\r\n                    }\r\n                }\r\n                // 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n                var baseInterval = _this.baseInterval;\r\n                var maxZoomed = $time.add($time.round(new Date(_this._maxZoomed), baseInterval.timeUnit, baseInterval.count, _this._firstWeekDay, _this._df.utc), baseInterval.timeUnit, baseInterval.count, _this._df.utc).getTime();\r\n                var maxZoomedStr = maxZoomed.toString();\r\n                var endDataItem = series.dataItemsByAxis.getKey(_this.uid).getKey(maxZoomedStr + series.currentDataSetId);\r\n                var endIndex = series.dataItems.length;\r\n                if (_this.end != 1) {\r\n                    if (endDataItem) {\r\n                        endIndex = endDataItem.index;\r\n                    }\r\n                    else {\r\n                        maxZoomed -= 1;\r\n                        endIndex = series.dataItems.findClosestIndex(maxZoomed, function (x) { return x[field_1]; }, \"right\");\r\n                        if (endIndex < series.dataItems.length) {\r\n                            endIndex++;\r\n                        }\r\n                    }\r\n                }\r\n                series.startIndex = startIndex;\r\n                series.endIndex = endIndex;\r\n                if (!dataSetChanged && series.dataRangeInvalid) {\r\n                    series.validateDataRange();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    DateAxis.prototype.findFirst = function (dataItem, time, key) {\r\n        var index = dataItem.index;\r\n        if (index > 0) {\r\n            var series = dataItem.component;\r\n            var previousDataItem = series.dataItems.getIndex(index - 1);\r\n            var previousDate = previousDataItem[key];\r\n            if (!previousDate || previousDate.getTime() < time) {\r\n                return dataItem;\r\n            }\r\n            else {\r\n                return this.findFirst(previousDataItem, time, key);\r\n            }\r\n        }\r\n        else {\r\n            return dataItem;\r\n        }\r\n    };\r\n    /**\r\n     * (Re)validates data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    DateAxis.prototype.validateData = function () {\r\n        _super.prototype.validateData.call(this);\r\n        if (!$type.isNumber(this.baseInterval.count)) {\r\n            this.baseInterval.count = 1;\r\n        }\r\n    };\r\n    Object.defineProperty(DateAxis.prototype, \"minDifference\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            var minDifference = Number.MAX_VALUE;\r\n            this.series.each(function (series) {\r\n                if (minDifference > _this._minDifference[series.uid]) {\r\n                    minDifference = _this._minDifference[series.uid];\r\n                }\r\n            });\r\n            if (minDifference == Number.MAX_VALUE || minDifference == 0) {\r\n                minDifference = $time.getDuration(\"day\");\r\n            }\r\n            return minDifference;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [dataChangeUpdate description]\r\n     *\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    DateAxis.prototype.seriesDataChangeUpdate = function (series) {\r\n        this._minDifference[series.uid] = Number.MAX_VALUE;\r\n    };\r\n    /**\r\n     * [postProcessSeriesDataItems description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    DateAxis.prototype.postProcessSeriesDataItems = function (series) {\r\n        var _this = this;\r\n        if (series) {\r\n            this.seriesGroupUpdate(series);\r\n        }\r\n        else {\r\n            this.series.each(function (series) {\r\n                _this.seriesGroupUpdate(series);\r\n            });\r\n        }\r\n        this.addEmptyUnitsBreaks();\r\n    };\r\n    DateAxis.prototype.seriesGroupUpdate = function (series) {\r\n        var _this = this;\r\n        if (JSON.stringify(series._baseInterval[this.uid]) != JSON.stringify(this.mainBaseInterval)) {\r\n            series._baseInterval[this.uid] = this.mainBaseInterval;\r\n            series.mainDataSet.each(function (dataItem) {\r\n                _this.postProcessSeriesDataItem(dataItem);\r\n            });\r\n            if (this.groupData) {\r\n                this.groupSeriesData(series);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calculates series group data.\r\n     *\r\n     * @param  series  Series\r\n     * @ignore\r\n     */\r\n    DateAxis.prototype.groupSeriesData = function (series) {\r\n        var _this = this;\r\n        if (series.baseAxis == this && series.dataItems.length > 0 && !series.dataGrouped) {\r\n            // make array of intervals which will be used;\r\n            var intervals_1 = [];\r\n            var mainBaseInterval = this.mainBaseInterval;\r\n            var mainIntervalDuration_1 = $time.getDuration(mainBaseInterval.timeUnit, mainBaseInterval.count);\r\n            this.groupIntervals.each(function (interval) {\r\n                var intervalDuration = $time.getDuration(interval.timeUnit, interval.count);\r\n                if (intervalDuration > mainIntervalDuration_1 && intervalDuration < (_this.max - _this.min)) {\r\n                    intervals_1.push(interval);\r\n                }\r\n            });\r\n            if (series._dataSets) {\r\n                series._dataSets.each(function (key, dataItems) {\r\n                    dataItems.each(function (dataItem) {\r\n                        dataItem.dispose();\r\n                    });\r\n                    dataItems.clear();\r\n                });\r\n                series._dataSets.clear();\r\n            }\r\n            $array.each(intervals_1, function (interval) {\r\n                //let mainBaseInterval = this._mainBaseInterval;\r\n                var key = \"date\" + _this.axisLetter;\r\n                // create data set\r\n                var dataSetId = interval.timeUnit + interval.count;\r\n                // todo: check where this clone goes\r\n                var dataSet = new OrderedListTemplate(series.mainDataSet.template.clone());\r\n                series.dataSets.setKey(dataSetId, dataSet);\r\n                series.dataGrouped = true;\r\n                var dataItems = series.mainDataSet;\r\n                var previousTime = Number.NEGATIVE_INFINITY;\r\n                var i = 0;\r\n                var newDataItem;\r\n                var dataFields = [];\r\n                $object.each(series.dataFields, function (dfkey, df) {\r\n                    var dfk = dfkey;\r\n                    if (dfk != key && dfk.indexOf(\"Show\") == -1) {\r\n                        dataFields.push(dfk);\r\n                    }\r\n                });\r\n                dataItems.each(function (dataItem) {\r\n                    var date = dataItem.getDate(key);\r\n                    if (date) {\r\n                        var time = date.getTime();\r\n                        var roundedDate = $time.round(new Date(time), interval.timeUnit, interval.count, _this._df.firstDayOfWeek, _this._df.utc);\r\n                        var currentTime = roundedDate.getTime();\r\n                        // changed period\t\t\t\t\t\t\t\t\r\n                        if (previousTime < currentTime) {\r\n                            newDataItem = dataSet.create();\r\n                            newDataItem.dataContext = {};\r\n                            newDataItem.setWorkingLocation(\"dateX\", series.dataItems.template.locations.dateX, 0);\r\n                            newDataItem.setWorkingLocation(\"openDateX\", series.dataItems.template.locations.openDateX, 0);\r\n                            newDataItem.setWorkingLocation(\"dateY\", series.dataItems.template.locations.dateY, 0);\r\n                            newDataItem.setWorkingLocation(\"openDateY\", series.dataItems.template.locations.openDateY, 0);\r\n                            newDataItem.component = series;\r\n                            // other Dates?\r\n                            newDataItem.setDate(key, roundedDate);\r\n                            newDataItem._index = i;\r\n                            i++;\r\n                            $array.each(dataFields, function (vkey) {\r\n                                //let groupFieldName = vkey + \"Group\";\r\n                                var dvalues = dataItem.values[vkey];\r\n                                if (dvalues) {\r\n                                    var value = dvalues.value;\r\n                                    var values = newDataItem.values[vkey];\r\n                                    if ($type.isNumber(value)) {\r\n                                        values.value = value;\r\n                                        values.workingValue = value;\r\n                                        values.open = value;\r\n                                        values.close = value;\r\n                                        values.low = value;\r\n                                        values.high = value;\r\n                                        values.sum = value;\r\n                                        values.average = value;\r\n                                        values.count = 1;\r\n                                    }\r\n                                    else {\r\n                                        values.count = 0;\r\n                                    }\r\n                                }\r\n                            });\r\n                            _this.postProcessSeriesDataItem(newDataItem, interval);\r\n                            $object.each(series.propertyFields, function (key, fieldValue) {\r\n                                var f = key;\r\n                                var value = dataItem.properties[key];\r\n                                if ($type.hasValue(value)) {\r\n                                    newDataItem.hasProperties = true;\r\n                                    newDataItem.setProperty(f, value);\r\n                                }\r\n                            });\r\n                            newDataItem.groupDataItems = [dataItem];\r\n                            previousTime = currentTime;\r\n                        }\r\n                        else {\r\n                            if (newDataItem) {\r\n                                $array.each(dataFields, function (vkey) {\r\n                                    var groupFieldName = series.groupFields[vkey];\r\n                                    var dvalues = dataItem.values[vkey];\r\n                                    if (dvalues) {\r\n                                        var value = dvalues.value;\r\n                                        if ($type.isNumber(value)) {\r\n                                            var values = newDataItem.values[vkey];\r\n                                            if (!$type.isNumber(values.open)) {\r\n                                                values.open = value;\r\n                                            }\r\n                                            values.close = value;\r\n                                            if (values.low > value || !$type.isNumber(values.low)) {\r\n                                                values.low = value;\r\n                                            }\r\n                                            if (values.high < value || !$type.isNumber(values.high)) {\r\n                                                values.high = value;\r\n                                            }\r\n                                            if ($type.isNumber(values.sum)) {\r\n                                                values.sum += value;\r\n                                            }\r\n                                            else {\r\n                                                values.sum = value;\r\n                                            }\r\n                                            values.count++;\r\n                                            values.average = values.sum / values.count;\r\n                                            if ($type.isNumber(values[groupFieldName])) {\r\n                                                values.value = values[groupFieldName];\r\n                                                values.workingValue = values.value;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                });\r\n                                $utils.copyProperties(dataItem.properties, newDataItem.properties);\r\n                                $object.each(series.propertyFields, function (key, fieldValue) {\r\n                                    var f = key;\r\n                                    var value = dataItem.properties[key];\r\n                                    if ($type.hasValue(value)) {\r\n                                        newDataItem.hasProperties = true;\r\n                                        newDataItem.setProperty(f, value);\r\n                                    }\r\n                                });\r\n                                newDataItem.groupDataItems.push(dataItem);\r\n                            }\r\n                        }\r\n                    }\r\n                    if (newDataItem) {\r\n                        $utils.copyProperties(dataItem.dataContext, newDataItem.dataContext);\r\n                    }\r\n                });\r\n            });\r\n            this.calculateZoom();\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    DateAxis.prototype.getDFFormatter = function () {\r\n        this._df = this.dateFormatter;\r\n    };\r\n    /**\r\n     * [postProcessSeriesDataItem description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param dataItem Data item\r\n     */\r\n    DateAxis.prototype.postProcessSeriesDataItem = function (dataItem, interval) {\r\n        var _this = this;\r\n        // we need to do this for all series data items not only added recently, as baseInterval might change\r\n        var intervalID = \"\";\r\n        if (interval) {\r\n            intervalID = interval.timeUnit + interval.count;\r\n        }\r\n        else {\r\n            interval = this.mainBaseInterval;\r\n        }\r\n        var series = dataItem.component;\r\n        var dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n        $object.each(dataItem.dates, function (key) {\r\n            var date = dataItem.getDate(key);\r\n            var time = date.getTime();\r\n            var startDate = $time.round(new Date(time), interval.timeUnit, interval.count, _this._firstWeekDay, _this._df.utc);\r\n            var startTime = startDate.getTime();\r\n            var endDate = $time.add(new Date(startTime), interval.timeUnit, interval.count, _this._df.utc);\r\n            dataItem.setCalculatedValue(key, startTime, \"open\");\r\n            dataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n            dataItemsByAxis.setKey(startTime + intervalID, dataItem);\r\n        });\r\n    };\r\n    /**\r\n     * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n     * elements for them.\r\n     *\r\n     * Can be used to automatically remove strethes without data, like weekends.\r\n     *\r\n     * No, need to call this manually. It will automatically be done if\r\n     * `skipEmptyPeriods = true`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    DateAxis.prototype.addEmptyUnitsBreaks = function () {\r\n        var _this = this;\r\n        if (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n            var timeUnit = this.baseInterval.timeUnit;\r\n            var count = this.baseInterval.count;\r\n            if (this._axisBreaks) {\r\n                this._axisBreaks.clear(); // TODO: what about breaks added by user?\r\n            }\r\n            var date = $time.round(new Date(this.min), timeUnit, count, this._firstWeekDay, this._df.utc);\r\n            var axisBreak = void 0;\r\n            var _loop_1 = function () {\r\n                $time.add(date, timeUnit, count, this_1._df.utc);\r\n                var startTime = date.getTime();\r\n                var startTimeStr = startTime.toString();\r\n                var hasData = $iter.contains(this_1.series.iterator(), function (series) {\r\n                    return !!series.dataItemsByAxis.getKey(_this.uid).getKey(startTimeStr + series.currentDataSetId);\r\n                });\r\n                // open break if not yet opened\r\n                if (!hasData) {\r\n                    if (!axisBreak) {\r\n                        axisBreak = this_1.axisBreaks.create();\r\n                        axisBreak.startDate = new Date(startTime);\r\n                        this_1._gapBreaks = true;\r\n                    }\r\n                }\r\n                else {\r\n                    // close if already opened\r\n                    if (axisBreak) {\r\n                        // close at end time minus one millisecond\r\n                        axisBreak.endDate = new Date(startTime - 1);\r\n                        axisBreak = undefined;\r\n                    }\r\n                }\r\n            };\r\n            var this_1 = this;\r\n            while (date.getTime() < this.max - this.baseDuration) {\r\n                _loop_1();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates positioning of Axis breaks after something changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    DateAxis.prototype.fixAxisBreaks = function () {\r\n        var _this = this;\r\n        _super.prototype.fixAxisBreaks.call(this);\r\n        var axisBreaks = this._axisBreaks;\r\n        if (axisBreaks) {\r\n            if (axisBreaks.length > 0) {\r\n                // process breaks\r\n                axisBreaks.each(function (axisBreak) {\r\n                    var breakGridCount = Math.ceil(_this._gridCount * (Math.min(_this.end, axisBreak.endPosition) - Math.max(_this.start, axisBreak.startPosition)) / (_this.end - _this.start));\r\n                    axisBreak.gridInterval = _this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n                    var gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, _this._firstWeekDay, _this._df.utc);\r\n                    if (gridDate.getTime() > axisBreak.startDate.getTime()) {\r\n                        $time.add(gridDate, axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, _this._df.utc);\r\n                    }\r\n                    axisBreak.gridDate = gridDate;\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    DateAxis.prototype.getFirstWeekDay = function () {\r\n        if (this._df) {\r\n            return this._df.firstDayOfWeek;\r\n        }\r\n        return 1;\r\n    };\r\n    /**\r\n     * [getGridDate description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param date           [description]\r\n     * @param intervalCount  [description]\r\n     * @return [description]\r\n     */\r\n    DateAxis.prototype.getGridDate = function (date, intervalCount) {\r\n        var timeUnit = this._gridInterval.timeUnit;\r\n        var realIntervalCount = this._gridInterval.count;\r\n        // round date\r\n        $time.round(date, timeUnit, 1, this._firstWeekDay, this._df.utc);\r\n        var prevTimestamp = date.getTime();\r\n        var newDate = $time.copy(date);\r\n        // modify date by adding intervalcount\r\n        var timestamp = $time.add(newDate, timeUnit, intervalCount, this._df.utc).getTime();\r\n        // if it's axis break, get first rounded date which is not in a break\r\n        var axisBreak = this.isInBreak(timestamp);\r\n        if (axisBreak && axisBreak.endDate) {\r\n            newDate = new Date(axisBreak.endDate.getTime());\r\n            $time.round(newDate, timeUnit, realIntervalCount, this._firstWeekDay, this._df.utc);\r\n            if (newDate.getTime() < axisBreak.endDate.getTime()) {\r\n                $time.add(newDate, timeUnit, realIntervalCount, this._df.utc);\r\n            }\r\n            timestamp = newDate.getTime();\r\n        }\r\n        // get duration between grid lines with break duration removed\r\n        var durationBreaksRemoved = this.adjustDifference(prevTimestamp, timestamp);\r\n        // calculate how many time units fit to this duration\r\n        var countBreaksRemoved = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n        // if less units fit, add one and repeat\r\n        if (countBreaksRemoved < realIntervalCount) {\r\n            return this.getGridDate(date, intervalCount + realIntervalCount);\r\n        }\r\n        return newDate;\r\n    };\r\n    /**\r\n     * [getBreaklessDate description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param axisBreak  [description]\r\n     * @param timeUnit   [description]\r\n     * @param count      [description]\r\n     * @return [description]\r\n     */\r\n    DateAxis.prototype.getBreaklessDate = function (axisBreak, timeUnit, count) {\r\n        var date = new Date(axisBreak.endValue);\r\n        $time.round(date, timeUnit, count, this._firstWeekDay, this._df.utc);\r\n        $time.add(date, timeUnit, count, this._df.utc);\r\n        var timestamp = date.getTime();\r\n        axisBreak = this.isInBreak(timestamp);\r\n        if (axisBreak) {\r\n            return this.getBreaklessDate(axisBreak, timeUnit, count);\r\n        }\r\n        return date;\r\n    };\r\n    /**\r\n     * (Re)validates all Axis elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     */\r\n    DateAxis.prototype.validateAxisElements = function () {\r\n        var _this = this;\r\n        if ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n            this.calculateZoom();\r\n            // first regular items\r\n            var timestamp = this._gridDate.getTime();\r\n            var timeUnit = this._gridInterval.timeUnit;\r\n            var intervalCount = this._gridInterval.count;\r\n            var prevGridDate = $time.copy(this._gridDate);\r\n            var dataItemsIterator_1 = this._dataItemsIterator;\r\n            this.resetIterators();\r\n            var _loop_2 = function () {\r\n                var date = this_2.getGridDate($time.copy(prevGridDate), intervalCount);\r\n                timestamp = date.getTime();\r\n                var endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n                endDate = $time.add(endDate, timeUnit, intervalCount, this_2._df.utc);\r\n                var format = this_2.dateFormats.getKey(timeUnit);\r\n                if (this_2.markUnitChange && prevGridDate) {\r\n                    if ($time.checkChange(date, prevGridDate, this_2._nextGridUnit, this_2._df.utc)) {\r\n                        if (timeUnit !== \"year\") {\r\n                            format = this_2.periodChangeDateFormats.getKey(timeUnit);\r\n                        }\r\n                    }\r\n                }\r\n                var text = this_2._df.format(date, format);\r\n                var dataItem = dataItemsIterator_1.find(function (x) { return x.text === text; });\r\n                if (dataItem.__disabled) {\r\n                    dataItem.__disabled = false;\r\n                }\r\n                this_2.appendDataItem(dataItem);\r\n                dataItem.axisBreak = undefined;\r\n                dataItem.date = date;\r\n                dataItem.endDate = endDate;\r\n                dataItem.text = text;\r\n                this_2.validateDataElement(dataItem);\r\n                prevGridDate = date;\r\n            };\r\n            var this_2 = this;\r\n            while (timestamp <= this._maxZoomed) {\r\n                _loop_2();\r\n            }\r\n            // breaks later\r\n            var renderer_1 = this.renderer;\r\n            if (this._axisBreaks) {\r\n                $iter.each(this._axisBreaks.iterator(), function (axisBreak) {\r\n                    if (axisBreak.breakSize > 0) {\r\n                        var timeUnit_1 = axisBreak.gridInterval.timeUnit;\r\n                        var intervalCount_1 = axisBreak.gridInterval.count;\r\n                        // only add grid if gap is bigger then minGridDistance\r\n                        if ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer_1.minGridDistance * 4) {\r\n                            var timestamp_1 = axisBreak.gridDate.getTime();\r\n                            var prevGridDate_1;\r\n                            var count = 0;\r\n                            var _loop_3 = function () {\r\n                                var date = $time.copy(axisBreak.gridDate);\r\n                                timestamp_1 = $time.add(date, timeUnit_1, intervalCount_1 * count, _this._df.utc).getTime();\r\n                                count++;\r\n                                if (timestamp_1 > axisBreak.adjustedStartValue && timestamp_1 < axisBreak.adjustedEndValue) {\r\n                                    var endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n                                    endDate = $time.add(endDate, timeUnit_1, intervalCount_1, _this._df.utc);\r\n                                    var format = _this.dateFormats.getKey(timeUnit_1);\r\n                                    if (_this.markUnitChange && prevGridDate_1) {\r\n                                        if ($time.checkChange(date, prevGridDate_1, _this._nextGridUnit, _this._df.utc)) {\r\n                                            if (timeUnit_1 !== \"year\") {\r\n                                                format = _this.periodChangeDateFormats.getKey(timeUnit_1);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    var text_1 = _this._df.format(date, format);\r\n                                    var dataItem = dataItemsIterator_1.find(function (x) { return x.text === text_1; });\r\n                                    if (dataItem.__disabled) {\r\n                                        dataItem.__disabled = false;\r\n                                    }\r\n                                    //this.processDataItem(dataItem);\r\n                                    _this.appendDataItem(dataItem);\r\n                                    dataItem.axisBreak = axisBreak;\r\n                                    axisBreak.dataItems.moveValue(dataItem);\r\n                                    dataItem.date = date;\r\n                                    dataItem.endDate = endDate;\r\n                                    dataItem.text = text_1;\r\n                                    prevGridDate_1 = date;\r\n                                    _this.validateDataElement(dataItem);\r\n                                }\r\n                            };\r\n                            while (timestamp_1 <= axisBreak.adjustedMax) {\r\n                                _loop_3();\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates Axis data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem Data item\r\n     */\r\n    DateAxis.prototype.validateDataElement = function (dataItem) {\r\n        dataItem.itemIndex = this._axisItemCount;\r\n        this._axisItemCount++;\r\n        if ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n            var renderer = this.renderer;\r\n            var timestamp = dataItem.value;\r\n            var endTimestamp = dataItem.endValue;\r\n            if (!$type.isNumber(endTimestamp)) {\r\n                endTimestamp = timestamp;\r\n            }\r\n            var position = this.valueToPosition(timestamp);\r\n            var endPosition = this.valueToPosition(endTimestamp);\r\n            var fillEndPosition = endPosition;\r\n            if (!dataItem.isRange && this._gridInterval.count > this.baseInterval.count) {\r\n                endPosition = position + (endPosition - position) / (this._gridInterval.count / this.baseInterval.count);\r\n            }\r\n            dataItem.position = position;\r\n            var tick = dataItem.tick;\r\n            if (tick && !tick.disabled) {\r\n                renderer.updateTickElement(tick, position, endPosition);\r\n            }\r\n            var grid = dataItem.grid;\r\n            if (grid && !grid.disabled) {\r\n                renderer.updateGridElement(grid, position, endPosition);\r\n            }\r\n            var fill = dataItem.axisFill;\r\n            if (fill && !fill.disabled) {\r\n                renderer.updateFillElement(fill, position, fillEndPosition);\r\n                if (!dataItem.isRange) {\r\n                    this.fillRule(dataItem);\r\n                }\r\n            }\r\n            var mask = dataItem.mask;\r\n            if (mask) {\r\n                renderer.updateFillElement(mask, position, endPosition);\r\n            }\r\n            if (dataItem.bullet) {\r\n                renderer.updateBullet(dataItem.bullet, position, endPosition);\r\n            }\r\n            var label = dataItem.label;\r\n            if (label && !label.disabled) {\r\n                var location_1 = label.location;\r\n                if (location_1 == 0) {\r\n                    if (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n                        location_1 = 0.5;\r\n                    }\r\n                    else {\r\n                        location_1 = 0;\r\n                    }\r\n                }\r\n                renderer.updateLabelElement(label, position, endPosition, location_1);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(DateAxis.prototype, \"baseDuration\", {\r\n        /**\r\n         * A duration in milliseconds of the `baseInterval`.\r\n         *\r\n         * @return Duration (ms)\r\n         */\r\n        get: function () {\r\n            return $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adjusts min/max values.\r\n     *\r\n     * @ignore Exclude from docs.\r\n     * @todo Description (review)\r\n     * @param min  Min timestamp\r\n     * @param max  Max timestamp\r\n     * @return Adjusted min/max step\r\n     */\r\n    DateAxis.prototype.adjustMinMax = function (min, max) {\r\n        return { min: min, max: max, step: this.baseDuration };\r\n    };\r\n    /**\r\n     * Adjusts the minimum timestamp as per cell start location.\r\n     *\r\n     * @param value  Value\r\n     * @return Adjusted value\r\n     */\r\n    DateAxis.prototype.fixMin = function (value) {\r\n        // like this because months are not equal\r\n        var interval = this.baseInterval;\r\n        var startTime = $time.round(new Date(value), interval.timeUnit, interval.count, this._firstWeekDay, this._df.utc).getTime();\r\n        var endTime = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc).getTime();\r\n        return startTime + (endTime - startTime) * this.startLocation;\r\n    };\r\n    /**\r\n     * Adjusts the maximum timestamp as per cell start location.\r\n     *\r\n     * @param value  Value\r\n     * @return Adjusted value\r\n     */\r\n    DateAxis.prototype.fixMax = function (value) {\r\n        // like this because months are not equal\r\n        var interval = this.baseInterval;\r\n        var startTime = $time.round(new Date(value), interval.timeUnit, interval.count, this._firstWeekDay, this._df.utc).getTime();\r\n        var endTime = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc).getTime();\r\n        return startTime + (endTime - startTime) * this.endLocation;\r\n    };\r\n    /**\r\n     * [chooseInterval description]\r\n     *\r\n     * @ignore Exclude from docs.\r\n     * @todo Description\r\n     * @param index      [description]\r\n     * @param duration   [description]\r\n     * @param gridCount  [description]\r\n     * @return [description]\r\n     */\r\n    DateAxis.prototype.chooseInterval = function (index, duration, gridCount, intervals) {\r\n        if (!intervals) {\r\n            intervals = this.gridIntervals;\r\n        }\r\n        var gridInterval = intervals.getIndex(index);\r\n        var intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n        var lastIndex = intervals.length - 1;\r\n        if (index >= lastIndex) {\r\n            return __assign({}, intervals.getIndex(lastIndex));\r\n        }\r\n        var count = Math.ceil(duration / intervalDuration);\r\n        if (duration < intervalDuration && index > 0) {\r\n            return __assign({}, intervals.getIndex(index - 1));\r\n        }\r\n        if (count <= gridCount) {\r\n            return __assign({}, intervals.getIndex(index));\r\n        }\r\n        else {\r\n            if (index + 1 < intervals.length) {\r\n                return this.chooseInterval(index + 1, duration, gridCount, intervals);\r\n            }\r\n            else {\r\n                return __assign({}, intervals.getIndex(index));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Formats the value according to axis' own [[DateFormatter]].\r\n     *\r\n     * @param value  Source value\r\n     * @return Formatted value\r\n     */\r\n    DateAxis.prototype.formatLabel = function (value) {\r\n        return this._df.format(value);\r\n    };\r\n    /**\r\n     * Converts a Date to an asbolute pixel position within Axis.\r\n     *\r\n     * @param date  Date\r\n     * @return Position (px)\r\n     */\r\n    DateAxis.prototype.dateToPosition = function (date) {\r\n        return this.valueToPosition(date.getTime());\r\n    };\r\n    /**\r\n     * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n     *\r\n     * @param date  Date or a timestamp\r\n     * @return Relative position\r\n     */\r\n    DateAxis.prototype.anyToPosition = function (date) {\r\n        if (date instanceof Date) {\r\n            return this.dateToPosition(date);\r\n        }\r\n        else {\r\n            return this.valueToPosition(date);\r\n        }\r\n    };\r\n    /**\r\n     * Converts date to orientation point (x, y, angle) on axis\r\n     *\r\n     * @param date Date\r\n     * @return IOrientationPoint\r\n     */\r\n    DateAxis.prototype.dateToPoint = function (date) {\r\n        var position = this.dateToPosition(date);\r\n        var point = this.renderer.positionToPoint(position);\r\n        var angle = this.renderer.positionToAngle(position);\r\n        return { x: point.x, y: point.y, angle: angle };\r\n    };\r\n    /**\r\n     * Converts a numeric value to orientation (x, y, angle) point on axis\r\n     *\r\n     * @param value  Value\r\n     * @return Orientation point\r\n     */\r\n    DateAxis.prototype.anyToPoint = function (date) {\r\n        if (date instanceof Date) {\r\n            return this.dateToPoint(date);\r\n        }\r\n        else {\r\n            return this.valueToPoint(date);\r\n        }\r\n    };\r\n    /**\r\n     * Converts pixel position within Axis to a corresponding Date.\r\n     *\r\n     * @param position  Position (px)\r\n     * @return Date\r\n     */\r\n    DateAxis.prototype.positionToDate = function (position) {\r\n        return new Date(this.positionToValue(position));\r\n    };\r\n    /**\r\n     * Returns the relative position on axis for series' data item's value.\r\n     *\r\n     * @since 4.5.14\r\n     * @param  dataItem  Data item\r\n     * @param  key       Data field to get value from\r\n     * @param  location  Location (0-1)\r\n     * @return           Relative position\r\n     */\r\n    DateAxis.prototype.getPositionX = function (dataItem, key, location, stackKey, range) {\r\n        var value = this.getTimeByLocation(dataItem, key, location);\r\n        //let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n        }\r\n        var position = this.valueToPosition(value);\r\n        if (range) {\r\n            position = $math.fitToRange(position, range.start, range.end);\r\n        }\r\n        return position;\r\n    };\r\n    /**\r\n     * Returns relative position on axis for series' data item's value.\r\n     *\r\n     * @since 4.5.14\r\n     * @param  dataItem  Data item\r\n     * @param  key       Data field to get value from\r\n     * @param  location  Location (0-1)\r\n     * @return           Relative position\r\n     */\r\n    DateAxis.prototype.getPositionY = function (dataItem, key, location, stackKey, range) {\r\n        var value = this.getTimeByLocation(dataItem, key, location);\r\n        var stack = dataItem.getValue(\"valueX\", \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n        }\r\n        var position = this.valueToPosition(value + stack);\r\n        if (range) {\r\n            position = $math.fitToRange(position, range.start, range.end);\r\n        }\r\n        return position;\r\n    };\r\n    /**\r\n     * Returns an angle for series data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param dataItem  Data item\r\n     * @param key       Data field to get value from\r\n     * @param location  Location (0-1)\r\n     * @param stackKey  Stack ID\r\n     * @param range Range to fit in\r\n     * @return Angle\r\n     */\r\n    DateAxis.prototype.getAngle = function (dataItem, key, location, stackKey, range) {\r\n        var value = this.getTimeByLocation(dataItem, key, location);\r\n        var stack = dataItem.getValue(stackKey, \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n        }\r\n        var position = this.valueToPosition(value + stack);\r\n        if (range) {\r\n            position = $math.fitToRange(position, range.start, range.end);\r\n        }\r\n        return this.positionToAngle(position);\r\n    };\r\n    /**\r\n     * [getTimeByLocation description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param dataItem  [description]\r\n     * @param key       [description]\r\n     * @param location  [description]\r\n     * @return [description]\r\n     */\r\n    DateAxis.prototype.getTimeByLocation = function (dataItem, key, location) {\r\n        if (!$type.hasValue(key)) {\r\n            return;\r\n        }\r\n        if (!$type.isNumber(location)) {\r\n            location = dataItem.workingLocations[key];\r\n            if (!$type.isNumber(location)) {\r\n                location = 0;\r\n            }\r\n        }\r\n        var startTime = dataItem.values[key][\"open\"];\r\n        var endTime = dataItem.values[key][\"close\"];\r\n        var workingValue = dataItem.values[key].workingValue;\r\n        var value = dataItem.values[key].value;\r\n        var difference = value - workingValue;\r\n        startTime -= difference;\r\n        endTime -= difference;\r\n        if ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n            return startTime + (endTime - startTime) * location;\r\n        }\r\n    };\r\n    /**\r\n     * Processes a related series' data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param dataItem  Data item\r\n     */\r\n    DateAxis.prototype.processSeriesDataItem = function (dataItem, axisLetter) {\r\n        var series = dataItem.component;\r\n        var time;\r\n        var date = dataItem[\"date\" + axisLetter];\r\n        if ($type.isNumber(this.timezoneOffset)) {\r\n            date.setTime(date.getTime() + (date.getTimezoneOffset() - this.timezoneOffset) * 60000);\r\n            dataItem.setValue(\"date\" + axisLetter, date.getTime(), 0);\r\n        }\r\n        if (date) {\r\n            time = date.getTime();\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n        var openDate = dataItem[\"openDate\" + axisLetter];\r\n        var prevSeriesTime = this._prevSeriesTime[series.uid];\r\n        var openTime;\r\n        if (openDate) {\r\n            openTime = openDate.getTime();\r\n        }\r\n        if ($type.isNumber(openTime)) {\r\n            var difference = Math.abs(time - openTime);\r\n            if (this._minDifference[series.uid] > difference) {\r\n                this._minDifference[series.uid] = difference;\r\n            }\r\n        }\r\n        var differece = time - prevSeriesTime;\r\n        if (differece > 0) {\r\n            if (this._minDifference[series.uid] > differece) {\r\n                this._minDifference[series.uid] = differece;\r\n            }\r\n        }\r\n        this._prevSeriesTime[series.uid] = time;\r\n        if (series._baseInterval[this.uid]) {\r\n            this.postProcessSeriesDataItem(dataItem);\r\n        }\r\n    };\r\n    /**\r\n     * [updateAxisBySeries description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    DateAxis.prototype.updateAxisBySeries = function () {\r\n        _super.prototype.updateAxisBySeries.call(this);\r\n        var baseInterval = this.chooseInterval(0, this.minDifference, 1);\r\n        // handle short months\r\n        if (this.minDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n            baseInterval.timeUnit = \"month\";\r\n            baseInterval.count = 1;\r\n        }\r\n        if (baseInterval.timeUnit == \"month\") {\r\n            if (this.minDifference >= $time.getDuration(\"day\", 29 * 2) && baseInterval.count == 1) {\r\n                baseInterval.count = 2;\r\n            }\r\n            if (this.minDifference >= $time.getDuration(\"day\", 29 * 3) && baseInterval.count == 2) {\r\n                baseInterval.count = 3;\r\n            }\r\n            if (this.minDifference >= $time.getDuration(\"day\", 29 * 6) && baseInterval.count == 5) {\r\n                baseInterval.count = 6;\r\n            }\r\n        }\r\n        // handle daylight saving\r\n        if (this.minDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n            baseInterval.timeUnit = \"day\";\r\n            baseInterval.count = 1;\r\n        }\r\n        if (this.minDifference >= $time.getDuration(\"week\", 1) - $time.getDuration(\"hour\", 1) && baseInterval.timeUnit == \"day\") {\r\n            baseInterval.timeUnit = \"week\";\r\n            baseInterval.count = 1;\r\n        }\r\n        if (this.minDifference >= $time.getDuration(\"year\", 1) - $time.getDuration(\"day\", 1.01) && baseInterval.timeUnit == \"month\") {\r\n            baseInterval.timeUnit = \"year\";\r\n            baseInterval.count = 1;\r\n        }\r\n        this._baseIntervalReal = baseInterval;\r\n        this._mainBaseInterval = baseInterval;\r\n        // no need to invalidate\r\n    };\r\n    Object.defineProperty(DateAxis.prototype, \"baseInterval\", {\r\n        /**\r\n         * @return Base interval\r\n         */\r\n        get: function () {\r\n            if (this._groupInterval) {\r\n                return this._groupInterval;\r\n            }\r\n            else if (this._baseInterval) {\r\n                return this._baseInterval;\r\n            }\r\n            else {\r\n                return this._baseIntervalReal;\r\n            }\r\n        },\r\n        /**\r\n         * A base interval (granularity) of data.\r\n         *\r\n         * Used to indicate what are the base units of your data.\r\n         *\r\n         * For example, if you have a data set that has a data point every 5 minutes,\r\n         * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n         *\r\n         * If not set, the Axis will try to determine the setting by its own, looking\r\n         * at actual data.\r\n         *\r\n         * For best results, try to follow these values for `count`:\r\n         *\r\n         * When unit is \"month\", use 12 / count = round number\r\n         * When unit is \"hour\", use 24 / count = round number\r\n         * When unit is \"second\" and \"minute\", use 60 / count = round number\r\n         *\r\n         * @param timeInterval base interval\r\n         */\r\n        set: function (timeInterval) {\r\n            if (JSON.stringify(this._baseInterval) != JSON.stringify(timeInterval)) {\r\n                this._baseInterval = timeInterval;\r\n                this._mainBaseInterval = timeInterval;\r\n                if (!$type.isNumber(timeInterval.count)) {\r\n                    timeInterval.count = 1;\r\n                }\r\n                this.invalidate();\r\n                this.postProcessSeriesDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxis.prototype, \"mainBaseInterval\", {\r\n        /**\r\n         * Indicates granularity of the data of source (unaggregated) data.\r\n         *\r\n         * @since 4.7.0\r\n         * @return Granularity of the main data set\r\n         */\r\n        get: function () {\r\n            if (this._baseInterval) {\r\n                return this._baseInterval;\r\n            }\r\n            else if (this._mainBaseInterval) {\r\n                return this._mainBaseInterval;\r\n            }\r\n            else {\r\n                return this._baseIntervalReal;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxis.prototype, \"skipEmptyPeriods\", {\r\n        /**\r\n         * @return Remove empty stretches of time?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"skipEmptyPeriods\");\r\n        },\r\n        /**\r\n         * If enabled, axis will automatically collapse empty (without data points)\r\n         * periods of time, i.e. weekends.\r\n         *\r\n         * An \"empty\" period is considered a stretch of time in the length of current\r\n         * `baseInterval` without a single data point in it.\r\n         *\r\n         * For each such empty period, axis will automatically create an\r\n         * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n         * them by accessing `axis.breaks.template`.\r\n         *\r\n         * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n         *\r\n         * Important notes:\r\n         * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n         * * Using this feature affects performance. Use only if you need it.\r\n         * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n         * * Some axis label overlapping might happen.\r\n         * * This setting is not compatible with `groupData = true`.\r\n         *\r\n         * @default false\r\n         * @param value  Remove empty stretches of time?\r\n         */\r\n        set: function (value) {\r\n            if (value) {\r\n                var breakTemplate = this.axisBreaks.template;\r\n                breakTemplate.startLine.disabled = true;\r\n                breakTemplate.endLine.disabled = true;\r\n                breakTemplate.fillShape.disabled = true;\r\n                breakTemplate.breakSize = 0;\r\n            }\r\n            else {\r\n                if (this._gapBreaks) {\r\n                    this.axisBreaks.clear();\r\n                    this._gapBreaks = false;\r\n                }\r\n            }\r\n            if (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n                this.invalidate();\r\n                this.postProcessSeriesDataItems();\r\n                this.invalidateSeries();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxis.prototype, \"tooltipDateFormat\", {\r\n        /**\r\n         * @return Date format\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tooltipDateFormat\");\r\n        },\r\n        /**\r\n         * A special date format to apply axis tooltips.\r\n         *\r\n         * Will use same format as for labels, if not set.\r\n         *\r\n         * @param value  Date format\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tooltipDateFormat\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxis.prototype, \"markUnitChange\", {\r\n        /**\r\n         * @return Use different format for period beginning?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"markUnitChange\");\r\n        },\r\n        /**\r\n         * Use `periodChangeDateFormats` to apply different formats to the first\r\n         * label in bigger time unit.\r\n         *\r\n         * @default true\r\n         * @param value  Use different format for period beginning?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"markUnitChange\", value)) {\r\n                this.invalidateData();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns text to show in a tooltip, based on specific relative position\r\n     * within axis.\r\n     *\r\n     * The label will be formatted as per [[DateFormatter]] set for the whole\r\n     * chart, or explicitly for this Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position  Position\r\n     * @return Label (formatted date)\r\n     */\r\n    DateAxis.prototype.getTooltipText = function (position) {\r\n        var text;\r\n        var date = this.positionToDate(position);\r\n        date = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count, this._firstWeekDay, this._df.utc, new Date(this.min));\r\n        this.tooltipDate = date;\r\n        if ($type.hasValue(this.tooltipDateFormat)) {\r\n            text = this._df.format(date, this.tooltipDateFormat);\r\n        }\r\n        else {\r\n            var dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n            if (dateFormat) {\r\n                text = this._df.format(date, dateFormat);\r\n            }\r\n            else {\r\n                text = this.getPositionLabel(position);\r\n            }\r\n        }\r\n        if (!this._adapterO) {\r\n            return text;\r\n        }\r\n        else {\r\n            return this._adapterO.apply(\"getTooltipText\", text);\r\n        }\r\n    };\r\n    /**\r\n     * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position Source position\r\n     * @param location  Location in the cell\r\n     * @return Adjusted position\r\n     */\r\n    DateAxis.prototype.roundPosition = function (position, location, axisLocation) {\r\n        var baseInterval = this.baseInterval;\r\n        var timeUnit = baseInterval.timeUnit;\r\n        var count = baseInterval.count;\r\n        var date = this.positionToDate(position);\r\n        $time.round(date, timeUnit, count, this._firstWeekDay, this._df.utc);\r\n        if (location > 0) {\r\n            $time.add(date, timeUnit, location * count, this._df.utc);\r\n        }\r\n        if (axisLocation > 0 && axisLocation < 1) {\r\n            date.setTime(date.getTime() + this.baseDuration * axisLocation);\r\n        }\r\n        if (this.isInBreak(date.getTime())) {\r\n            while (date.getTime() < this.max) {\r\n                $time.add(date, timeUnit, count, this._df.utc);\r\n                if (!this.isInBreak(date.getTime())) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return this.dateToPosition(date);\r\n    };\r\n    /**\r\n     * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param position  Relative position\r\n     * @return Cell start relative position\r\n     */\r\n    DateAxis.prototype.getCellStartPosition = function (position) {\r\n        return this.roundPosition(position, 0);\r\n    };\r\n    /**\r\n     * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param position  Relative position\r\n     * @return Cell end relative position\r\n     */\r\n    DateAxis.prototype.getCellEndPosition = function (position) {\r\n        return this.roundPosition(position, 1);\r\n        //return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n    };\r\n    /**\r\n     * Returns a Series data item that corresponds to the specific pixel position\r\n     * of the Axis.\r\n     *\r\n     * If `findNearest` (third parameter) is set to `true`, the method will try\r\n     * to locate nearest available data item if none is found directly under\r\n     * `position`.\r\n     *\r\n     * @param series       Series\r\n     * @param position     Position (px)\r\n     * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n     * @return Data item\r\n     */\r\n    DateAxis.prototype.getSeriesDataItem = function (series, position, findNearest) {\r\n        var value = this.positionToValue(position);\r\n        var date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this._firstWeekDay, this._df.utc);\r\n        var dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n        var dataItem = dataItemsByAxis.getKey(date.getTime().toString());\r\n        // todo:  alternatively we can find closiest here\r\n        if (!dataItem && findNearest) {\r\n            var key_1;\r\n            if (this.axisLetter == \"Y\") {\r\n                key_1 = \"dateY\";\r\n            }\r\n            else {\r\n                key_1 = \"dateX\";\r\n            }\r\n            dataItem = series.dataItems.getIndex(series.dataItems.findClosestIndex(date.getTime(), function (x) {\r\n                if (x[key_1]) {\r\n                    return x[key_1].getTime();\r\n                }\r\n                else {\r\n                    return -Infinity;\r\n                }\r\n            }, \"any\"));\r\n        }\r\n        return dataItem;\r\n    };\r\n    /**\r\n     * Returns a formatted date based on position in axis scale.\r\n     *\r\n     * Please note that `position` represents position within axis which may be\r\n     * zoomed and not correspond to Cursor's `position`.\r\n     *\r\n     * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n     * @param position  Relative position on axis (0-1)\r\n     * @return Position label\r\n     */\r\n    DateAxis.prototype.getPositionLabel = function (position) {\r\n        // @todo Better format recognition\r\n        var date = this.positionToDate(position);\r\n        return this._df.format(date, this.getCurrentLabelFormat());\r\n    };\r\n    /**\r\n     * Returns label date format based on currently used time units\r\n     *\r\n     * @return Format\r\n     */\r\n    DateAxis.prototype.getCurrentLabelFormat = function () {\r\n        return this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n    };\r\n    /**\r\n     * Initializes an Axis renderer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    DateAxis.prototype.initRenderer = function () {\r\n        _super.prototype.initRenderer.call(this);\r\n        var renderer = this.renderer;\r\n        if (renderer) {\r\n            // Set defaults\r\n            renderer.ticks.template.location = 0;\r\n            renderer.grid.template.location = 0;\r\n            renderer.labels.template.location = 0;\r\n            renderer.baseGrid.disabled = true;\r\n        }\r\n    };\r\n    Object.defineProperty(DateAxis.prototype, \"basePoint\", {\r\n        /**\r\n         * Coordinates of the actual axis start.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Base point\r\n         */\r\n        get: function () {\r\n            return { x: 0, y: 0 };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    DateAxis.prototype.animateMinMax = function (min, max) {\r\n        var _this = this;\r\n        var animation = this.animate([{ property: \"_minAdjusted\", from: this._minAdjusted, to: min }, { property: \"_maxAdjusted\", from: this._maxAdjusted, to: max }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n        animation.events.on(\"animationprogress\", function () {\r\n            _this.dispatch(\"extremeschanged\");\r\n        });\r\n        return animation;\r\n    };\r\n    /**\r\n     * Invalidates axis data items when series extremes change\r\n     */\r\n    DateAxis.prototype.handleExtremesChange = function () {\r\n        _super.prototype.handleExtremesChange.call(this);\r\n        if (this.groupData) {\r\n            var id = this.baseInterval.timeUnit + this.baseInterval.count;\r\n            this.groupMin[id] = this._finalMin;\r\n            this.groupMax[id] = this._finalMax;\r\n        }\r\n    };\r\n    /**\r\n     * Zooms axis to specific Dates.\r\n     *\r\n     * @param startDate       Start date\r\n     * @param endValue        End date\r\n     * @param skipRangeEvent  Do not invoke events\r\n     * @param instantly       Do not play zoom animations\r\n     */\r\n    DateAxis.prototype.zoomToDates = function (startDate, endDate, skipRangeEvent, instantly, adjust) {\r\n        startDate = this._df.parse(startDate);\r\n        endDate = this._df.parse(endDate);\r\n        this.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly, adjust);\r\n    };\r\n    /**\r\n     * Zooms axis to specific values.\r\n     *\r\n     * @param startValue      Start value\r\n     * @param endValue        End value\r\n     * @param skipRangeEvent  Do not invoke events\r\n     * @param instantly       Do not play zoom animations\r\n     */\r\n    DateAxis.prototype.zoomToValues = function (startValue, endValue, skipRangeEvent, instantly, adjust) {\r\n        var _this = this;\r\n        if (!this.groupData) {\r\n            var start = (startValue - this.min) / (this.max - this.min);\r\n            var end = (endValue - this.min) / (this.max - this.min);\r\n            this.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n        }\r\n        else {\r\n            var difference = this.adjustDifference(startValue, endValue);\r\n            var isEnd = false;\r\n            if (endValue == this.max) {\r\n                isEnd = true;\r\n            }\r\n            var isStart = false;\r\n            if (startValue == this.min) {\r\n                isStart = true;\r\n            }\r\n            if ($type.hasValue(difference)) {\r\n                var mainBaseInterval = this.mainBaseInterval;\r\n                var groupInterval_1 = this.chooseInterval(0, difference, this.groupCount, this.groupIntervals);\r\n                if ((groupInterval_1.timeUnit == mainBaseInterval.timeUnit && groupInterval_1.count < mainBaseInterval.count) || $time.getDuration(groupInterval_1.timeUnit, 1) < $time.getDuration(mainBaseInterval.timeUnit, 1)) {\r\n                    groupInterval_1 = __assign({}, mainBaseInterval);\r\n                }\r\n                var id = groupInterval_1.timeUnit + groupInterval_1.count;\r\n                var min_1 = this.groupMin[id];\r\n                var max_1 = this.groupMax[id];\r\n                if (!$type.isNumber(min_1) || !$type.isNumber(max_1)) {\r\n                    min_1 = Number.POSITIVE_INFINITY;\r\n                    max_1 = Number.NEGATIVE_INFINITY;\r\n                    this.series.each(function (series) {\r\n                        var seriesMin = series.min(_this);\r\n                        var seriesMax = series.max(_this);\r\n                        if (series._dataSets) {\r\n                            var ds = series._dataSets.getKey(groupInterval_1.timeUnit + groupInterval_1.count);\r\n                            if (ds) {\r\n                                var mindi = ds.getIndex(0);\r\n                                var maxdi = ds.getIndex(ds.length - 1);\r\n                                if (mindi) {\r\n                                    if (series.xAxis == _this) {\r\n                                        seriesMin = mindi.dateX.getTime();\r\n                                    }\r\n                                    else if (series.yAxis == _this) {\r\n                                        seriesMin = mindi.dateY.getTime();\r\n                                    }\r\n                                }\r\n                                if (maxdi) {\r\n                                    if (series.xAxis == _this) {\r\n                                        seriesMax = maxdi.dateX.getTime();\r\n                                    }\r\n                                    else if (series.yAxis == _this) {\r\n                                        seriesMax = maxdi.dateY.getTime();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        seriesMax = $time.round($time.add(new Date(seriesMax), groupInterval_1.timeUnit, 1, _this._df.utc), groupInterval_1.timeUnit, 1, _this._df.firstDayOfWeek, _this._df.utc).getTime();\r\n                        if (seriesMin < min_1) {\r\n                            min_1 = seriesMin;\r\n                        }\r\n                        if (seriesMax > max_1) {\r\n                            max_1 = seriesMax;\r\n                        }\r\n                    });\r\n                    this.groupMin[id] = min_1;\r\n                    this.groupMax[id] = max_1;\r\n                }\r\n                startValue = $math.fitToRange(startValue, min_1, max_1);\r\n                endValue = $math.fitToRange(endValue, min_1, max_1);\r\n                if (adjust) {\r\n                    if (isEnd) {\r\n                        startValue = endValue - difference;\r\n                        startValue = $math.fitToRange(startValue, min_1, max_1);\r\n                    }\r\n                    if (isStart) {\r\n                        endValue = startValue + difference;\r\n                        endValue = $math.fitToRange(endValue, min_1, max_1);\r\n                    }\r\n                }\r\n                var start = (startValue - min_1) / (max_1 - min_1);\r\n                var end = (endValue - min_1) / (max_1 - min_1);\r\n                this.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Adds `baseInterval` to \"as is\" fields.\r\n     *\r\n     * @param field  Field name\r\n     * @return Assign as is?\r\n     */\r\n    DateAxis.prototype.asIs = function (field) {\r\n        return field == \"baseInterval\" || _super.prototype.asIs.call(this, field);\r\n    };\r\n    /**\r\n     * Copies all properties and related data from a different instance of Axis.\r\n     *\r\n     * @param source Source Axis\r\n     */\r\n    DateAxis.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.dateFormats = source.dateFormats;\r\n        this.periodChangeDateFormats = source.periodChangeDateFormats;\r\n        this.groupIntervals.clear();\r\n        source.groupIntervals.each(function (interval) {\r\n            _this.groupIntervals.push(__assign({}, interval));\r\n        });\r\n        this.gridIntervals.clear();\r\n        source.gridIntervals.each(function (interval) {\r\n            _this.gridIntervals.push(__assign({}, interval));\r\n        });\r\n        if (source._baseInterval) {\r\n            this.baseInterval = source._baseInterval;\r\n        }\r\n    };\r\n    /**\r\n     * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n     *\r\n     * @param position Position (0-1)\r\n     * @param local or global position\r\n     */\r\n    DateAxis.prototype.showTooltipAtPosition = function (position, local) {\r\n        var _this = this;\r\n        if (!local) {\r\n            position = this.toAxisPosition(position);\r\n        }\r\n        if (this.snapTooltip) {\r\n            // rounding is not good, pen/aac4e7f66f019d36b2447f050c600c13 (no last tootltip shown)\r\n            var actualDate = this.positionToDate(position); //$time.round(this.positionToDate(position), this.baseInterval.timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n            var actualTime_1 = actualDate.getTime();\r\n            var closestDate_1;\r\n            this.series.each(function (series) {\r\n                if (series.baseAxis == _this) {\r\n                    var dataItem = _this.getSeriesDataItem(series, position, true);\r\n                    if (dataItem) {\r\n                        var date = void 0;\r\n                        if (series.xAxis == _this) {\r\n                            date = dataItem.dateX;\r\n                        }\r\n                        if (series.yAxis == _this) {\r\n                            date = dataItem.dateY;\r\n                        }\r\n                        if (!closestDate_1) {\r\n                            closestDate_1 = date;\r\n                        }\r\n                        else {\r\n                            if (Math.abs(closestDate_1.getTime() - actualTime_1) > Math.abs(date.getTime() - actualTime_1)) {\r\n                                closestDate_1 = date;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            if (closestDate_1) {\r\n                var closestTime_1 = closestDate_1.getTime();\r\n                closestDate_1 = $time.round(new Date(closestTime_1), this.baseInterval.timeUnit, this.baseInterval.count, this._firstWeekDay, this._df.utc);\r\n                closestTime_1 = closestDate_1.getTime();\r\n                var tooltipLocation = this.renderer.tooltipLocation;\r\n                if (tooltipLocation == 0) {\r\n                    tooltipLocation = 0.0001;\r\n                }\r\n                closestDate_1 = new Date(closestDate_1.getTime() + this.baseDuration * tooltipLocation);\r\n                position = this.dateToPosition(closestDate_1);\r\n                if (this.chart.cursor && this.chart.cursor.snapToSeries) {\r\n                    //void\r\n                }\r\n                else {\r\n                    this.series.each(function (series) {\r\n                        var dataItem = series.dataItemsByAxis.getKey(_this.uid).getKey(closestTime_1 + series.currentDataSetId);\r\n                        var point = series.showTooltipAtDataItem(dataItem);\r\n                        if (point) {\r\n                            _this.chart._seriesPoints.push({ series: series, point: point });\r\n                        }\r\n                        else {\r\n                            // check, otherwise column tooltip will be hidden\r\n                            if (series.tooltipText || series.tooltipHTML) {\r\n                                series.hideTooltip();\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                //this.chart.sortSeriesTooltips(seriesPoints);\r\n            }\r\n        }\r\n        _super.prototype.showTooltipAtPosition.call(this, position, true);\r\n    };\r\n    Object.defineProperty(DateAxis.prototype, \"snapTooltip\", {\r\n        /**\r\n         * @return Should snap?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"snapTooltip\");\r\n        },\r\n        /**\r\n         * Should the nearest tooltip be shown if no data item is found on the\r\n         * current cursor position.\r\n         *\r\n         * @default true\r\n         * @param value  Should snap?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"snapTooltip\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxis.prototype, \"groupData\", {\r\n        /**\r\n         * @return Group data points?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"groupData\");\r\n        },\r\n        /**\r\n         * Indicates if data should be aggregated to composide data items if there\r\n         * are more data items in selected range than `groupCount`.\r\n         *\r\n         * Grouping will occur automatically, based on current selection range, and\r\n         * will change dynamically when user zooms in/out the chart.\r\n         *\r\n         * NOTE: This works only if [[DateAxis]] is base axis of an [[XYSeries]].\r\n         *\r\n         * The related [[XYSeries]] also needs to be set up to take advantage of, by\r\n         * setting its [`groupFields`](https://www.amcharts.com/docs/v4/reference/xyseries/#groupFields_property).\r\n         *\r\n         * The group intervals to aggregate data to is defined by `groupIntervals`\r\n         * property.\r\n         *\r\n         * ```TypeScript\r\n         * let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n         * dateAxis.groupData = true;\r\n         *\r\n         * let valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n         *\r\n         * let series = chart.series.push(new am4charts.LineSeries());\r\n         * series.dataFields.dateX = \"date\";\r\n         * series.dataFields.valueY = \"value\";\r\n         * series.groupFields.valueY = \"average\";\r\n         * ```\r\n         * ```JavaScript\r\n         * var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n         * dateAxis.groupData = true;\r\n         *\r\n         * var valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n         *\r\n         * var series = chart.series.push(new am4charts.LineSeries());\r\n         * series.dataFields.dateX = \"date\";\r\n         * series.dataFields.valueY = \"value\";\r\n         * series.groupFields.valueY = \"average\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"xAxes\": [{\r\n         *     \"type\": \"DateAxis\",\r\n         *     \"groupData\": true\r\n         *   }],\r\n         *   \"yAxes\": [{\r\n         *     \"type\": \"ValueAxis\"\r\n         *   }],\r\n         *   \"series\": [{\r\n         *     \"type\": \"LineSeries\",\r\n         *     \"dataFields\": {\r\n         *       \"dateX\": \"date\",\r\n         *       \"valueY\": \"value\"\r\n         *     },\r\n         *     \"groupFields\": {\r\n         *       \"valueY\": \"average\"\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @default false\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n         * @since 4.7.0\r\n         * @param  value  Group data points?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            if (this.setPropertyValue(\"groupData\", value)) {\r\n                this.series.each(function (series) {\r\n                    series.setDataSet(\"\");\r\n                    if (value && !series.dataGrouped && series.inited) {\r\n                        series._baseInterval[_this.uid] = _this.mainBaseInterval;\r\n                        _this.groupSeriesData(series);\r\n                    }\r\n                });\r\n                this._currentDataSetId = \"\";\r\n                this._groupInterval = undefined;\r\n                this.invalidate();\r\n                this.invalidateSeries();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxis.prototype, \"groupInterval\", {\r\n        /**\r\n         * @return Interval\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"groupInterval\");\r\n        },\r\n        /**\r\n         * Disables automatic selection of data grouping intervals and always uses\r\n         * `groupInterval` if set. Works only if `groupData = true`.\r\n         *\r\n         * @since 4.9.24\r\n         * @param  value  Interval\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"groupInterval\", value)) {\r\n                this.invalidate();\r\n                this.invalidateSeries();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxis.prototype, \"groupCount\", {\r\n        /**\r\n         * @return Number of data items\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"groupCount\");\r\n        },\r\n        /**\r\n         * Indicates threshold of data items in selected range at which to start\r\n         * aggregating data items if `groupData = true`.\r\n         *\r\n         * @default 200\r\n         * @since 4.7.0\r\n         * @param  value  Number of data items\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"groupCount\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxis.prototype, \"timezoneOffset\", {\r\n        /**\r\n         * @todo Timezone offset in minutes\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"timezoneOffset\");\r\n        },\r\n        /**\r\n         *\r\n         * Indicates by how many minutes the timestamps in your data are offset from GMT.\r\n         * This is useful when you have timestamps as your data and you want all the users to see\r\n         * the same result and not the time which was at users's location at the given timestamp.\r\n         * Note, you do not need to set timezoneOffset both here and on DateFormatter, as this will\r\n         * distort the result.\r\n         *\r\n         * @default undefined\r\n         * @since 4.8.5\r\n         * @param  value Time zone offset in minutes\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"timezoneOffset\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxis.prototype, \"gridInterval\", {\r\n        /**\r\n         * Current grid interval.\r\n         *\r\n         * @return Grid interval\r\n         */\r\n        get: function () {\r\n            return this._gridInterval;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    DateAxis.prototype.makeGap = function (dataItem, previous) {\r\n        var series = dataItem.component;\r\n        if (dataItem && previous) {\r\n            if (!series.connect && $type.isNumber(series.autoGapCount)) {\r\n                if (series.baseAxis == this) {\r\n                    var date = dataItem.dates[\"date\" + this.axisLetter];\r\n                    var prevDate = previous.dates[\"date\" + this.axisLetter];\r\n                    if (date && prevDate) {\r\n                        var time = date.getTime();\r\n                        var prevTime = prevDate.getTime();\r\n                        if (time - prevTime > series.autoGapCount * this.baseDuration) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(DateAxis.prototype, \"baseValue\", {\r\n        /**\r\n         * @return base value\r\n         */\r\n        get: function () {\r\n            return this.min;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DateAxis;\r\n}(ValueAxis));\r\nexport { DateAxis };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n//# sourceMappingURL=DateAxis.js.map","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar DateAxisBreak = /** @class */ (function (_super) {\r\n    __extends(DateAxisBreak, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DateAxisBreak() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"DateAxisBreak\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DateAxisBreak.prototype, \"startDate\", {\r\n        /**\r\n         * @return Start date\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startDate\");\r\n        },\r\n        /**\r\n         * Starting date for the break.\r\n         *\r\n         * @param value Start date\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startDate\", value)) {\r\n                this.startValue = value.getTime();\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxisBreak.prototype, \"endDate\", {\r\n        /**\r\n         * @return End date\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endDate\");\r\n        },\r\n        /**\r\n         * Ending date for the break.\r\n         *\r\n         * @param value End date\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endDate\", value)) {\r\n                this.endValue = value.getTime();\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DateAxisBreak;\r\n}(ValueAxisBreak));\r\nexport { DateAxisBreak };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n//# sourceMappingURL=DateAxisBreak.js.map","/**\r\n * DurationAxis module\r\n */\r\nimport { __extends, __values } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar DurationAxisDataItem = /** @class */ (function (_super) {\r\n    __extends(DurationAxisDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DurationAxisDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"DurationAxisDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return DurationAxisDataItem;\r\n}(ValueAxisDataItem));\r\nexport { DurationAxisDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar DurationAxis = /** @class */ (function (_super) {\r\n    __extends(DurationAxis, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DurationAxis() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A base unit (granularity) of data.\r\n         *\r\n         * Used to indicate what are the base units of your data.\r\n         */\r\n        _this._baseUnit = \"second\";\r\n        _this.className = \"DurationAxis\";\r\n        _this.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Formats the value according to axis' own [[DurationFormatter]].\r\n     *\r\n     * @param value  Source value\r\n     * @return Formatted value\r\n     */\r\n    DurationAxis.prototype.formatLabel = function (value, format) {\r\n        return this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n    };\r\n    /**\r\n     * Adjusts actual min and max scale values so that the axis starts and ends\r\n     * at \"nice\" values, unless `strictMinMax` is set.\r\n     *\r\n     * The `difference` can be something else than `max - min`, because of the\r\n     * axis breaks.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param min        [description]\r\n     * @param max        [description]\r\n     * @param difference [description]\r\n     * @param gridCount  [description]\r\n     * @param strictMode [description]\r\n     * @return [description]\r\n     */\r\n    DurationAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\r\n        var e_1, _a;\r\n        var minMaxStep;\r\n        var timeUnit = this.baseUnit;\r\n        // we don't allow to go to smaller units, setting so to avoid invalidation\r\n        this.setPropertyValue(\"maxPrecision\", 0);\r\n        if (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n            // will fail if 0\r\n            if (gridCount <= 1) {\r\n                gridCount = 1;\r\n            }\r\n            gridCount = Math.round(gridCount);\r\n            var initialMin = min;\r\n            var initialMax = max;\r\n            // in case min and max is the same, use max\r\n            if (difference === 0) {\r\n                difference = Math.abs(max);\r\n            }\r\n            var step = difference / gridCount;\r\n            var divisors = [60, 30, 20, 15, 10, 2, 1];\r\n            var realDivisor = 1;\r\n            if (timeUnit == \"hour\") {\r\n                divisors = [24, 12, 6, 4, 2, 1];\r\n            }\r\n            try {\r\n                for (var divisors_1 = __values(divisors), divisors_1_1 = divisors_1.next(); !divisors_1_1.done; divisors_1_1 = divisors_1.next()) {\r\n                    var divisor = divisors_1_1.value;\r\n                    if (difference / divisor > gridCount) {\r\n                        realDivisor = divisor;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (divisors_1_1 && !divisors_1_1.done && (_a = divisors_1.return)) _a.call(divisors_1);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n            var count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n            var exponent = Math.log(Math.abs(count)) * Math.LOG10E;\r\n            var power = Math.pow(10, Math.floor(exponent)) / 10;\r\n            var reducedCount = count / power;\r\n            // find closest to divisor\r\n            var closest = $math.closest(divisors, reducedCount);\r\n            count = closest * power;\r\n            step = realDivisor * count;\r\n            // TODO can this be removed ?\r\n            this.durationFormatter.getValueUnit(step, this.baseUnit);\r\n            min = Math.floor(min / step) * step;\r\n            max = Math.ceil(max / step) * step;\r\n            if (strictMode) {\r\n                min -= step;\r\n                if (min < 0 && initialMin >= 0) {\r\n                    min = 0;\r\n                }\r\n                max += step;\r\n                if (max > 0 && initialMax <= 0) {\r\n                    max = 0;\r\n                }\r\n            }\r\n            minMaxStep = { min: min, max: max, step: step };\r\n        }\r\n        else {\r\n            minMaxStep = _super.prototype.adjustMinMax.call(this, min, max, difference, gridCount, strictMode);\r\n        }\r\n        // choose duration formatter based on step\r\n        this.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n        return minMaxStep;\r\n    };\r\n    Object.defineProperty(DurationAxis.prototype, \"tooltipDurationFormat\", {\r\n        /**\r\n         * @return Duration format for axis labels\r\n         */\r\n        get: function () {\r\n            return this._tooltipDurationFormat;\r\n        },\r\n        /**\r\n         * A special duration format to apply axis tooltips.\r\n         *\r\n         * Will use same format as for labels, if not set.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n         * @param value  Duration format for axis labels\r\n         */\r\n        set: function (value) {\r\n            this._tooltipDurationFormat = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns text to show in a axis tooltip, based on specific position within\r\n     * axis.\r\n     *\r\n     * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n     * chart, or explicitly for this Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position  Position (px)\r\n     * @return Label (numeric value)\r\n     */\r\n    DurationAxis.prototype.getTooltipText = function (position) {\r\n        var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n        var valueStr = this.formatLabel(value, this.tooltipDurationFormat);\r\n        if (!this._adapterO) {\r\n            return valueStr;\r\n        }\r\n        else {\r\n            return this._adapterO.apply(\"getTooltipText\", valueStr);\r\n        }\r\n    };\r\n    Object.defineProperty(DurationAxis.prototype, \"baseUnit\", {\r\n        /**\r\n         * @return Base unit\r\n         */\r\n        get: function () {\r\n            return this._baseUnit;\r\n        },\r\n        /**\r\n         * A base unit (granularity) of data.\r\n         *\r\n         * Used to indicate what are the base units of your data.\r\n         *\r\n         * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n         * \"day\", \"week\", \"month\", \"year\".\r\n         *\r\n         * @default \"second\"\r\n         * @param timeUnit\r\n         */\r\n        set: function (timeUnit) {\r\n            if (this._baseUnit != timeUnit) {\r\n                this._baseUnit = timeUnit;\r\n                this.durationFormatter.baseUnit = timeUnit;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all properties and related data from a different instance of Axis.\r\n     *\r\n     * @param source Source Axis\r\n     */\r\n    DurationAxis.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.baseUnit = source.baseUnit;\r\n    };\r\n    return DurationAxis;\r\n}(ValueAxis));\r\nexport { DurationAxis };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n//# sourceMappingURL=DurationAxis.js.map","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Grid } from \"./Grid\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nvar GridCircular = /** @class */ (function (_super) {\r\n    __extends(GridCircular, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function GridCircular() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"GridCircular\";\r\n        _this.pixelPerfect = false;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(GridCircular.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the circular grid. (absolute or relative)\r\n         *\r\n         * @param value Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GridCircular.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the circular grid. (absolute or relative)\r\n         *\r\n         * @param value Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return GridCircular;\r\n}(Grid));\r\nexport { GridCircular };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n//# sourceMappingURL=GridCircular.js.map","/**\r\n * Cursor module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { system } from \"../../core/System\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nvar Cursor = /** @class */ (function (_super) {\r\n    __extends(Cursor, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Cursor() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Current cursor position during selection.\r\n         *\r\n         * @todo Better description\r\n         */\r\n        _this.point = { x: 0, y: 0 };\r\n        /**\r\n         * Specifies the rules when cursor needs to be moved or hidden.\r\n         */\r\n        _this._stick = \"none\";\r\n        _this.className = \"Cursor\";\r\n        // Set defaults\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        _this.shouldClone = false;\r\n        _this.hide(0);\r\n        _this.trackable = true;\r\n        _this.clickable = true;\r\n        _this.isMeasured = false;\r\n        // Add events on body to trigger down and up events (to start zooming or\r\n        // selection)\r\n        var interaction = getInteraction();\r\n        _this._disposers.push(interaction.body.events.on(\"down\", _this.handleCursorDown, _this));\r\n        _this._disposers.push(interaction.body.events.on(\"up\", _this.handleCursorUp, _this));\r\n        _this._disposers.push(interaction.body.events.on(\"track\", _this.handleCursorMove, _this));\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Handle pointer movement in document and update cursor position as needed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Event\r\n     */\r\n    Cursor.prototype.handleCursorMove = function (event) {\r\n        if (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch)) {\r\n            return;\r\n        }\r\n        if (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n            // We want to let zoom/pan continue even if cursor is outside chart area\r\n            if (!this.isHidden || !this.isHiding) {\r\n                this.hide();\r\n            }\r\n            return;\r\n        }\r\n        var local = $utils.documentPointToSprite(event.pointer.point, this);\r\n        if (this._stick == \"hard\" && this._stickPoint) {\r\n            local = this._stickPoint;\r\n        }\r\n        if (this._stick == \"soft\" && this._stickPoint) {\r\n            if (!this.fitsToBounds(local)) {\r\n                local = this._stickPoint;\r\n            }\r\n        }\r\n        this.triggerMove(local);\r\n        return local;\r\n    };\r\n    /**\r\n     * Hides actual SVG elements and handles hiding animations.\r\n     *\r\n     * @param duration  Fade out duration (ms)\r\n     * @return Fade out duration (ms)\r\n     * @ignore\r\n     */\r\n    Cursor.prototype.hideReal = function (duration) {\r\n        if ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n            return;\r\n        }\r\n        return _super.prototype.hideReal.call(this, duration);\r\n    };\r\n    /**\r\n     * Places the cursor at specific point.\r\n     *\r\n     * The second parameter has following options:\r\n     *\r\n     * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n     * it either moves to a new place (if pointer over plot area) or is hidden.\r\n     *\r\n     * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n     * outside chart, but will move to a new place whe plot area is hovered or\r\n     * touched.\r\n     *\r\n     * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n     * another `triggerMove()` call.\r\n     *\r\n     * The third parameter - `force` (since `4.9.5`) - if set to `true` will\r\n     * make cursor execute all of the actions associated with cursor move,\r\n     * including line redraws, tooltip updates, etc. Useful when underlying\r\n     * chart data is dynamically being updated.\r\n     *\r\n     * @param point  Point to place cursor at\r\n     * @param stick  Level of cursor stickiness to the place\r\n     * @param force  Force cursor move\r\n     */\r\n    Cursor.prototype.triggerMove = function (point, stick, force) {\r\n        point.x = $math.round(point.x, 1);\r\n        point.y = $math.round(point.y, 1);\r\n        if (stick) {\r\n            this._stick = stick;\r\n        }\r\n        if (stick == \"hard\" || stick == \"soft\") {\r\n            this._stickPoint = point;\r\n        }\r\n        this.triggerMoveReal(point, force);\r\n    };\r\n    /**\r\n     * Places the cursor at specific point.\r\n     *\r\n     * @param point Point to place cursor at\r\n     */\r\n    Cursor.prototype.triggerMoveReal = function (point, force) {\r\n        if (this.point.x != point.x || this.point.y != point.y || force) {\r\n            this.point = point;\r\n            this.invalidatePosition();\r\n            // hide cursor if it's out of bounds\r\n            if (this.fitsToBounds(point)) {\r\n                this.show(0);\r\n            }\r\n            else {\r\n                // unless we are selecting (mouse is down)\r\n                if (!this.downPoint) {\r\n                    this.hide(0);\r\n                }\r\n            }\r\n            if (this.visible) {\r\n                this.getPositions();\r\n                this.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Simulates pressing down (click/touch) action by a cursor.\r\n     *\r\n     * @param point               Point of action\r\n     */\r\n    Cursor.prototype.triggerDown = function (point) {\r\n        this.triggerDownReal(point);\r\n    };\r\n    /**\r\n     * Simulates pressing down (click/touch) action by a cursor.\r\n     *\r\n     * @param point               Point of action\r\n     */\r\n    Cursor.prototype.triggerDownReal = function (point) {\r\n        switch (this._generalBehavior) {\r\n            case \"zoom\":\r\n                this.dispatchImmediately(\"zoomstarted\");\r\n                break;\r\n            case \"select\":\r\n                this.dispatchImmediately(\"selectstarted\");\r\n                break;\r\n            case \"pan\":\r\n                this.dispatchImmediately(\"panstarted\");\r\n                getInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Simulates the action of release of the mouse down / touch.\r\n     *\r\n     * @param point               Point of action\r\n     */\r\n    Cursor.prototype.triggerUp = function (point) {\r\n        this.triggerUpReal(point);\r\n    };\r\n    /**\r\n     * Simulates the action of release of the mouse down / touch.\r\n     *\r\n     * @param point               Point of action\r\n     */\r\n    Cursor.prototype.triggerUpReal = function (point) {\r\n        system.requestFrame();\r\n        this.updatePoint(this.upPoint);\r\n        var interaction = getInteraction();\r\n        if ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n            switch (this._generalBehavior) {\r\n                case \"zoom\":\r\n                    this.dispatch(\"zoomended\");\r\n                    break;\r\n                case \"select\":\r\n                    this.dispatch(\"selectended\");\r\n                    break;\r\n                case \"pan\":\r\n                    this.dispatch(\"panended\");\r\n                    interaction.setGlobalStyle(MouseCursorStyle.default);\r\n                    break;\r\n            }\r\n            this.downPoint = undefined;\r\n            this.updateSelection();\r\n        }\r\n        /*\r\n        else {\r\n            \r\n            if(this._generalBehavior == \"select\"){\r\n                this.dispatchImmediately(\"selectended\");\r\n            }\r\n            this.dispatchImmediately(\"behaviorcanceled\");\r\n            interaction.setGlobalStyle(MouseCursorStyle.default);\r\n            this.downPoint = undefined;\r\n        }*/\r\n    };\r\n    /**\r\n     * Updates selection dimensions on size change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Cursor.prototype.updateSelection = function () {\r\n    };\r\n    /**\r\n     * Updates cursors current positions.\r\n     */\r\n    Cursor.prototype.getPositions = function () {\r\n        // positions are used by axes or series\r\n        this.xPosition = this.point.x / this.innerWidth;\r\n        this.yPosition = 1 - this.point.y / this.innerHeight;\r\n    };\r\n    /**\r\n     * Handles pointer down event so we can start zoom or selection.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Original event\r\n     */\r\n    Cursor.prototype.handleCursorDown = function (event) {\r\n        if (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch) || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n            return;\r\n        }\r\n        // Get local point\r\n        var local = $utils.documentPointToSprite(event.pointer.point, this);\r\n        if (this._stick == \"hard\" && this._stickPoint) {\r\n            local = this._stickPoint;\r\n        }\r\n        this._downPointOrig = { x: local.x, y: local.y };\r\n        // We need to cancel the event to prevent gestures on touch devices\r\n        if (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\r\n            event.event.preventDefault();\r\n        }\r\n        // Make this happen\r\n        this.triggerMove(local);\r\n        this.triggerDown(local);\r\n    };\r\n    /**\r\n     * Determines whether Cursor should prevent default action on move.\r\n     *\r\n     * Child classes should override this as necessary.\r\n     *\r\n     * @return Prevent default?\r\n     */\r\n    Cursor.prototype.shouldPreventGestures = function (touch) {\r\n        return true;\r\n    };\r\n    /**\r\n     * Updates the coordinates of where pointer down event occurred\r\n     * (was pressed).\r\n     */\r\n    Cursor.prototype.updatePoint = function (point) {\r\n    };\r\n    /**\r\n     * Handles pointer up event - finishes zoom or selection action.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Original event\r\n     */\r\n    Cursor.prototype.handleCursorUp = function (event) {\r\n        if (!this.interactionsEnabled) {\r\n            return;\r\n        }\r\n        if (!this.downPoint && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n            return;\r\n        }\r\n        var local = $utils.documentPointToSprite(event.pointer.point, this);\r\n        if (this._stick == \"hard\" && this._stickPoint) {\r\n            local = this._stickPoint;\r\n        }\r\n        this._upPointOrig = { x: local.x, y: local.y };\r\n        this.triggerMove(local);\r\n        this.triggerUp(local);\r\n    };\r\n    Object.defineProperty(Cursor.prototype, \"chart\", {\r\n        /**\r\n         * @return Chart\r\n         */\r\n        get: function () {\r\n            return this._chart;\r\n        },\r\n        /**\r\n         * A reference to a [[Chart]] the cursor belongs to.\r\n         *\r\n         * @param value  Chart\r\n         */\r\n        set: function (value) {\r\n            this._chart = value;\r\n            if ($type.hasValue(this._chart.plotContainer)) {\r\n                getInteraction().lockElement(this._chart.plotContainer.interactions);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Cursor;\r\n}(Container));\r\nexport { Cursor };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n//# sourceMappingURL=Cursor.js.map","import { __extends } from \"tslib\";\r\nimport { XYCursor } from \"./XYCursor\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nvar RadarCursor = /** @class */ (function (_super) {\r\n    __extends(RadarCursor, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarCursor() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"RadarCursor\";\r\n        _this.radius = percent(100);\r\n        _this.innerRadius = percent(0);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        _this.mask = undefined;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Checks if point is within bounds of a container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param point  Point to check\r\n     * @return Fits within container?\r\n     */\r\n    RadarCursor.prototype.fitsToBounds = function (point) {\r\n        var radius = $math.getDistance(point);\r\n        //if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n        //return false;\r\n        //}\r\n        if (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(RadarCursor.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the cursor's radial line.\r\n         *\r\n         * @param value Start angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle of the cursor's radial line.\r\n         *\r\n         * @param value End angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    RadarCursor.prototype.triggerMoveReal = function (point, force) {\r\n        if (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n            this.updateLineX(this.point);\r\n        }\r\n        if (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n            this.updateLineY(this.point);\r\n        }\r\n        this.updateSelection();\r\n        _super.prototype.triggerMoveReal.call(this, point, force);\r\n    };\r\n    /**\r\n     * (Re)draws the horizontal (circular) cursor's line.\r\n     *\r\n     * @param point New target point\r\n     */\r\n    RadarCursor.prototype.updateLineX = function (point) {\r\n        var radius = this.pixelRadius;\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        var innerRadius = this.pixelInnerRadius;\r\n        if (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n            var angle = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n            var path = void 0;\r\n            if (this.lineX && this.lineX.visible) {\r\n                this.lineX.moveTo({ x: 0, y: 0 });\r\n                // fill\r\n                if (this.xAxis && this.fullWidthLineX) {\r\n                    var startPoint = this.xAxis.currentItemStartPoint;\r\n                    var endPoint = this.xAxis.currentItemEndPoint;\r\n                    if (startPoint && endPoint) {\r\n                        var fillStartAngle = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n                        var fillEndAngle = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n                        var arc = fillEndAngle - fillStartAngle;\r\n                        // clockwise\r\n                        // this is needed, normalizeAngle doesn't solve it\r\n                        if (startAngle < endAngle) {\r\n                            if (arc < 0) {\r\n                                arc += 360;\r\n                            }\r\n                        }\r\n                        // ccw\r\n                        else {\r\n                            if (arc > 0) {\r\n                                arc -= 360;\r\n                            }\r\n                        }\r\n                        angle -= arc / 2;\r\n                        path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n                            + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n                            + $path.arcTo(angle, arc, radius)\r\n                            + $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n                            + $path.arcTo(angle + arc, -arc, innerRadius);\r\n                    }\r\n                }\r\n                // line\r\n                if (!path) {\r\n                    path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n                }\r\n                this.lineX.path = path;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * (Re)draws the vertical (radial) cursor's line.\r\n     *\r\n     * @param point New target point\r\n     */\r\n    RadarCursor.prototype.updateLineY = function (point) {\r\n        if (this.lineY && this.lineY.visible) {\r\n            var startAngle = this.startAngle;\r\n            var endAngle = this.endAngle;\r\n            var truePixelRadius = this.truePixelRadius;\r\n            var radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n            if ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n                this.lineY.moveTo({ x: 0, y: 0 });\r\n                var path = void 0;\r\n                var arc = endAngle - startAngle;\r\n                if (this.yAxis && this.fullWidthLineY) {\r\n                    // fill\r\n                    var startPoint = this.yAxis.currentItemStartPoint;\r\n                    var endPoint = this.yAxis.currentItemEndPoint;\r\n                    if (startPoint && endPoint) {\r\n                        var innerRadius = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n                        radius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n                        path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n                        path += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n                    }\r\n                }\r\n                if (!path) {\r\n                    path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n                }\r\n                this.lineY.path = path;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates selection dimensions on size change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.updateSelection = function () {\r\n        if (this._usesSelection) {\r\n            var downPoint = this.downPoint;\r\n            if (downPoint) {\r\n                var point = this.point;\r\n                var radius = this.pixelRadius;\r\n                var truePixelRadius = this.truePixelRadius;\r\n                var innerRadius = this.pixelInnerRadius;\r\n                var startAngle = Math.min(this.startAngle, this.endAngle);\r\n                var endAngle = Math.max(this.startAngle, this.endAngle);\r\n                var downAngle = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n                var angle = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n                var downRadius = $math.getDistance(downPoint);\r\n                if (downRadius < truePixelRadius) {\r\n                    var currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n                    this._prevAngle = angle;\r\n                    var path = $path.moveTo({ x: 0, y: 0 });\r\n                    var downSin = $math.sin(downAngle);\r\n                    var downCos = $math.cos(downAngle);\r\n                    var sin = $math.sin(angle);\r\n                    var cos = $math.cos(angle);\r\n                    var behavior = this.behavior;\r\n                    if (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n                        path += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n                    }\r\n                    else if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n                        path = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n                    }\r\n                    else if (behavior == \"zoomXY\") {\r\n                        path = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n                    }\r\n                    this.selection.path = path;\r\n                }\r\n                this.selection.moveTo({ x: 0, y: 0 });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates cursors current positions.\r\n     */\r\n    RadarCursor.prototype.getPositions = function () {\r\n        // positions are used by axes or series\r\n        var chart = this.chart;\r\n        if (chart) {\r\n            var innerRadius = this.pixelInnerRadius;\r\n            var radius = this.truePixelRadius - innerRadius;\r\n            var startAngle = this.startAngle;\r\n            var endAngle = this.endAngle;\r\n            var angle = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n            var xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n            this.xPosition = xPosition;\r\n            this.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n        }\r\n    };\r\n    /**\r\n     * Overriding inherited method, so that nothing happens when it's triggered.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.updatePoint = function (point) {\r\n    };\r\n    /**\r\n     * Updates Cursor's position when axis tooltip changes horizontal position.\r\n     *\r\n     * @param event Axis event\r\n     */\r\n    RadarCursor.prototype.handleXTooltipPosition = function (event) {\r\n        if (this.xAxis.cursorTooltipEnabled) {\r\n            var tooltip = this.xAxis.tooltip;\r\n            this.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n        }\r\n    };\r\n    /**\r\n     * Updates Cursor's position when axis tooltip changes vertical position.\r\n     *\r\n     * @todo Description\r\n     * @param event Axis event\r\n     */\r\n    RadarCursor.prototype.handleYTooltipPosition = function (event) {\r\n        if (this.yAxis.cursorTooltipEnabled) {\r\n            var tooltip = this.yAxis.tooltip;\r\n            this.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n        }\r\n    };\r\n    /**\r\n     * needs to be overriden\r\n     * @ignore\r\n     */\r\n    RadarCursor.prototype.updateLinePositions = function (point) {\r\n    };\r\n    /**\r\n     * [getRanges description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    RadarCursor.prototype.getRanges = function () {\r\n        var downPoint = this.downPoint;\r\n        if (downPoint) {\r\n            var upPoint = this.upPoint;\r\n            var chart = this.chart;\r\n            if (chart) {\r\n                var radius = this.pixelRadius;\r\n                var startAngle = this.startAngle;\r\n                var endAngle = this.endAngle;\r\n                var downAngle = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n                var upAngle = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n                var downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n                var upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n                var startX = 0;\r\n                var endX = 1;\r\n                var startY = 0;\r\n                var endY = 1;\r\n                var behavior = this.behavior;\r\n                if (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n                    var arc = endAngle - startAngle;\r\n                    startX = $math.round((downAngle - startAngle) / arc, 5);\r\n                    endX = $math.round((upAngle - startAngle) / arc, 5);\r\n                }\r\n                if (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n                    startY = $math.round(downRadius / radius, 5);\r\n                    endY = $math.round(upRadius / radius, 5);\r\n                }\r\n                this.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n                this.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n                if (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.selection.hide();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Overriding inherited method, so that nothing happens when `updateSize`\r\n     * is triggered.\r\n     *\r\n     * RadarCursor is quite complicated and needs own sizing logic.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.updateSize = function () { };\r\n    Object.defineProperty(RadarCursor.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the cursor's circular line.\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"pixelRadius\", {\r\n        /**\r\n         * Outer radius of the circular line in pixels.\r\n         *\r\n         * @return Outer radius (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"truePixelRadius\", {\r\n        /**\r\n         * [truePixelRadius description]\r\n         *\r\n         * @todo Description\r\n         * @return Outer radius (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            return $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the cursor's circular line.\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Inner radius of the circular line in pixels.\r\n         *\r\n         * @return Inner radius (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            var innerRadius = this.innerRadius;\r\n            if (innerRadius instanceof Percent) {\r\n                innerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n            }\r\n            return $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.fixPoint = function (point) {\r\n        // overriding xy method\r\n        return point;\r\n    };\r\n    return RadarCursor;\r\n}(XYCursor));\r\nexport { RadarCursor };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n//# sourceMappingURL=RadarCursor.js.map","/**\r\n * Cursor for XY chart\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor } from \"./Cursor\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\r\nvar XYCursor = /** @class */ (function (_super) {\r\n    __extends(XYCursor, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYCursor() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Vertical cursor line element.\r\n         */\r\n        _this._lineX = new MutableValueDisposer();\r\n        /**\r\n         * Horizontal cursor line element.\r\n         */\r\n        _this._lineY = new MutableValueDisposer();\r\n        /**\r\n         * Horizontal [[Axis]].\r\n         */\r\n        _this._xAxis = new MutableValueDisposer();\r\n        /**\r\n         * Vertical [[Axis]].\r\n         */\r\n        _this._yAxis = new MutableValueDisposer();\r\n        _this._snapToDisposers = [];\r\n        _this.className = \"XYCursor\";\r\n        // Defaults\r\n        _this.behavior = \"zoomX\";\r\n        _this.maxPanOut = 0.1;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Create selection element\r\n        var selection = _this.createChild(Sprite);\r\n        selection.shouldClone = false;\r\n        selection.fillOpacity = 0.2;\r\n        selection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        selection.isMeasured = false;\r\n        selection.visible = false;\r\n        selection.interactionsEnabled = false;\r\n        _this.selection = selection;\r\n        _this._disposers.push(_this.selection);\r\n        // Create cursor's vertical line\r\n        var lineX = _this.createChild(Sprite);\r\n        lineX.shouldClone = false;\r\n        lineX.stroke = interfaceColors.getFor(\"grid\");\r\n        lineX.fill = color();\r\n        lineX.strokeDasharray = \"3,3\";\r\n        lineX.isMeasured = false;\r\n        lineX.strokeOpacity = 0.4;\r\n        lineX.interactionsEnabled = false;\r\n        lineX.y = 0; // important\r\n        _this.lineX = lineX;\r\n        _this._disposers.push(_this.lineX);\r\n        // Create cursor's horizontal line\r\n        var lineY = _this.createChild(Sprite);\r\n        lineY.shouldClone = false;\r\n        lineY.stroke = interfaceColors.getFor(\"grid\");\r\n        lineY.fill = color();\r\n        lineY.strokeDasharray = \"3,3\";\r\n        lineY.isMeasured = false;\r\n        lineY.strokeOpacity = 0.4;\r\n        lineY.interactionsEnabled = false;\r\n        lineY.x = 0; // important\r\n        _this.lineY = lineY;\r\n        _this._disposers.push(_this.lineY);\r\n        // Add handler for size changes\r\n        _this.events.on(\"sizechanged\", _this.updateSize, _this, false);\r\n        _this._disposers.push(_this._lineX);\r\n        _this._disposers.push(_this._lineY);\r\n        _this._disposers.push(_this._xAxis);\r\n        _this._disposers.push(_this._yAxis);\r\n        _this.mask = _this;\r\n        _this.hideSeriesTooltipsOnSelection = true;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Updates cursor element dimensions on size change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYCursor.prototype.updateSize = function () {\r\n        if (this.lineX) {\r\n            this.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n        }\r\n        if (this.lineY) {\r\n            this.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n        }\r\n    };\r\n    /**\r\n     * Updates selection dimensions on size change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYCursor.prototype.updateSelection = function () {\r\n        if (this._usesSelection) {\r\n            var downPoint = this.downPoint;\r\n            var behavior = this.behavior;\r\n            if (downPoint) {\r\n                var point = this.point;\r\n                if (this.lineX) {\r\n                    point.x = this.lineX.pixelX;\r\n                }\r\n                if (this.lineY) {\r\n                    point.y = this.lineY.pixelY;\r\n                }\r\n                var selection = this.selection;\r\n                var x = Math.min(point.x, downPoint.x);\r\n                var y = Math.min(point.y, downPoint.y);\r\n                var w = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n                var h = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n                switch (behavior) {\r\n                    case \"zoomX\":\r\n                        y = 0;\r\n                        h = this.pixelHeight;\r\n                        break;\r\n                    case \"zoomY\":\r\n                        x = 0;\r\n                        w = this.pixelWidth;\r\n                        break;\r\n                    case \"selectX\":\r\n                        y = 0;\r\n                        h = this.pixelHeight;\r\n                        break;\r\n                    case \"selectY\":\r\n                        x = 0;\r\n                        w = this.pixelWidth;\r\n                        break;\r\n                }\r\n                selection.x = x;\r\n                selection.y = y;\r\n                selection.path = $path.rectangle(w, h);\r\n                selection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n            }\r\n            else {\r\n                if (this._generalBehavior != \"select\") {\r\n                    this.selection.hide();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYCursor.prototype.fixPoint = function (point) {\r\n        point.x = Math.max(0, point.x);\r\n        point.y = Math.max(0, point.y);\r\n        point.x = Math.min(this.pixelWidth, point.x);\r\n        point.y = Math.min(this.pixelHeight, point.y);\r\n        return point;\r\n    };\r\n    /**\r\n     * Places the cursor at specific point.\r\n     *\r\n     * @param point Point to place cursor at\r\n     */\r\n    XYCursor.prototype.triggerMoveReal = function (point, force) {\r\n        _super.prototype.triggerMoveReal.call(this, point, force);\r\n        var snapToSeries = this.snapToSeries;\r\n        if ((snapToSeries && !this.downPoint)) {\r\n            if (snapToSeries instanceof XYSeries) {\r\n                if (snapToSeries.isHidden) {\r\n                    this.updateLinePositions(point);\r\n                }\r\n            }\r\n            else {\r\n                var allHidden_1 = true;\r\n                $array.each(snapToSeries, function (s) {\r\n                    if (!s.isHidden) {\r\n                        allHidden_1 = false;\r\n                    }\r\n                });\r\n                if (allHidden_1) {\r\n                    this.updateLinePositions(point);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.updateLinePositions(point);\r\n        }\r\n        if (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n            if (this._generalBehavior == \"pan\") {\r\n                this.getPanningRanges();\r\n                this.dispatch(\"panning\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYCursor.prototype.updateLinePositions = function (point) {\r\n        point = this.fixPoint(this.point);\r\n        if (this.lineX && this.lineX.visible && !this.xAxis) {\r\n            this.lineX.x = point.x;\r\n        }\r\n        if (this.lineY && this.lineY.visible && !this.yAxis) {\r\n            this.lineY.y = point.y;\r\n        }\r\n        this.updateSelection();\r\n    };\r\n    XYCursor.prototype.triggerDownReal = function (point) {\r\n        if (this.visible && !this.isHiding) {\r\n            if (this._generalBehavior == \"select\") {\r\n                this.selection.parent = this.parent;\r\n            }\r\n            if (this.fitsToBounds(point)) {\r\n                this.downPoint = { x: point.x, y: point.y };\r\n                this.updatePoint(point);\r\n                //this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n                this.point.x = this.downPoint.x;\r\n                this.point.y = this.downPoint.y;\r\n                var selection = this.selection;\r\n                var selectionX = this.downPoint.x;\r\n                var selectionY = this.downPoint.y;\r\n                if (this._usesSelection) {\r\n                    selection.x = selectionX;\r\n                    selection.y = selectionY;\r\n                    selection.path = \"\";\r\n                    selection.show();\r\n                }\r\n                _super.prototype.triggerDownReal.call(this, point);\r\n            }\r\n            else {\r\n                this.downPoint = undefined;\r\n            }\r\n        }\r\n        else {\r\n            this.downPoint = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Updates the coordinates of where pointer down event occurred\r\n     * (was pressed).\r\n     */\r\n    XYCursor.prototype.updatePoint = function (point) {\r\n        if (this.lineX) {\r\n            point.x = this.lineX.pixelX;\r\n        }\r\n        if (this.lineY) {\r\n            point.y = this.lineY.pixelY;\r\n        }\r\n    };\r\n    /**\r\n     * Handle action when cursor is released, which should perform an operation\r\n     * based on its `behavior`, like zoom.\r\n     *\r\n     * @param  point  Release point\r\n     */\r\n    XYCursor.prototype.triggerUpReal = function (point) {\r\n        if (this.hasMoved()) {\r\n            if (this.downPoint) {\r\n                this.upPoint = point;\r\n                this.updatePoint(this.upPoint);\r\n                if (this._generalBehavior != \"pan\") {\r\n                    this.getRanges();\r\n                }\r\n                if (this._generalBehavior != \"select\") {\r\n                    this.selection.hide();\r\n                }\r\n                _super.prototype.triggerUpReal.call(this, point);\r\n            }\r\n        }\r\n        else {\r\n            if (this._generalBehavior != \"select\") {\r\n                this.selection.hide(0);\r\n            }\r\n            else {\r\n                this.xRange = undefined;\r\n                this.yRange = undefined;\r\n                this.dispatchImmediately(\"selectended\");\r\n            }\r\n            // reset cursor style, just in case\r\n            if (this._generalBehavior == \"pan\") {\r\n                var interaction = getInteraction();\r\n                interaction.setGlobalStyle(MouseCursorStyle.default);\r\n            }\r\n            this.dispatchImmediately(\"behaviorcanceled\");\r\n        }\r\n        this.downPoint = undefined;\r\n        this.dispatch(\"cursorpositionchanged\");\r\n    };\r\n    /**\r\n     * Calculates if the cursor has moved enough based on its `behavior`.\r\n     *\r\n     * @return Moved?\r\n     */\r\n    XYCursor.prototype.hasMoved = function () {\r\n        var distance;\r\n        if (this.behavior == \"zoomX\" || this.behavior == \"panX\") {\r\n            distance = $math.getHorizontalDistance(this._upPointOrig, this._downPointOrig);\r\n        }\r\n        else if (this.behavior == \"zoomY\" || this.behavior == \"panY\") {\r\n            distance = $math.getVerticalDistance(this._upPointOrig, this._downPointOrig);\r\n        }\r\n        else {\r\n            distance = $math.getDistance(this._upPointOrig, this._downPointOrig);\r\n        }\r\n        return distance > getInteraction().getHitOption(this.interactions, \"hitTolerance\");\r\n    };\r\n    /**\r\n     * [getRanges description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    XYCursor.prototype.getPanningRanges = function () {\r\n        var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n        var startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n        var currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n        var currentY = 1 - $math.round(this.point.y / this.innerHeight, 5);\r\n        var deltaX = startX - currentX;\r\n        var deltaY = startY - currentY;\r\n        this.xRange = { start: deltaX, end: 1 + deltaX };\r\n        this.yRange = { start: deltaY, end: 1 + deltaY };\r\n        if (this.behavior == \"panX\") {\r\n            this.yRange.start = 0;\r\n            this.yRange.end = 1;\r\n        }\r\n        if (this.behavior == \"panY\") {\r\n            this.xRange.start = 0;\r\n            this.xRange.end = 1;\r\n        }\r\n    };\r\n    /**\r\n     * [getRanges description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    XYCursor.prototype.getRanges = function () {\r\n        if (this.lineX) {\r\n            this.upPoint.x = this.lineX.pixelX;\r\n        }\r\n        if (this.lineY) {\r\n            this.upPoint.y = this.lineY.pixelY;\r\n        }\r\n        // @todo Is this needed?\r\n        $utils.used(this.selection);\r\n        var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n        var endX = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n        var startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n        var endY = 1 - $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n        this.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n        this.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n    };\r\n    Object.defineProperty(XYCursor.prototype, \"behavior\", {\r\n        /**\r\n         * Behavior\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"behavior\");\r\n        },\r\n        /**\r\n         * Cursor's behavior when it's moved with pointer down:\r\n         *\r\n         * * `\"zoomX\"` - zooms horizontally.\r\n         * * `\"zoomY\"` - zooms vertically.\r\n         * * `\"zoomXY\"` - zooms both horizontally and vertically.\r\n         * * `\"selectX\"` - selects a range horizontally.\r\n         * * `\"selectY\"` - selects a range vertically.\r\n         * * `\"selectXY\"` - selects a range both horizontally and vertically.\r\n         * * `\"panX\"` - moves (pans) current selection horizontally.\r\n         * * `\"panY\"` - moves (pans) current selection vertically.\r\n         * * `\"panXY\"` - moves (pans) current selection both horizontally and vertically.\r\n         * * `\"none\"` - does nothing with pointer down.\r\n         *\r\n         * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n         * and dragging it will start zooming the chart.\r\n         *\r\n         * NOTE: `\"zoomXY\"` acts differently when used on a `DateAxis`.\r\n         * See [this note](https://www.amcharts.com/docs/v4/concepts/chart-cursor/#zoomXY_behavior_and_DateAxis).\r\n         *\r\n         * @param value Bheavior\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"behavior\", value, true);\r\n            this._usesSelection = false;\r\n            if (value.indexOf(\"zoom\") != -1) {\r\n                this._generalBehavior = \"zoom\";\r\n                this._usesSelection = true;\r\n            }\r\n            if (value.indexOf(\"select\") != -1) {\r\n                this._generalBehavior = \"select\";\r\n                this._usesSelection = true;\r\n            }\r\n            if (value.indexOf(\"pan\") != -1) {\r\n                this._generalBehavior = \"pan\";\r\n                this._usesSelection = false;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Determines whether Cursor should prevent default action on move.\r\n     *\r\n     * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n     *\r\n     * @return Prevent default?\r\n     */\r\n    XYCursor.prototype.shouldPreventGestures = function (touch) {\r\n        return (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\r\n    };\r\n    Object.defineProperty(XYCursor.prototype, \"fullWidthLineX\", {\r\n        /**\r\n         * @return Full width?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fullWidthLineX\");\r\n        },\r\n        /**\r\n         * Cursor's horizontal line is expanded to take full width of the related\r\n         * Axis' cell/category.\r\n         *\r\n         * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n         * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n         *\r\n         * @param value Full width?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"fullWidthLineX\", value);\r\n            if (!value) {\r\n                this.updateSize();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"fullWidthLineY\", {\r\n        /**\r\n         * @return Full width?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fullWidthLineY\");\r\n        },\r\n        /**\r\n         * Cursor's vertical line is expanded to take full width of the related\r\n         * Axis' cell/category.\r\n         *\r\n         * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n         * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n         *\r\n         * @param value Full width?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"fullWidthLineY\", value);\r\n            if (!value) {\r\n                this.updateSize();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"hideSeriesTooltipsOnSelection\", {\r\n        /**\r\n         * @return hide tooltip?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hideSeriesTooltipsOnSelection\");\r\n        },\r\n        /**\r\n         * If set to `true` this will hide series tooltips when selecting with cursor.\r\n         *\r\n         * @since 4.5.15\r\n         * @param  value  hide tooltips?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"hideSeriesTooltipsOnSelection\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"maxTooltipDistance\", {\r\n        /**\r\n         * @return Distance\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxTooltipDistance\");\r\n        },\r\n        /**\r\n         * If set to a numeric value, cursor will display closest series' tooltips\r\n         * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n         * it.\r\n         *\r\n         * Set it to `-1` to always force one tooltip, even if there are multiple\r\n         * data items in exactly same place.\r\n         *\r\n         * @since 4.7.18\r\n         * @param  value  Distance\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxTooltipDistance\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"maxPanOut\", {\r\n        /**\r\n         * @return Full width?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxPanOut\");\r\n        },\r\n        /**\r\n         * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n         * This setting specifies relative value by how much we can pan out the plot\r\n         *\r\n         * @param value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxPanOut\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"xAxis\", {\r\n        /**\r\n         * @return X axis\r\n         */\r\n        get: function () {\r\n            return this._xAxis.get();\r\n        },\r\n        /**\r\n         * A reference to X [[Axis]].\r\n         *\r\n         * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n         * you have axis tooltip enabled and you want cursor line to be at the same\r\n         * position as tooltip.\r\n         *\r\n         * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n         * [[ValueAxis]].\r\n         *\r\n         * @todo Description (review)\r\n         * @param axis X axis\r\n         */\r\n        set: function (axis) {\r\n            var _this = this;\r\n            if (this._xAxis.get() != axis) {\r\n                this._xAxis.set(axis, new MultiDisposer([\r\n                    axis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n                    axis.events.on(\"rangechangestarted\", function (event) {\r\n                        _this.hide(0);\r\n                        _this.preventShow = true;\r\n                    }, undefined, false),\r\n                    axis.events.on(\"rangechangeended\", function (event) {\r\n                        _this.preventShow = false;\r\n                        _this.hide(0);\r\n                        _this.dispatch(\"cursorpositionchanged\");\r\n                    }, undefined, false)\r\n                ]));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"yAxis\", {\r\n        /**\r\n         * @return Y Axis\r\n         */\r\n        get: function () {\r\n            return this._yAxis.get();\r\n        },\r\n        /**\r\n         * A reference to Y [[Axis]].\r\n         *\r\n         * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n         * you have axis tooltip enabled and you want cursor line to be at the same\r\n         * position as tooltip.\r\n         *\r\n         * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n         * [[ValueAxis]].\r\n         *\r\n         * @todo Description (review)\r\n         * @param axis Y axis\r\n         */\r\n        set: function (axis) {\r\n            var _this = this;\r\n            if (this._yAxis.get() != axis) {\r\n                this._yAxis.set(axis, new MultiDisposer([\r\n                    axis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n                    axis.events.on(\"rangechangestarted\", function (event) {\r\n                        _this.hide(0);\r\n                        _this.__disabled = true;\r\n                    }, undefined, false),\r\n                    axis.events.on(\"rangechangeended\", function (event) {\r\n                        _this.__disabled = false;\r\n                        _this.hide(0);\r\n                        _this.dispatch(\"cursorpositionchanged\");\r\n                    }, undefined, false)\r\n                ]));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates Cursor's position when axis tooltip changes position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Original Axis event\r\n     */\r\n    XYCursor.prototype.handleXTooltipPosition = function (event) {\r\n        var tooltip = this.xAxis.tooltip;\r\n        var point = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n        var x = point.x;\r\n        point.y = 1;\r\n        if (this.lineX) {\r\n            this.lineX.x = x;\r\n            if (!this.fitsToBounds(point)) {\r\n                this.hide();\r\n            }\r\n        }\r\n        if (this.xAxis && this.fullWidthLineX) {\r\n            var startPoint = this.xAxis.currentItemStartPoint;\r\n            var endPoint = this.xAxis.currentItemEndPoint;\r\n            if (startPoint && endPoint) {\r\n                this.lineX.x = x;\r\n                var width = endPoint.x - startPoint.x;\r\n                this.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates Cursor's position when Y axis changes position or scale.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Original Axis event\r\n     */\r\n    XYCursor.prototype.handleYTooltipPosition = function (event) {\r\n        var tooltip = this.yAxis.tooltip;\r\n        var point = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n        var y = point.y;\r\n        point.x = 1;\r\n        if (this.lineY) {\r\n            this.lineY.y = y;\r\n            if (!this.fitsToBounds(point)) {\r\n                this.hide();\r\n            }\r\n        }\r\n        if (this.yAxis && this.fullWidthLineY) {\r\n            var startPoint = this.yAxis.currentItemStartPoint;\r\n            var endPoint = this.yAxis.currentItemEndPoint;\r\n            if (startPoint && endPoint) {\r\n                this.lineY.y = y;\r\n                var height = endPoint.y - startPoint.y;\r\n                this.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(XYCursor.prototype, \"lineX\", {\r\n        /**\r\n         * @return Line element\r\n         */\r\n        get: function () {\r\n            return this._lineX.get();\r\n        },\r\n        /**\r\n         * A Line element to use for X axis.\r\n         *\r\n         * @param lineX Line\r\n         */\r\n        set: function (lineX) {\r\n            if (lineX) {\r\n                lineX.setElement(this.paper.add(\"path\"));\r\n                this._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n                lineX.interactionsEnabled = false;\r\n                lineX.parent = this;\r\n            }\r\n            else {\r\n                this._lineX.reset();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"lineY\", {\r\n        /**\r\n         * @return Line element\r\n         */\r\n        get: function () {\r\n            return this._lineY.get();\r\n        },\r\n        /**\r\n         * A Line element to use Y axis.\r\n         *\r\n         * @param lineY Line\r\n         */\r\n        set: function (lineY) {\r\n            if (lineY) {\r\n                lineY.setElement(this.paper.add(\"path\"));\r\n                this._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n                lineY.parent = this;\r\n                lineY.interactionsEnabled = false;\r\n            }\r\n            else {\r\n                this._lineY.reset();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"selection\", {\r\n        /**\r\n         * @return Selection rectangle\r\n         */\r\n        get: function () {\r\n            return this._selection;\r\n        },\r\n        /**\r\n         * A selection element ([[Sprite]]).\r\n         *\r\n         * @param selection Selection rectangle\r\n         */\r\n        set: function (selection) {\r\n            this._selection = selection;\r\n            if (selection) {\r\n                selection.element = this.paper.add(\"path\");\r\n                selection.parent = this;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n     * with real references.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    XYCursor.prototype.processConfig = function (config) {\r\n        var _this = this;\r\n        if (config) {\r\n            // Set up axes\r\n            if ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n                if (this.map.hasKey(config.xAxis)) {\r\n                    config.xAxis = this.map.getKey(config.xAxis);\r\n                }\r\n                else {\r\n                    this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n                    delete config.xAxis;\r\n                }\r\n            }\r\n            if ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n                if (this.map.hasKey(config.yAxis)) {\r\n                    config.yAxis = this.map.getKey(config.yAxis);\r\n                }\r\n                else {\r\n                    this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n                    delete config.yAxis;\r\n                }\r\n            }\r\n            if ($type.hasValue(config.snapToSeries)) {\r\n                var snapTo_1 = $type.isArray(config.snapToSeries) ? config.snapToSeries : [config.snapToSeries];\r\n                var snapError_1 = false;\r\n                $array.each(snapTo_1, function (snap, index) {\r\n                    if ($type.isString(snap)) {\r\n                        if (_this.map.hasKey(snap)) {\r\n                            snapTo_1[index] = _this.map.getKey(snap);\r\n                        }\r\n                        else {\r\n                            _this.processingErrors.push(\"[XYCursor] No series with id \\\"\" + snap + \"\\\" found for `series`\");\r\n                            snapError_1 = true;\r\n                        }\r\n                    }\r\n                });\r\n                if (snapError_1) {\r\n                    delete config.snapToSeries;\r\n                }\r\n                else {\r\n                    config.snapToSeries = snapTo_1;\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    Object.defineProperty(XYCursor.prototype, \"snapToSeries\", {\r\n        /**\r\n         * @return {XYSeries | XYSeries[]}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"snapToSeries\");\r\n        },\r\n        /**\r\n         * Specifies to which series cursor lines should be snapped.\r\n         *\r\n         * Can be a single series instance or an array of series.\r\n         *\r\n         * @param {XYSeries | XYSeries[]}\r\n         */\r\n        set: function (series) {\r\n            var _this = this;\r\n            if (this.setPropertyValue(\"snapToSeries\", series)) {\r\n                if (series instanceof XYSeries) {\r\n                    series = [series];\r\n                }\r\n                if (this._snapToDisposers) {\r\n                    $array.each(this._snapToDisposers, function (disposer) {\r\n                        disposer.dispose();\r\n                    });\r\n                }\r\n                this._snapToDisposers = [];\r\n                if (series) {\r\n                    $array.each(series, function (s) {\r\n                        _this._snapToDisposers.push(s.events.on(\"tooltipshownat\", function () { _this.handleSnap(s); }, undefined, false));\r\n                    });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [handleSnap description]\r\n     *\r\n     * @ignore\r\n     * @todo Description\r\n     */\r\n    XYCursor.prototype.handleSnap = function (series) {\r\n        if (!this.downPoint) {\r\n            var x = series.getTooltipX() + series.xAxis.pixelX;\r\n            var y = series.getTooltipY() + series.yAxis.pixelY;\r\n            if (this.xAxis) {\r\n                if (this.xAxis.renderer.opposite) {\r\n                    y -= this.pixelHeight;\r\n                }\r\n            }\r\n            this.point = { x: x, y: y };\r\n            this.getPositions();\r\n            var xx = x;\r\n            var yy = y;\r\n            x -= this.pixelWidth;\r\n            if (this.yAxis) {\r\n                if (this.yAxis.renderer.opposite) {\r\n                    x += this.pixelWidth;\r\n                }\r\n            }\r\n            var tooltip = series.tooltip;\r\n            var duration = tooltip.animationDuration;\r\n            var easing = tooltip.animationEasing;\r\n            var xAxis = series.xAxis;\r\n            var yAxis = series.yAxis;\r\n            if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n                series.yAxis.showTooltipAtPosition(this.yPosition);\r\n                series.xAxis.showTooltipAtPosition(this.xPosition);\r\n            }\r\n            else {\r\n                if (series.baseAxis == series.xAxis) {\r\n                    series.yAxis.showTooltipAtPosition(this.yPosition);\r\n                }\r\n                if (series.baseAxis == series.yAxis) {\r\n                    series.xAxis.showTooltipAtPosition(this.xPosition);\r\n                }\r\n            }\r\n            this.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n            this.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n            if (!this.xAxis) {\r\n                this.lineX.animate([{ property: \"x\", to: xx }], duration, easing);\r\n            }\r\n            if (!this.yAxis) {\r\n                this.lineY.animate([{ property: \"y\", to: yy }], duration, easing);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    XYCursor.prototype.dispose = function () {\r\n        this.hide(0);\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    return XYCursor;\r\n}(Cursor));\r\nexport { XYCursor };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n//# sourceMappingURL=XYCursor.js.map","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar Candlestick = /** @class */ (function (_super) {\r\n    __extends(Candlestick, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Candlestick() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Candlestick\";\r\n        _this.layout = \"none\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    Candlestick.prototype.createAssets = function () {\r\n        _super.prototype.createAssets.call(this);\r\n        this.lowLine = this.createChild(Line);\r\n        this.lowLine.shouldClone = false;\r\n        this.highLine = this.createChild(Line);\r\n        this.highLine.shouldClone = false;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Candlestick]].\r\n     *\r\n     * @param source Source Candlestick\r\n     */\r\n    Candlestick.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.lowLine) {\r\n            this.lowLine.copyFrom(source.lowLine);\r\n        }\r\n        if (this.highLine) {\r\n            this.highLine.copyFrom(source.highLine);\r\n        }\r\n    };\r\n    return Candlestick;\r\n}(Column));\r\nexport { Candlestick };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n//# sourceMappingURL=Candlestick.js.map","/**\r\n * ChordLink module\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { FlowDiagramLink } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar ChordLink = /** @class */ (function (_super) {\r\n    __extends(ChordLink, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordLink() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ChordLink\";\r\n        _this.middleLine = _this.createChild(QuadraticCurve);\r\n        _this.middleLine.shouldClone = false;\r\n        _this.middleLine.strokeOpacity = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates (redraws) the link.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ChordLink.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        if (!this.isTemplate) {\r\n            var startAngle = this.startAngle;\r\n            var endAngle = this.endAngle;\r\n            var arc = this.arc;\r\n            var radius = this.radius;\r\n            var fromNode = this.dataItem.fromNode;\r\n            var toNode = this.dataItem.toNode;\r\n            var fromX = 0;\r\n            var fromY = 0;\r\n            if (fromNode) {\r\n                fromX = fromNode.pixelX + fromNode.dx;\r\n                fromY = fromNode.pixelY + fromNode.dy;\r\n            }\r\n            var toX = 0;\r\n            var toY = 0;\r\n            if (toNode) {\r\n                toX = toNode.pixelX + toNode.dx;\r\n                toY = toNode.pixelY + toNode.dy;\r\n            }\r\n            if (radius > 0) {\r\n                var x1 = radius * $math.cos(startAngle) + fromX;\r\n                var y1 = radius * $math.sin(startAngle) + fromY;\r\n                var x2 = radius * $math.cos(endAngle) + toX;\r\n                var y2 = radius * $math.sin(endAngle) + toY;\r\n                //let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n                //let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n                //let cpx = (arcWidth) * $math.cos(cpAngle);\r\n                //let cpy = (arcWidth) * $math.sin(cpAngle);\r\n                var cp = { x: 0, y: 0 };\r\n                var path = $path.moveTo({ x: x1, y: y1 });\r\n                path += $path.arcTo(startAngle, arc, radius);\r\n                path += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n                path += $path.arcTo(endAngle, arc, radius);\r\n                path += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n                if (arc > 0) {\r\n                    this.link.path = path;\r\n                }\r\n                else {\r\n                    this.link.path = \"\";\r\n                }\r\n                if (this.maskBullets) {\r\n                    this.bulletsMask.path = path;\r\n                    this.bulletsContainer.mask = this.bulletsMask;\r\n                }\r\n                var mAngle1 = startAngle + arc / 2;\r\n                var mAngle2 = endAngle + arc / 2;\r\n                var middleLine = this.middleLine;\r\n                middleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n                middleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n                middleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n                middleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n                middleLine.cpx = 0;\r\n                middleLine.cpy = 0;\r\n                middleLine.stroke = this.fill;\r\n                this.positionBullets();\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(ChordLink.prototype, \"radius\", {\r\n        /**\r\n         * @return End Y\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * [radius description]\r\n         *\r\n         * @todo Description\r\n         * @param value End Y\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"radius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordLink.prototype, \"arc\", {\r\n        /**\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"arc\");\r\n        },\r\n        /**\r\n         * [arc description]\r\n         *\r\n         * @todo Description\r\n         * @param value [description]\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"arc\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ChordLink;\r\n}(FlowDiagramLink));\r\nexport { ChordLink };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n//# sourceMappingURL=ChordLink.js.map","/**\r\n * ChordNode module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar ChordNode = /** @class */ (function (_super) {\r\n    __extends(ChordNode, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordNode() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ChordNode\";\r\n        var label = _this.createChild(AxisLabelCircular);\r\n        label.location = 0.5;\r\n        label.radius = 5;\r\n        label.text = \"{name}\";\r\n        label.zIndex = 1;\r\n        label.shouldClone = false;\r\n        _this.label = label;\r\n        _this.layout = \"none\";\r\n        _this.events.on(\"positionchanged\", _this.updateRotation, _this, false);\r\n        _this.isMeasured = false;\r\n        _this.slice = _this.createChild(Slice);\r\n        _this.slice.isMeasured = false;\r\n        var hiddenState = _this.hiddenState;\r\n        hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n        hiddenState.properties.opacity = 0.5;\r\n        hiddenState.properties.visible = true;\r\n        _this.setStateOnChildren = false;\r\n        _this.slice.hiddenState.properties.visible = true;\r\n        _this.adapter.add(\"tooltipX\", function (tooltipX, target) {\r\n            return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n        });\r\n        _this.adapter.add(\"tooltipY\", function (tooltipY, target) {\r\n            return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Invalidates all links, attached to this node.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ChordNode.prototype.invalidateLinks = function () {\r\n        var _this = this;\r\n        _super.prototype.invalidateLinks.call(this);\r\n        var label = this.label;\r\n        var slice = this.slice;\r\n        var chart = this.chart;\r\n        if (chart && slice) {\r\n            var sum = this.total;\r\n            var arc_1 = slice.arc;\r\n            var sliceStartAngle_1 = slice.startAngle;\r\n            this.children.each(function (child) {\r\n                if (child instanceof Bullet) {\r\n                    var locationX = child.locationX;\r\n                    if (!$type.isNumber(locationX)) {\r\n                        locationX = 0.5;\r\n                    }\r\n                    var locationY = child.locationY;\r\n                    if (!$type.isNumber(locationY)) {\r\n                        locationY = 1;\r\n                    }\r\n                    var childAngle = sliceStartAngle_1 + arc_1 * locationX;\r\n                    var childRadius = locationY * slice.radius;\r\n                    child.x = childRadius * $math.cos(childAngle);\r\n                    child.y = childRadius * $math.sin(childAngle);\r\n                }\r\n            });\r\n            var labelAngle = sliceStartAngle_1 + arc_1 * label.location;\r\n            var startAngle = sliceStartAngle_1 + (1 - sum / this.adjustedTotal) * arc_1 * 0.5; // if value of a node is > then sum of the links, add to center link\r\n            if ($type.isNaN(startAngle)) {\r\n                startAngle = sliceStartAngle_1;\r\n            }\r\n            label.fixPosition(labelAngle, slice.radius);\r\n            this.nextAngle = startAngle;\r\n            if (this._outgoingSorted) {\r\n                $iter.each(this._outgoingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    link.parent = _this.chart.linksContainer;\r\n                    var value = dataItem.getWorkingValue(\"value\");\r\n                    if ($type.isNumber(value)) {\r\n                        if (chart.nonRibbon) {\r\n                            var percentWidth = link.percentWidth;\r\n                            if (!$type.isNumber(percentWidth)) {\r\n                                percentWidth = 5;\r\n                            }\r\n                            percentWidth = percentWidth / 100;\r\n                            link.startAngle = sliceStartAngle_1 + arc_1 / 2 - arc_1 / 2 * percentWidth;\r\n                            link.arc = arc_1 * percentWidth;\r\n                        }\r\n                        else {\r\n                            link.arc = value * chart.valueAngle;\r\n                            link.startAngle = _this.nextAngle;\r\n                            _this.nextAngle += link.arc;\r\n                        }\r\n                        if (!dataItem.toNode) {\r\n                            link.endAngle = link.startAngle;\r\n                        }\r\n                        link.radius = slice.pixelInnerRadius;\r\n                    }\r\n                    //link.validate();\r\n                });\r\n            }\r\n            if (this._incomingSorted) {\r\n                $iter.each(this._incomingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    link.radius = slice.pixelInnerRadius;\r\n                    if (chart.nonRibbon) {\r\n                        var percentWidth = link.percentWidth;\r\n                        if (!$type.isNumber(percentWidth)) {\r\n                            percentWidth = 5;\r\n                        }\r\n                        percentWidth = percentWidth / 100;\r\n                        link.endAngle = sliceStartAngle_1 + arc_1 / 2 - arc_1 / 2 * percentWidth;\r\n                        link.arc = arc_1 * percentWidth;\r\n                    }\r\n                    else {\r\n                        link.endAngle = _this.nextAngle;\r\n                        var value = dataItem.getWorkingValue(\"value\");\r\n                        if ($type.isNumber(value)) {\r\n                            link.arc = value * chart.valueAngle; // yes, this is needed\r\n                            _this.nextAngle += link.arc;\r\n                        }\r\n                    }\r\n                    if (!dataItem.fromNode) {\r\n                        link.startAngle = link.endAngle;\r\n                    }\r\n                    //link.validate();\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     * updates slice start angle so that when we drag a node it would face the center\r\n     */\r\n    ChordNode.prototype.updateRotation = function () {\r\n        var slice = this.slice;\r\n        var mAngle = this.trueStartAngle + slice.arc / 2;\r\n        var radius = slice.radius;\r\n        var tx = radius * $math.cos(mAngle);\r\n        var ty = radius * $math.sin(mAngle);\r\n        var angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n        slice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n        this.dx = -this.pixelX;\r\n        this.dy = -this.pixelY;\r\n    };\r\n    /**\r\n     * Copies properties and labels from another [[ChordNode]].\r\n     *\r\n     * @param source  Source node\r\n     */\r\n    ChordNode.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.label.copyFrom(source.label);\r\n        this.slice.copyFrom(source.slice);\r\n    };\r\n    return ChordNode;\r\n}(FlowDiagramNode));\r\nexport { ChordNode };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n//# sourceMappingURL=ChordNode.js.map","/**\r\n * Bullet module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet } from \"./Bullet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar CircleBullet = /** @class */ (function (_super) {\r\n    __extends(CircleBullet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CircleBullet() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"CircleBullet\";\r\n        var circle = _this.createChild(Circle);\r\n        circle.shouldClone = false;\r\n        circle.radius = 5;\r\n        circle.isMeasured = false;\r\n        _this.circle = circle;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Copies all proprities and related stuff from another instance of\r\n     * [[CircleBullet]].\r\n     *\r\n     * @param source  Source element\r\n     */\r\n    CircleBullet.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.circle.copyFrom(source.circle);\r\n    };\r\n    return CircleBullet;\r\n}(Bullet));\r\nexport { CircleBullet };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n//# sourceMappingURL=CircleBullet.js.map","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nvar ClockHand = /** @class */ (function (_super) {\r\n    __extends(ClockHand, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ClockHand() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * An Axis hand is related to.\r\n         */\r\n        _this._axis = new MutableValueDisposer();\r\n        _this.className = \"ClockHand\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        _this.stroke = _this.fill;\r\n        var pin = new Circle();\r\n        pin.radius = 5;\r\n        _this.pin = pin;\r\n        _this.isMeasured = false;\r\n        _this.startWidth = 5;\r\n        _this.endWidth = 1;\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        _this.radius = percent(100);\r\n        _this.innerRadius = percent(0);\r\n        var hand = new Trapezoid();\r\n        _this.hand = hand;\r\n        _this._disposers.push(_this._axis);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Re(validates) the clock hand, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ClockHand.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        var hand = this.hand;\r\n        hand.width = this.pixelWidth;\r\n        var h = Math.max(this.startWidth, this.endWidth);\r\n        hand.height = h;\r\n        hand.leftSide = percent(this.startWidth / h * 100);\r\n        hand.rightSide = percent(this.endWidth / h * 100);\r\n        if (this.axis) {\r\n            var renderer = this.axis.renderer;\r\n            var x0 = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n            var x1 = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n            hand.x = x0;\r\n            hand.y = -h / 2;\r\n            hand.width = x1 - x0;\r\n        }\r\n    };\r\n    Object.defineProperty(ClockHand.prototype, \"pin\", {\r\n        /**\r\n         * @return Pin element\r\n         */\r\n        get: function () {\r\n            return this._pin;\r\n        },\r\n        /**\r\n         * A circle element used as hand's base. (pin)\r\n         *\r\n         * @param pin  Pin element\r\n         */\r\n        set: function (pin) {\r\n            if (this._pin) {\r\n                this.removeDispose(this._pin);\r\n            }\r\n            if (pin) {\r\n                this._pin = pin;\r\n                pin.parent = this;\r\n                this._disposers.push(pin);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"hand\", {\r\n        /**\r\n         * @return Hand element\r\n         */\r\n        get: function () {\r\n            return this._hand;\r\n        },\r\n        /**\r\n         * A trapezoid shape used for hand itself.\r\n         *\r\n         * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n         * `endWidth` properties.\r\n         *\r\n         * Set `endWidth` to 1 (px) to make it pointy.\r\n         *\r\n         * @param hand  Hand element\r\n         */\r\n        set: function (hand) {\r\n            if (this._hand) {\r\n                this.removeDispose(this._hand);\r\n            }\r\n            if (hand) {\r\n                this._hand = hand;\r\n                hand.parent = this;\r\n                this._disposers.push(hand);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"radius\", {\r\n        /**\r\n         * @return Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Radius of the hand's outer end. (tip)\r\n         *\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(0)\r\n         * @param value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Radius of the hand's inner end. (base)\r\n         *\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(0)\r\n         * @param value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"startWidth\", {\r\n        /**\r\n         * @return Width (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startWidth\");\r\n        },\r\n        /**\r\n         * Width, in pixels, of the clock hand's inner end. (base)\r\n         *\r\n         * @default 5\r\n         * @param value  Width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"endWidth\", {\r\n        /**\r\n         * @return Width (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endWidth\");\r\n        },\r\n        /**\r\n         * Width, in pixels, of the clock hand's outer end. (tip)\r\n         *\r\n         * @default 1\r\n         * @param value  Width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"rotationDirection\", {\r\n        /**\r\n         * @return rotationDirection\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"rotationDirection\");\r\n        },\r\n        /**\r\n         * Rotation direction\r\n         *\r\n         * @default any\r\n         * @param value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"rotationDirection\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Moves clock hand to particular value.\r\n     *\r\n     * If `duration` is set to a number in milliseconds, the hand will move\r\n     * to the new position gracefully, rather than jumping rigth to it.\r\n     *\r\n     * Alternatively, you can also set `value` directly.\r\n     *\r\n     * @param value     New value\r\n     * @param duration  Animation duration (ms)\r\n     * @param easing  Animation easing function\r\n     */\r\n    ClockHand.prototype.showValue = function (value, duration, easing) {\r\n        this._value = value;\r\n        if (value != undefined) {\r\n            if (!$type.isNumber(duration)) {\r\n                duration = 0;\r\n            }\r\n            if (this.axis) {\r\n                var renderer = this.axis.renderer;\r\n                var newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n                var currentAngle = this.rotation;\r\n                if (this.rotationDirection == \"clockWise\") {\r\n                    if (newAngle < currentAngle) {\r\n                        this.rotation = currentAngle - 360;\r\n                    }\r\n                }\r\n                if (this.rotationDirection == \"counterClockWise\") {\r\n                    if (newAngle > currentAngle) {\r\n                        this.rotation = currentAngle + 360;\r\n                    }\r\n                }\r\n                this.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(ClockHand.prototype, \"currentPosition\", {\r\n        /**\r\n         * Returns hand's relative position on axis\r\n         */\r\n        get: function () {\r\n            if (this.axis) {\r\n                var renderer = this.axis.renderer;\r\n                return renderer.angleToPosition(this.rotation);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"value\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        /**\r\n         * A current value clock hand is pointing to.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.showValue(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"axis\", {\r\n        /**\r\n         * @return Axis\r\n         */\r\n        get: function () {\r\n            return this._axis.get();\r\n        },\r\n        /**\r\n         * An Axis clock hand is associated with.\r\n         *\r\n         * Hand's `value` relates to values on the Axis.\r\n         *\r\n         * @param axis  Axis\r\n         */\r\n        set: function (axis) {\r\n            if (this.axis != axis) {\r\n                this._axis.set(axis, new MultiDisposer([\r\n                    axis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n                    axis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n                    axis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n                    axis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n                ]));\r\n            }\r\n            if (axis) {\r\n                var chart = axis.chart;\r\n                if (chart) {\r\n                    this.rotation = chart.startAngle;\r\n                }\r\n            }\r\n            this.parent = axis.renderer;\r\n            this.zIndex = 5;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Triggers `value` accessor, so that Hand animates to new position, in case\r\n     * value has changed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ClockHand.prototype.updateValue = function () {\r\n        this.value = this.value;\r\n    };\r\n    /**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n    ClockHand.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Connect clock hands with axes\r\n            if ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n                config.axis = this.map.getKey(config.axis);\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return ClockHand;\r\n}(Container));\r\nexport { ClockHand };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n//# sourceMappingURL=ClockHand.js.map","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar Column = /** @class */ (function (_super) {\r\n    __extends(Column, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Column() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Column\";\r\n        _this.width = percent(80);\r\n        _this.height = percent(80);\r\n        //this.isMeasured = true; // for correct position of the tooltip\r\n        _this.events.disableType(\"transformed\"); // not to bug parent\r\n        _this.applyOnClones = true;\r\n        _this.strokeOpacity = 1;\r\n        _this.layout = \"none\";\r\n        _this.createAssets();\r\n        // otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n        _this.events.on(\"childadded\", _this.handleKidAdded, _this, false);\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    Column.prototype.handleKidAdded = function () {\r\n        if (this.layout == \"none\") {\r\n            this.layout = \"absolute\";\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Column.prototype.createAssets = function () {\r\n        this.column = this.createChild(RoundedRectangle);\r\n        this.column.shouldClone = false;\r\n        this.column.isMeasured = false;\r\n        this.column.cornerRadius(0, 0, 0, 0);\r\n        this._disposers.push(this.column);\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     */\r\n    Column.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        var column = this.column;\r\n        if (column) {\r\n            column.width = $math.min(this.pixelWidth, this.maxWidth);\r\n            column.height = $math.min(this.pixelHeight, this.maxHeight);\r\n            if (column.invalid) {\r\n                column.validate(); // important!\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Column]].\r\n     *\r\n     * @param source Source Column\r\n     */\r\n    Column.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.column) {\r\n            this.column.copyFrom(source.column);\r\n        }\r\n    };\r\n    Object.defineProperty(Column.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        get: function () {\r\n            if (this.definedBBox) {\r\n                return this.definedBBox;\r\n            }\r\n            if (this.column) {\r\n                return { x: 0, y: 0, width: this.column.measuredWidth, height: this.column.measuredHeight };\r\n            }\r\n            else {\r\n                return { x: 0, y: 0, width: $math.min(this.pixelWidth, this.maxWidth), height: $math.min(this.pixelHeight, this.maxHeight) };\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Column;\r\n}(Container));\r\nexport { Column };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n//# sourceMappingURL=Column.js.map","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar Column3D = /** @class */ (function (_super) {\r\n    __extends(Column3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Column3D() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Column3D\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    Column3D.prototype.createAssets = function () {\r\n        this.column3D = this.createChild(Rectangle3D);\r\n        this.column3D.shouldClone = false;\r\n        this.column3D.strokeOpacity = 0;\r\n        // some dirty hack so that if user access column, it won't get error\r\n        this.column = this.column3D;\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     */\r\n    Column3D.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        if (this.column3D) {\r\n            this.column3D.width = this.pixelWidth;\r\n            this.column3D.height = this.pixelHeight;\r\n            if (this.column3D.invalid) {\r\n                this.column3D.validate();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Column3D]].\r\n     *\r\n     * @param source Source Column3D\r\n     */\r\n    Column3D.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.column3D) {\r\n            this.column3D.copyFrom(source.column3D);\r\n        }\r\n    };\r\n    /**\r\n     * Sets actual `fill` property on the SVG element, including applicable color\r\n     * modifiers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Fill\r\n     */\r\n    Column3D.prototype.setFill = function (value) {\r\n        _super.prototype.setFill.call(this, value);\r\n        this.column.fill = value;\r\n    };\r\n    return Column3D;\r\n}(Column));\r\nexport { Column3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n//# sourceMappingURL=Column3D.js.map","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar ConeColumn = /** @class */ (function (_super) {\r\n    __extends(ConeColumn, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ConeColumn() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ConeColumn\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    ConeColumn.prototype.createAssets = function () {\r\n        this.coneColumn = this.createChild(Cone);\r\n        this.coneColumn.shouldClone = false;\r\n        // some dirty hack so that if user access column, it won't get error\r\n        this.column = this.coneColumn;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[ConeColumn]].\r\n     *\r\n     * @param source Source ConeColumn\r\n     */\r\n    ConeColumn.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.coneColumn) {\r\n            this.coneColumn.copyFrom(source.coneColumn);\r\n        }\r\n    };\r\n    return ConeColumn;\r\n}(Column));\r\nexport { ConeColumn };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n//# sourceMappingURL=ConeColumn.js.map","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar CurvedColumn = /** @class */ (function (_super) {\r\n    __extends(CurvedColumn, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CurvedColumn() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"CurvedColumn\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * [createAssets description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    CurvedColumn.prototype.createAssets = function () {\r\n        this.curvedColumn = this.createChild(Sprite);\r\n        this.curvedColumn.shouldClone = false;\r\n        this.setPropertyValue(\"tension\", 0.7);\r\n        this.width = percent(120);\r\n        this.height = percent(120);\r\n        // some dirty hack so that if user access column, it won't get error\r\n        this.column = this.curvedColumn;\r\n    };\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    CurvedColumn.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.realWidth;\r\n        var h = this.realHeight;\r\n        var x = this.realX - this.pixelX;\r\n        var y = this.realY - this.pixelY;\r\n        var points;\r\n        // TODO can this be removed ?\r\n        $utils.used(this.width);\r\n        var tensionX = 1;\r\n        var tensionY = 1;\r\n        if (this.orientation == \"vertical\") {\r\n            tensionX = this.tension;\r\n            points = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n        }\r\n        else {\r\n            tensionY = this.tension;\r\n            points = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n        }\r\n        var path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n        this.column.path = path;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[CurvedColumn]].\r\n     *\r\n     * @param source  Source CurvedColumn\r\n     */\r\n    CurvedColumn.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.curvedColumn) {\r\n            this.curvedColumn.copyFrom(source.curvedColumn);\r\n        }\r\n    };\r\n    Object.defineProperty(CurvedColumn.prototype, \"tension\", {\r\n        /**\r\n         * @return Tension (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tension\");\r\n        },\r\n        /**\r\n         * Horizontal tension of the curve.\r\n         *\r\n         * Tension defines how \"lose\" the line will be.\r\n         *\r\n         * 1 is the maximum tension which would result in pointy columns with\r\n         * straight edges.\r\n         *\r\n         * The smaller the tension th wider the column will be.\r\n         *\r\n         * @default 0.7\r\n         * @param value tension (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tension\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CurvedColumn.prototype, \"orientation\", {\r\n        /**\r\n         * Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the column.\r\n         *\r\n         * Available options: \"vertical\" (default) and \"horizontal\".\r\n         *\r\n         * @default \"vertical\"\r\n         * @param value  Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CurvedColumn;\r\n}(Column));\r\nexport { CurvedColumn };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n//# sourceMappingURL=CurvedColumn.js.map","/**\r\n * Bullet module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet } from \"./Bullet\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar ErrorBullet = /** @class */ (function (_super) {\r\n    __extends(ErrorBullet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ErrorBullet() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ErrorBullet\";\r\n        _this.errorLine = _this.createChild(Sprite);\r\n        _this.errorLine.shouldClone = false;\r\n        _this.width = 20;\r\n        _this.height = 20;\r\n        _this.strokeOpacity = 1;\r\n        _this.isDynamic = true;\r\n        return _this;\r\n    }\r\n    ErrorBullet.prototype.validatePosition = function () {\r\n        _super.prototype.validatePosition.call(this);\r\n        var w = this.pixelWidth / 2;\r\n        var h = this.pixelHeight / 2;\r\n        this.errorLine.path = $path.moveTo({ x: -w, y: -h }) + $path.lineTo({ x: w, y: -h }) + $path.moveTo({ x: 0, y: -h }) + $path.lineTo({ x: 0, y: h }) + $path.moveTo({ x: -w, y: h }) + $path.lineTo({ x: w, y: h });\r\n    };\r\n    /**\r\n     * Copies all proprities and related stuff from another instance of\r\n     * [[ErrorBullet]].\r\n     *\r\n     * @param source  Source element\r\n     */\r\n    ErrorBullet.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.errorLine.copyFrom(source.errorLine);\r\n    };\r\n    return ErrorBullet;\r\n}(Bullet));\r\nexport { ErrorBullet };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ErrorBullet\"] = ErrorBullet;\r\n//# sourceMappingURL=ErrorBullet.js.map","/**\r\n * FlowDiagramLink module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar FlowDiagramLink = /** @class */ (function (_super) {\r\n    __extends(FlowDiagramLink, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FlowDiagramLink() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"FlowDiagramLink\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.maskBullets = false;\r\n        _this.colorMode = \"fromNode\";\r\n        _this.layout = \"none\";\r\n        _this.isMeasured = false;\r\n        _this.startAngle = 0;\r\n        _this.endAngle = 0;\r\n        _this.strokeOpacity = 0;\r\n        // this is very important, otherwise the container will be shifted\r\n        _this.verticalCenter = \"none\";\r\n        _this.horizontalCenter = \"none\";\r\n        _this.tooltipText = \"{fromName}→{toName}:{value.value}\";\r\n        _this.tooltipLocation = 0.5;\r\n        _this.link = _this.createChild(Sprite);\r\n        _this.link.shouldClone = false;\r\n        _this.link.setElement(_this.paper.add(\"path\"));\r\n        _this.link.isMeasured = false;\r\n        _this.fillOpacity = 0.2;\r\n        _this.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Positions bullets\r\n     * @ignore\r\n     */\r\n    FlowDiagramLink.prototype.positionBullets = function () {\r\n        var _this = this;\r\n        $iter.each(this.bullets.iterator(), function (bullet) {\r\n            bullet.parent = _this.bulletsContainer;\r\n            bullet.maxWidth = _this.maxWidth;\r\n            bullet.maxHeight = _this.maxHeight;\r\n            _this.positionBullet(bullet);\r\n        });\r\n    };\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"bulletsContainer\", {\r\n        /**\r\n         * Bullets container\r\n         */\r\n        get: function () {\r\n            if (!this._bulletsContainer) {\r\n                var bulletsContainer = this.createChild(Container);\r\n                bulletsContainer.shouldClone = false;\r\n                bulletsContainer.layout = \"none\";\r\n                this._bulletsContainer = bulletsContainer;\r\n            }\r\n            return this._bulletsContainer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"bulletsMask\", {\r\n        /**\r\n         * Bullets mask sprite\r\n         */\r\n        get: function () {\r\n            if (!this._bulletsMask) {\r\n                var bulletsMask = this.createChild(Sprite);\r\n                bulletsMask.shouldClone = false;\r\n                bulletsMask.setElement(this.paper.add(\"path\"));\r\n                bulletsMask.isMeasured = false;\r\n                this._bulletsMask = bulletsMask;\r\n            }\r\n            return this._bulletsMask;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Positions bullets at relative bullet.locationX position on the link.\r\n     * @ignore\r\n     */\r\n    FlowDiagramLink.prototype.positionBullet = function (bullet) {\r\n        var location = bullet.locationX;\r\n        if (!$type.isNumber(location)) {\r\n            location = bullet.locationY;\r\n        }\r\n        if (!$type.isNumber(location)) {\r\n            location = 0.5;\r\n        }\r\n        var point = this.middleLine.positionToPoint(location);\r\n        bullet.moveTo(point);\r\n        var rotationField = bullet.propertyFields.rotation;\r\n        var angle;\r\n        if (bullet.dataItem) {\r\n            var dataContext = bullet.dataItem.dataContext;\r\n            angle = dataContext[rotationField];\r\n        }\r\n        if (!$type.isNumber(angle)) {\r\n            angle = point.angle;\r\n        }\r\n        bullet.rotation = angle;\r\n    };\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * [startAngle description]\r\n         *\r\n         * @todo Description\r\n         * @param value  Start angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * [endAngle description]\r\n         *\r\n         * @todo Description\r\n         * @param value  End angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"colorMode\", {\r\n        /**\r\n         * Fill mode\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"colorMode\");\r\n        },\r\n        /**\r\n         * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n         * Some of the links, like ChordLink does not support gradiens well.\r\n         *\r\n         * @param value  Fill mode\r\n         */\r\n        set: function (value) {\r\n            if (value == \"gradient\") {\r\n                var color = this.fill;\r\n                this.gradient.stops.clear();\r\n                if (color instanceof Color) {\r\n                    this.gradient.addColor(color);\r\n                    this.gradient.addColor(color);\r\n                }\r\n                this.fill = this.gradient;\r\n                this.stroke = this.gradient;\r\n            }\r\n            this.setPropertyValue(\"colorMode\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"maskBullets\", {\r\n        /**\r\n         * @return mask bullets value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maskBullets\");\r\n        },\r\n        /**\r\n         * Should link bullets be masked or not\r\n         *\r\n         * @param value\r\n         * @default false\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maskBullets\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"tooltipLocation\", {\r\n        /**\r\n         * Tooltip location value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tooltipLocation\");\r\n        },\r\n        /**\r\n         * Relative location of a tooltip.\r\n         * @default 0.5\r\n         *\r\n         * @param value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tooltipLocation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds color steps in the link gradient.\r\n     *\r\n     * @param value  Fill option\r\n     */\r\n    FlowDiagramLink.prototype.setFill = function (value) {\r\n        _super.prototype.setFill.call(this, value);\r\n        var gradient = this._gradient;\r\n        if (gradient && value instanceof Color) {\r\n            gradient.stops.clear();\r\n            gradient.addColor(value);\r\n            gradient.addColor(value);\r\n        }\r\n    };\r\n    /**\r\n     * Updates bounding box based on element dimension settings.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagramLink.prototype.measureElement = function () {\r\n    };\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"bullets\", {\r\n        /**\r\n         * List of bullets\r\n         *\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._bullets) {\r\n                this._bullets = new ListTemplate(new Bullet());\r\n                this._disposers.push(new ListDisposer(this._bullets));\r\n                this._disposers.push(this._bullets.template);\r\n                this._bullets.events.on(\"inserted\", function (event) {\r\n                    event.newValue.events.on(\"propertychanged\", function (event) {\r\n                        if (event.property == \"locationX\" || event.property == \"locationY\") {\r\n                            _this.positionBullet(event.target);\r\n                        }\r\n                    }, undefined, false);\r\n                }, undefined, false);\r\n            }\r\n            return this._bullets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies properties from another [[FlowDiagramLink]].\r\n     *\r\n     * @param source  Source link\r\n     */\r\n    FlowDiagramLink.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.bullets.copyFrom(source.bullets);\r\n        var middleLine = this.middleLine;\r\n        if (middleLine) {\r\n            if (middleLine instanceof Line && source.middleLine instanceof Line) {\r\n                middleLine.copyFrom(source.middleLine);\r\n            }\r\n            if (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\r\n                middleLine.copyFrom(source.middleLine);\r\n            }\r\n        }\r\n        this.link.copyFrom(source.link);\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Tooltip X (px)\r\n     */\r\n    FlowDiagramLink.prototype.getTooltipX = function () {\r\n        if (this.middleLine) {\r\n            return this.middleLine.positionToPoint(this.tooltipLocation).x;\r\n        }\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Tooltip Y (px)\r\n     */\r\n    FlowDiagramLink.prototype.getTooltipY = function () {\r\n        if (this.middleLine) {\r\n            return this.middleLine.positionToPoint(this.tooltipLocation).y;\r\n        }\r\n    };\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"gradient\", {\r\n        /**\r\n         * A gradiend instance that is used to provided colored gradient fills for\r\n         * the Flow link.\r\n         */\r\n        get: function () {\r\n            if (!this._gradient) {\r\n                this._gradient = new LinearGradient();\r\n            }\r\n            return this._gradient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FlowDiagramLink;\r\n}(Container));\r\nexport { FlowDiagramLink };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;\r\n//# sourceMappingURL=FlowDiagramLink.js.map","/**\r\n * FlowDiagramNode module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendSettings } from \"../Legend\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar FlowDiagramNode = /** @class */ (function (_super) {\r\n    __extends(FlowDiagramNode, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FlowDiagramNode() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Settings for the appearance of the related legend items.\r\n         */\r\n        _this.legendSettings = new LegendSettings();\r\n        _this.className = \"FlowDiagramNode\";\r\n        _this.isMeasured = false;\r\n        // TODO can this be removed ?\r\n        new InterfaceColorSet();\r\n        _this.draggable = true;\r\n        _this.inert = true;\r\n        _this.setStateOnChildren = true;\r\n        _this.events.on(\"positionchanged\", _this.invalidateLinks, _this, false);\r\n        _this.events.on(\"sizechanged\", _this.invalidateLinks, _this, false);\r\n        return _this;\r\n        //this.events.on(\"hit\", this.handleHit, this, false);\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagramNode.prototype.handleHit = function (event) {\r\n        if (this.isHidden || this.isHiding) {\r\n            this.show();\r\n        }\r\n        else {\r\n            this.hide();\r\n        }\r\n    };\r\n    /**\r\n     * Shows hidden node.\r\n     *\r\n     * @param duration  Duration of reveal animation (ms)\r\n     * @return Animation\r\n     */\r\n    FlowDiagramNode.prototype.show = function (duration) {\r\n        var animation = _super.prototype.show.call(this, duration);\r\n        this.outgoingDataItems.each(function (dataItem) {\r\n            if (!dataItem.toNode || (dataItem.toNode && !dataItem.toNode.isHidden)) {\r\n                dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n            }\r\n        });\r\n        this.incomingDataItems.each(function (dataItem) {\r\n            if (!dataItem.fromNode || (dataItem.fromNode && !dataItem.fromNode.isHidden)) {\r\n                dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n            }\r\n        });\r\n        return animation;\r\n    };\r\n    /**\r\n     * Hides node.\r\n     *\r\n     * @param duration  Duration of hiding animation (ms)\r\n     * @return Animation\r\n     */\r\n    FlowDiagramNode.prototype.hide = function (duration) {\r\n        var animation = _super.prototype.hide.call(this, duration);\r\n        this.outgoingDataItems.each(function (dataItem) {\r\n            dataItem.setWorkingValue(\"value\", 0, duration);\r\n        });\r\n        this.incomingDataItems.each(function (dataItem) {\r\n            dataItem.setWorkingValue(\"value\", 0, duration);\r\n        });\r\n        return animation;\r\n    };\r\n    /**\r\n     * Marks node as invalid, for redrawal in the next update cycle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagramNode.prototype.validate = function () {\r\n        if (!this.isDisposed()) {\r\n            _super.prototype.validate.call(this);\r\n            this.invalidateLinks();\r\n        }\r\n    };\r\n    /**\r\n     * Invalidates all links, attached to this node.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagramNode.prototype.invalidateLinks = function () {\r\n        var _this = this;\r\n        this.outgoingDataItems.each(function (dataItem) {\r\n            var link = dataItem.link;\r\n            if (link.colorMode == \"fromNode\") {\r\n                link.fill = link.dataItem.fromNode.color;\r\n            }\r\n            if (link.colorMode == \"gradient\") {\r\n                link.fill = link.gradient;\r\n                link.stroke = link.gradient;\r\n                var stop_1 = link.gradient.stops.getIndex(0);\r\n                if (stop_1) {\r\n                    stop_1.color = _this.color;\r\n                    link.gradient.validate();\r\n                }\r\n            }\r\n        });\r\n        this.incomingDataItems.each(function (dataItem) {\r\n            var link = dataItem.link;\r\n            if (link.colorMode == \"toNode\") {\r\n                link.fill = link.dataItem.toNode.color;\r\n            }\r\n            if (link.colorMode == \"gradient\") {\r\n                link.fill = link.gradient;\r\n                link.stroke = link.gradient;\r\n                var stop_2 = link.gradient.stops.getIndex(1);\r\n                if (stop_2) {\r\n                    stop_2.color = _this.color;\r\n                    link.gradient.validate();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"incomingDataItems\", {\r\n        /**\r\n         * List of incoming items (links).\r\n         *\r\n         * @readonly\r\n         * @return Incoming items\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._incomingDataItems) {\r\n                var incomingDataItems = new List();\r\n                incomingDataItems.events.on(\"inserted\", function () {\r\n                    if (_this.chart.sortBy == \"name\") {\r\n                        _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) { return $string.order(x.fromName, y.fromName); });\r\n                    }\r\n                    else if (_this.chart.sortBy == \"value\") {\r\n                        _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) { return $order.reverse($number.order(x.value, y.value)); });\r\n                    }\r\n                    else {\r\n                        _this._incomingSorted = _this._incomingDataItems.iterator();\r\n                    }\r\n                }, undefined, false);\r\n                this._incomingDataItems = incomingDataItems;\r\n            }\r\n            return this._incomingDataItems;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"outgoingDataItems\", {\r\n        /**\r\n         * List of outgoing items (links).\r\n         *\r\n         * @readonly\r\n         * @return Outgoing items\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._outgoingDataItems) {\r\n                var outgoingDataItems = new List();\r\n                outgoingDataItems.events.on(\"inserted\", function () {\r\n                    if (_this.chart.sortBy == \"name\") {\r\n                        _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) { return $string.order(x.fromName, y.fromName); });\r\n                    }\r\n                    else if (_this.chart.sortBy == \"value\") {\r\n                        _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) { return $order.reverse($number.order(x.value, y.value)); });\r\n                    }\r\n                    else {\r\n                        _this._outgoingSorted = _this._outgoingDataItems.iterator();\r\n                    }\r\n                }, undefined, false);\r\n                this._outgoingDataItems = outgoingDataItems;\r\n            }\r\n            return this._outgoingDataItems;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"name\", {\r\n        /**\r\n         * @return Name\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"name\");\r\n        },\r\n        /**\r\n         * A name of the node.\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"name\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"total\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"total\");\r\n        },\r\n        /**\r\n         * Sum of all incoming+outgoing link values\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"total\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"totalIncoming\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"totalIncoming\");\r\n        },\r\n        /**\r\n         * Sum of all incomming link values.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"totalIncoming\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"totalOutgoing\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"totalOutgoing\");\r\n        },\r\n        /**\r\n         * Sum of all outgoing link values.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"totalOutgoing\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"color\", {\r\n        /**\r\n         * @return Color\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"color\");\r\n        },\r\n        /**\r\n         * Node's color.\r\n         *\r\n         * @param value  Color\r\n         */\r\n        set: function (value) {\r\n            this.setColorProperty(\"color\", value);\r\n            if (this._background) {\r\n                this._background.fill = value;\r\n            }\r\n            this.fill = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param marker  Legend item container\r\n     */\r\n    FlowDiagramNode.prototype.createLegendMarker = function (marker) {\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.removeChildren();\r\n        var column = marker.createChild(RoundedRectangle);\r\n        column.shouldClone = false;\r\n        $object.copyProperties(this, column, visualProperties);\r\n        column.stroke = this.fill;\r\n        column.copyFrom(this);\r\n        column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n        column.width = w;\r\n        column.height = h;\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = column.fill;\r\n        legendDataItem.colorOrig = column.fill;\r\n    };\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"legendDataItem\", {\r\n        /**\r\n         * @return Data item\r\n         */\r\n        get: function () {\r\n            return this._legendDataItem;\r\n        },\r\n        /**\r\n         * Legend data item that corresponds to this series.\r\n         *\r\n         * @param value  Data item\r\n         */\r\n        set: function (value) {\r\n            this._legendDataItem = value;\r\n            this._legendDataItem.itemContainer.deepInvalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FlowDiagramNode;\r\n}(Container));\r\nexport { FlowDiagramNode };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;\r\n//# sourceMappingURL=FlowDiagramNode.js.map","/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nvar FunnelSlice = /** @class */ (function (_super) {\r\n    __extends(FunnelSlice, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FunnelSlice() {\r\n        var _this = _super.call(this) || this;\r\n        _this.slice = _this.createChild(Sprite);\r\n        _this.slice.shouldClone = false;\r\n        _this.slice.setElement(_this.paper.add(\"path\"));\r\n        _this.slice.isMeasured = false;\r\n        _this.orientation = \"vertical\";\r\n        _this.bottomWidth = percent(100);\r\n        _this.topWidth = percent(100);\r\n        _this.isMeasured = false;\r\n        _this.width = 10;\r\n        _this.height = 10;\r\n        _this.expandDistance = 0;\r\n        _this.className = \"FunnelSlice\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     */\r\n    FunnelSlice.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var pt = this.pixelPaddingTop;\r\n        var pb = this.pixelPaddingBottom;\r\n        var pr = this.pixelPaddingRight;\r\n        var pl = this.pixelPaddingLeft;\r\n        var w = this.pixelWidth - pr - pl;\r\n        var h = this.pixelHeight - pt - pb;\r\n        var ed = this.expandDistance;\r\n        var path = \"\";\r\n        if (this.orientation == \"vertical\") {\r\n            var tw = $utils.relativeToValue(this.topWidth, w);\r\n            var bw = $utils.relativeToValue(this.bottomWidth, w);\r\n            var tl = { x: (w - tw) / 2 + pl, y: pt };\r\n            var tr = { x: (w + tw) / 2 + pl, y: pt };\r\n            var br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n            var bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n            var cpr = { x: tr.x + (br.x - tr.x) / 2 + ed * h, y: tr.y + 0.5 * h };\r\n            var cpl = { x: tl.x + (bl.x - tl.x) / 2 - ed * h, y: tl.y + 0.5 * h };\r\n            var qp1 = $path.lineTo(br);\r\n            var qp2 = \"\";\r\n            if (ed != 0) {\r\n                qp1 = $path.quadraticCurveTo(br, cpr);\r\n                qp2 = $path.quadraticCurveTo(tl, cpl);\r\n            }\r\n            path = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\r\n            this.tickPoint = { x: tr.x + (br.x - tr.x) / 2, y: tr.y + (br.y - tr.y) / 2 };\r\n        }\r\n        else {\r\n            var tw = $utils.relativeToValue(this.topWidth, h);\r\n            var bw = $utils.relativeToValue(this.bottomWidth, h);\r\n            var tt = { x: pl, y: (h - tw) / 2 + pt };\r\n            var tb = { x: pl, y: (h + tw) / 2 + pt };\r\n            var bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n            var bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n            var cpr = { y: tt.y + (bt.y - tt.y) / 2 - ed * w, x: tt.x + 0.5 * w };\r\n            var cpl = { y: tb.y + (bb.y - tb.y) / 2 + ed * w, x: tb.x + 0.5 * w };\r\n            var qp1 = $path.lineTo(bt);\r\n            var qp2 = \"\";\r\n            if (ed != 0) {\r\n                qp1 = $path.quadraticCurveTo(bt, cpr);\r\n                qp2 = $path.quadraticCurveTo(tb, cpl);\r\n            }\r\n            path = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\r\n            this.tickPoint = { y: tb.y + (bb.y - tb.y) / 2, x: tb.x + (bb.x - tb.x) / 2 };\r\n        }\r\n        this.slice.path = path;\r\n        this.invalidateLayout();\r\n    };\r\n    FunnelSlice.prototype.getPoint = function (locationX, locationY) {\r\n        var pt = this.pixelPaddingTop;\r\n        var pb = this.pixelPaddingBottom;\r\n        var pr = this.pixelPaddingRight;\r\n        var pl = this.pixelPaddingLeft;\r\n        var w = this.pixelWidth - pr - pl;\r\n        var h = this.pixelHeight - pt - pb;\r\n        if (this.orientation == \"vertical\") {\r\n            var tw = $utils.relativeToValue(this.topWidth, w);\r\n            var bw = $utils.relativeToValue(this.bottomWidth, w);\r\n            var tl = { x: (w - tw) / 2 + pl, y: pt };\r\n            var tr = { x: (w + tw) / 2 + pl, y: pt };\r\n            var br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n            var bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n            var mlx = tl.x + (bl.x - tl.x) * locationY;\r\n            var mrx = tr.x + (br.x - tr.x) * locationY;\r\n            return { x: mlx + (mrx - mlx) * locationX, y: tr.y + (br.y - tr.y) * locationY };\r\n        }\r\n        else {\r\n            var tw = $utils.relativeToValue(this.topWidth, h);\r\n            var bw = $utils.relativeToValue(this.bottomWidth, h);\r\n            var tt = { x: pl, y: (h - tw) / 2 + pt };\r\n            var tb = { x: pl, y: (h + tw) / 2 + pt };\r\n            var bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n            var bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n            var mty = tt.y + (bt.y - tt.y) * locationX;\r\n            var mby = tb.y + (bb.y - tb.y) * locationX;\r\n            return { y: mty + (mby - mty) * locationY, x: tt.x + (bt.x - tt.x) * locationX };\r\n        }\r\n    };\r\n    Object.defineProperty(FunnelSlice.prototype, \"bottomWidth\", {\r\n        /**\r\n         * @return bottom width\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"bottomWidth\");\r\n        },\r\n        /**\r\n         * Bottom width in pixels or percent.\r\n         *\r\n         * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n         * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n         * becomes read-only as it will be automatically reset by series.\r\n         *\r\n         * @param value  Bottom width\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelSlice.prototype, \"topWidth\", {\r\n        /**\r\n         * @return Top width\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"topWidth\");\r\n        },\r\n        /**\r\n         * Top width in pixels or percent.\r\n         *\r\n         * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n         * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n         * becomes read-only as it will be automatically reset by series.\r\n         *\r\n         * @param value  Top width\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"topWidth\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelSlice.prototype, \"orientation\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n         *\r\n         * IMPORTANT: this setting might be used to set orintation if you use slice\r\n         * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n         * becomes read-only as it will be automatically reset by series.\r\n         *\r\n         * @param value  Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelSlice.prototype, \"expandDistance\", {\r\n        /**\r\n         * @return expandDistance\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"expandDistance\");\r\n        },\r\n        /**\r\n         * A relative distance slice's sides should be bent to. It's relative to the\r\n         * height of the slice.\r\n         *\r\n         * Zero (default) will mean the sides will be perfectly straight.\r\n         *\r\n         * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n         *\r\n         * Negative values will make them bend inwards.\r\n         *\r\n         * @default 0\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"expandDistance\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all parameters from another [[Sprite]].\r\n     *\r\n     * @param source Source Sprite\r\n     */\r\n    FunnelSlice.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.slice) {\r\n            this.slice.copyFrom(source.slice);\r\n        }\r\n    };\r\n    return FunnelSlice;\r\n}(Container));\r\nexport { FunnelSlice };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;\r\n//# sourceMappingURL=FunnelSlice.js.map","/**\r\n * Funnel tick module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick } from \"../elements/Tick\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws an tick line for a funnel slice connecting it to a related label.\r\n *\r\n * @see {@link IFunnelTickEvents} for a list of available events\r\n * @see {@link IFunnelTickAdapters} for a list of available Adapters\r\n */\r\nvar FunnelTick = /** @class */ (function (_super) {\r\n    __extends(FunnelTick, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FunnelTick() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A label element this tick is attached to.\r\n         */\r\n        _this._label = new MutableValueDisposer();\r\n        /**\r\n         * A slice element this tick is attached to.\r\n         */\r\n        _this._slice = new MutableValueDisposer();\r\n        _this.className = \"FunnelTick\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this._disposers.push(_this._label);\r\n        _this._disposers.push(_this._slice);\r\n        _this.setPropertyValue(\"locationX\", 0);\r\n        _this.setPropertyValue(\"locationY\", 0);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FunnelTick.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var slice = this.slice;\r\n        var point = slice.getPoint(this.locationX, this.locationY);\r\n        if (point) {\r\n            var label = this.label;\r\n            var series = slice.dataItem.component;\r\n            var p0 = void 0;\r\n            var p1 = void 0;\r\n            var p2 = void 0;\r\n            if (series.orientation == \"vertical\") {\r\n                var x1 = label.pixelX;\r\n                var y1 = label.pixelY;\r\n                if (!series.labelsOpposite) {\r\n                    x1 += label.maxRight;\r\n                }\r\n                p0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n                p2 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n                p1 = { x: label.parent.pixelX - this.length, y: p2.y };\r\n                if (!series.labelsOpposite) {\r\n                    p1.x = label.parent.measuredWidth + this.length;\r\n                }\r\n            }\r\n            else {\r\n                var x1 = label.pixelX;\r\n                var y1 = label.pixelY;\r\n                if (!series.labelsOpposite) {\r\n                    y1 += label.maxBottom;\r\n                }\r\n                p0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n                p2 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n                p1 = { x: p2.x, y: label.parent.pixelY - this.length };\r\n                if (!series.labelsOpposite) {\r\n                    p1.y = label.parent.measuredHeight + this.length;\r\n                }\r\n            }\r\n            this.path = $path.moveTo(p0) + $path.lineTo(p1) + $path.lineTo(p2);\r\n        }\r\n    };\r\n    Object.defineProperty(FunnelTick.prototype, \"slice\", {\r\n        /**\r\n         * @return FunnelSlice\r\n         */\r\n        get: function () {\r\n            return this._slice.get();\r\n        },\r\n        /**\r\n         * [[FunnelSlice]] element tick is attached to.\r\n         *\r\n         * @param slice  Slice\r\n         */\r\n        set: function (slice) {\r\n            this._slice.set(slice, new MultiDisposer([\r\n                slice.events.on(\"transformed\", this.invalidate, this, false),\r\n                slice.events.on(\"validated\", this.invalidate, this, false)\r\n            ]));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelTick.prototype, \"label\", {\r\n        /**\r\n         * @return Label\r\n         */\r\n        get: function () {\r\n            return this._label.get();\r\n        },\r\n        /**\r\n         * [[Label]] element tick is attached to.\r\n         *\r\n         * @param label  Label\r\n         */\r\n        set: function (label) {\r\n            this._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelTick.prototype, \"locationX\", {\r\n        /**\r\n         * @return Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"locationX\");\r\n        },\r\n        /**\r\n         * A relative horizontal position within target element a tick is pointing\r\n         * to.\r\n         *\r\n         * A scale is from 0 to 1, where 0 means left edge, and 1 right edge.\r\n         *\r\n         * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n         * of the slice), or outside 0-1 range, which will put tick anchor position\r\n         * outside target element.\r\n         *\r\n         * @param value  Location (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"locationX\", value, false, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelTick.prototype, \"locationY\", {\r\n        /**\r\n         * @return Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"locationY\");\r\n        },\r\n        /**\r\n         * A relative vertical position within target element a tick is pointing\r\n         * to.\r\n         *\r\n         * A scale is from 0 to 1, where 0 means top edge, and 1 bottom edge.\r\n         *\r\n         * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n         * of the slice), or outside 0-1 range, which will put tick anchor position\r\n         * outside target element.\r\n         *\r\n         * @param value  Location (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"locationY\", value, false, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FunnelTick;\r\n}(Tick));\r\nexport { FunnelTick };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelTick\"] = FunnelTick;\r\n//# sourceMappingURL=FunnelTick.js.map","/**\r\n * Bullet module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet } from \"./Bullet\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar LabelBullet = /** @class */ (function (_super) {\r\n    __extends(LabelBullet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LabelBullet() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"LabelBullet\";\r\n        var label = _this.createChild(Label);\r\n        label.shouldClone = false;\r\n        label.verticalCenter = \"middle\";\r\n        label.horizontalCenter = \"middle\";\r\n        label.truncate = true;\r\n        label.hideOversized = false;\r\n        label.maxWidth = 500;\r\n        label.maxHeight = 500;\r\n        label.stroke = color();\r\n        label.strokeOpacity = 0;\r\n        label.fill = new InterfaceColorSet().getFor(\"text\");\r\n        _this.events.on(\"maxsizechanged\", _this.handleMaxSize, _this, false);\r\n        _this.label = label;\r\n        // not good, as lineSeries will have labels somewhere in the middle.\r\n        //this.locationX = 0.5;\r\n        //this.locationY = 0.5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    LabelBullet.prototype.handleMaxSize = function () {\r\n        this.label.maxWidth = this.maxWidth;\r\n        this.label.maxHeight = this.maxHeight;\r\n    };\r\n    /**\r\n     * Copies all proprities and related stuff from another instance of\r\n     * [[LabelBullet]].\r\n     *\r\n     * @param source  Source element\r\n     */\r\n    LabelBullet.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.label.copyFrom(source.label);\r\n    };\r\n    return LabelBullet;\r\n}(Bullet));\r\nexport { LabelBullet };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LabelBullet\"] = LabelBullet;\r\n//# sourceMappingURL=LabelBullet.js.map","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component } from \"../../core/Component\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar NavigationBarDataItem = /** @class */ (function (_super) {\r\n    __extends(NavigationBarDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function NavigationBarDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"NavigationBarDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NavigationBarDataItem.prototype, \"name\", {\r\n        /**\r\n         * @return Name\r\n         */\r\n        get: function () {\r\n            return this.properties[\"name\"];\r\n        },\r\n        /**\r\n         * Name of the navigation bar item.\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"name\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return NavigationBarDataItem;\r\n}(DataItem));\r\nexport { NavigationBarDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nvar NavigationBar = /** @class */ (function (_super) {\r\n    __extends(NavigationBar, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function NavigationBar() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"NavigationBar\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        var textLink = new TextLink();\r\n        textLink.valign = \"middle\";\r\n        textLink.paddingTop = 8;\r\n        textLink.paddingBottom = 8;\r\n        _this.paddingBottom = 2;\r\n        _this.links = new ListTemplate(textLink);\r\n        _this._disposers.push(new ListDisposer(_this.links));\r\n        _this._disposers.push(textLink);\r\n        _this._linksIterator = new $iter.ListIterator(_this.links, function () { return _this.links.create(); });\r\n        _this._linksIterator.createNewItems = true;\r\n        var triangle = new Triangle();\r\n        triangle.direction = \"right\";\r\n        triangle.width = 8;\r\n        triangle.height = 12;\r\n        triangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        triangle.fillOpacity = 0.5;\r\n        triangle.valign = \"middle\";\r\n        triangle.marginLeft = 10;\r\n        triangle.marginRight = 10;\r\n        _this.separators = new ListTemplate(triangle);\r\n        _this._disposers.push(new ListDisposer(_this.separators));\r\n        _this._disposers.push(triangle);\r\n        var activeLink = new TextLink();\r\n        _this.activeLink = activeLink;\r\n        activeLink.copyFrom(textLink);\r\n        activeLink.valign = \"middle\";\r\n        activeLink.fontWeight = \"bold\";\r\n        _this.width = percent(100);\r\n        _this.layout = \"grid\";\r\n        _this.dataFields.name = \"name\";\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Completely redraws the navigation bar.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    NavigationBar.prototype.validateDataElements = function () {\r\n        this.removeChildren();\r\n        this._linksIterator.reset();\r\n        _super.prototype.validateDataElements.call(this);\r\n        //@todo: dispose\r\n    };\r\n    /**\r\n     * Creates a visual element for a data item (nav item).\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    NavigationBar.prototype.validateDataElement = function (dataItem) {\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n        var textLink;\r\n        if (dataItem.index < this.dataItems.length - 1) {\r\n            textLink = this._linksIterator.getLast();\r\n            textLink.parent = this;\r\n            var separator = this.separators.create();\r\n            separator.parent = this;\r\n            separator.valign = \"middle\";\r\n        }\r\n        else {\r\n            textLink = this.activeLink;\r\n            textLink.events.copyFrom(this.links.template.events);\r\n            textLink.hide(0);\r\n            textLink.show();\r\n            textLink.parent = this;\r\n        }\r\n        textLink.dataItem = dataItem;\r\n        textLink.text = dataItem.name;\r\n        textLink.validate();\r\n    };\r\n    return NavigationBar;\r\n}(Component));\r\nexport { NavigationBar };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n//# sourceMappingURL=NavigationBar.js.map","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick } from \"./Candlestick\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar OHLC = /** @class */ (function (_super) {\r\n    __extends(OHLC, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function OHLC() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"OHLC\";\r\n        _this.layout = \"none\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    OHLC.prototype.createAssets = function () {\r\n        //super.createAssets();\r\n        this.openLine = this.createChild(Line);\r\n        this.openLine.shouldClone = false;\r\n        this.highLowLine = this.createChild(Line);\r\n        this.highLowLine.shouldClone = false;\r\n        this.closeLine = this.createChild(Line);\r\n        this.closeLine.shouldClone = false;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[OHLC]].\r\n     *\r\n     * @param source Source OHLC\r\n     */\r\n    OHLC.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.openLine) {\r\n            this.openLine.copyFrom(source.openLine);\r\n        }\r\n        if (this.highLowLine) {\r\n            this.highLowLine.copyFrom(source.highLowLine);\r\n        }\r\n        if (this.closeLine) {\r\n            this.closeLine.copyFrom(source.closeLine);\r\n        }\r\n    };\r\n    return OHLC;\r\n}(Candlestick));\r\nexport { OHLC };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n//# sourceMappingURL=OHLC.js.map","/**\r\n * Pie tick module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick } from \"../elements/Tick\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nvar PieTick = /** @class */ (function (_super) {\r\n    __extends(PieTick, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieTick() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A label element this tick is attached to.\r\n         */\r\n        _this._label = new MutableValueDisposer();\r\n        /**\r\n         * A slice element this tick is attached to.\r\n         */\r\n        _this._slice = new MutableValueDisposer();\r\n        _this.className = \"PieTick\";\r\n        _this.element = _this.paper.add(\"polyline\");\r\n        _this._disposers.push(_this._label);\r\n        _this._disposers.push(_this._slice);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PieTick.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var slice = this.slice;\r\n        var label = this.label;\r\n        var series = slice.dataItem.component;\r\n        if (slice && slice.radius > 0 && label && label.text) {\r\n            var x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n            var y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radiusY * slice.scale;\r\n            var x1 = void 0;\r\n            var y1 = void 0;\r\n            var x2 = void 0;\r\n            var y2 = void 0;\r\n            if (series.alignLabels) {\r\n                x1 = label.pixelX - this.length;\r\n                y1 = label.pixelY;\r\n                x2 = label.pixelX;\r\n                y2 = y1;\r\n                if (label.horizontalCenter == \"right\") {\r\n                    x1 += 2 * this.length;\r\n                    x2 = x1 - this.length;\r\n                }\r\n            }\r\n            else {\r\n                var r = label.pixelRadius(slice.radius);\r\n                x1 = x0 + r * slice.ix;\r\n                y1 = y0 + r * slice.iy;\r\n                x2 = x1;\r\n                y2 = y1;\r\n            }\r\n            this.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n        }\r\n    };\r\n    Object.defineProperty(PieTick.prototype, \"slice\", {\r\n        /**\r\n         * @return Slice\r\n         */\r\n        get: function () {\r\n            return this._slice.get();\r\n        },\r\n        /**\r\n         * Slice element tick is attached to.\r\n         *\r\n         * @param slice  Slice\r\n         */\r\n        set: function (slice) {\r\n            this._slice.set(slice, new MultiDisposer([\r\n                slice.events.on(\"transformed\", this.invalidate, this),\r\n                slice.events.on(\"validated\", this.invalidate, this)\r\n            ]));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieTick.prototype, \"label\", {\r\n        /**\r\n         * @return Label\r\n         */\r\n        get: function () {\r\n            return this._label.get();\r\n        },\r\n        /**\r\n         * Label element tick is attached to.\r\n         *\r\n         * @param label  Label\r\n         */\r\n        set: function (label) {\r\n            this._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PieTick;\r\n}(Tick));\r\nexport { PieTick };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n//# sourceMappingURL=PieTick.js.map","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar RadarColumn = /** @class */ (function (_super) {\r\n    __extends(RadarColumn, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarColumn() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"RadarColumn\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    RadarColumn.prototype.createAssets = function () {\r\n        this.radarColumn = this.createChild(Slice);\r\n        this.radarColumn.shouldClone = false;\r\n        this.radarColumn.strokeOpacity = undefined;\r\n        // some dirty hack so that if user access column, it won't get error\r\n        this.column = this.radarColumn;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[RadarColumn]].\r\n     *\r\n     * @param source Source RadarColumn\r\n     */\r\n    RadarColumn.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.radarColumn) {\r\n            this.radarColumn.copyFrom(source.radarColumn);\r\n        }\r\n    };\r\n    /**\r\n     * X coordinate for the slice tooltip.\r\n     *\r\n     * @return X\r\n     * @ignore\r\n     */\r\n    RadarColumn.prototype.getTooltipX = function () {\r\n        var value = this.getPropertyValue(\"tooltipX\");\r\n        if (!$type.isNumber(value)) {\r\n            return this.radarColumn.getTooltipX();\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Y coordinate for the slice tooltip.\r\n     *\r\n     * @return Y\r\n     * @ignore\r\n     */\r\n    RadarColumn.prototype.getTooltipY = function () {\r\n        var value = this.getPropertyValue(\"tooltipX\");\r\n        if (!$type.isNumber(value)) {\r\n            return this.radarColumn.getTooltipY();\r\n        }\r\n        return value;\r\n    };\r\n    return RadarColumn;\r\n}(Column));\r\nexport { RadarColumn };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n//# sourceMappingURL=RadarColumn.js.map","/**\r\n * SankeyLink module\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { FlowDiagramLink } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link ISankeyLinkEvents} for a list of available events\r\n * @see {@link ISankeyLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar SankeyLink = /** @class */ (function (_super) {\r\n    __extends(SankeyLink, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SankeyLink() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"SankeyLink\";\r\n        // TODO can this be removed ?\r\n        new InterfaceColorSet();\r\n        _this.tension = 0.8;\r\n        _this.controlPointDistance = 0.2;\r\n        _this.startAngle = 0;\r\n        _this.endAngle = 0;\r\n        _this.linkWidth = 0;\r\n        _this.startX = 0;\r\n        _this.endX = 0;\r\n        _this.startY = 0;\r\n        _this.endY = 0;\r\n        _this.middleLine = _this.createChild(Polyspline);\r\n        _this.middleLine.shouldClone = false;\r\n        _this.middleLine.strokeOpacity = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates (redraws) the link.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SankeyLink.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        if (!this.isTemplate) {\r\n            var x0 = this.startX;\r\n            var y0 = this.startY;\r\n            var x1 = this.endX;\r\n            var y1 = this.endY;\r\n            if (!$type.isNumber(x1)) {\r\n                x1 = x0;\r\n            }\r\n            if (!$type.isNumber(y1)) {\r\n                y1 = y0;\r\n            }\r\n            var startAngle = this.startAngle;\r\n            var endAngle = this.endAngle;\r\n            var w = this.linkWidth;\r\n            var path = \"\";\r\n            var xt0 = x0;\r\n            var yt0 = y0;\r\n            var xt1 = x1;\r\n            var yt1 = y1;\r\n            var xb0 = x0 + w * $math.sin(startAngle);\r\n            var xb1 = x1 + w * $math.sin(endAngle);\r\n            var yb0 = y0 + w * $math.cos(startAngle);\r\n            var yb1 = y1 + w * $math.cos(endAngle);\r\n            var xm0 = x0 + w / 2 * $math.sin(startAngle);\r\n            var xm1 = x1 + w / 2 * $math.sin(endAngle);\r\n            var ym0 = y0 + w / 2 * $math.cos(startAngle);\r\n            var ym1 = y1 + w / 2 * $math.cos(endAngle);\r\n            this.zIndex = this.zIndex || this.dataItem.index;\r\n            var tensionX = this.tension + (1 - this.tension) * $math.sin(startAngle);\r\n            var tensionY = this.tension + (1 - this.tension) * $math.cos(startAngle);\r\n            this.middleLine.tensionX = tensionX;\r\n            this.middleLine.tensionY = tensionY;\r\n            if ($type.isNumber(w) && ($type.isNumber(x0) && $type.isNumber(x1) && $type.isNumber(y0) && $type.isNumber(y1))) {\r\n                // solves issues with gradient fill of straight lines\r\n                if ($math.round(xt0, 3) == $math.round(xt1, 3)) {\r\n                    xt1 += 0.01;\r\n                }\r\n                if ($math.round(yt0, 3) == $math.round(yt1, 3)) {\r\n                    yt1 += 0.01;\r\n                }\r\n                if ($math.round(xb0, 3) == $math.round(xb1, 3)) {\r\n                    xb1 += 0.01;\r\n                }\r\n                if ($math.round(yb0, 3) == $math.round(yb1, 3)) {\r\n                    yb1 += 0.01;\r\n                }\r\n                var minX = Math.min(xb0, xb1, xt0, xt1);\r\n                var minY = Math.min(yb0, yb1, yt0, yt1);\r\n                var maxX = Math.max(xb0, xb1, xt0, xt1);\r\n                var maxY = Math.max(yb0, yb1, yt0, yt1);\r\n                this._bbox = {\r\n                    x: minX,\r\n                    y: minY,\r\n                    width: maxX - minX,\r\n                    height: maxY - minY\r\n                };\r\n                var cpd = this.controlPointDistance;\r\n                var kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(startAngle);\r\n                var kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(startAngle);\r\n                var kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(endAngle);\r\n                var kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(endAngle);\r\n                var kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(startAngle);\r\n                var kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(startAngle);\r\n                var kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(endAngle);\r\n                var kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(endAngle);\r\n                var angle = $math.getAngle({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });\r\n                var dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(startAngle);\r\n                var dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(startAngle);\r\n                var kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(startAngle);\r\n                var kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(startAngle);\r\n                var kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(endAngle);\r\n                var kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(endAngle);\r\n                this.middleLine.segments = [[{ x: xm0, y: ym0 }, { x: kxm0, y: kym0 }, { x: kxm1, y: kym1 }, { x: xm1, y: ym1 }]];\r\n                kxt0 += dx / 2;\r\n                kyt0 += dy / 2;\r\n                kxt1 += dx / 2;\r\n                kyt1 += dy / 2;\r\n                path += $path.moveTo({ x: xt0, y: yt0 });\r\n                path += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xt0, y: yt0 }, { x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 }, { x: xt1, y: yt1 }]);\r\n                path += $path.lineTo({ x: xb1, y: yb1 });\r\n                path += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xb1, y: yb1 }, { x: kxb1, y: kyb1 }, { x: kxb0, y: kyb0 }, { x: xb0, y: yb0 }]);\r\n                path += $path.closePath();\r\n            }\r\n            this.link.path = path;\r\n            if (this.maskBullets) {\r\n                this.bulletsMask.path = path;\r\n                this.bulletsContainer.mask = this.bulletsMask;\r\n            }\r\n            this.positionBullets();\r\n        }\r\n    };\r\n    Object.defineProperty(SankeyLink.prototype, \"startX\", {\r\n        /**\r\n         * @return Start X\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startX\");\r\n        },\r\n        /**\r\n         * [startX description]\r\n         *\r\n         * @todo Description\r\n         * @param value  Start X\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startX\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyLink.prototype, \"endX\", {\r\n        /**\r\n         * @return End X\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endX\");\r\n        },\r\n        /**\r\n         * [endX description]\r\n         *\r\n         * @todo Description\r\n         * @param value  End X\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endX\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyLink.prototype, \"startY\", {\r\n        /**\r\n         * @return Start Y\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startY\");\r\n        },\r\n        /**\r\n         * [startY description]\r\n         *\r\n         * @todo Description\r\n         * @param value  Start Y\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startY\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyLink.prototype, \"endY\", {\r\n        /**\r\n         * @return End Y\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endY\");\r\n        },\r\n        /**\r\n         * [endY description]\r\n         *\r\n         * @todo Description\r\n         * @param value End Y\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endY\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyLink.prototype, \"linkWidth\", {\r\n        /**\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"linkWidth\");\r\n        },\r\n        /**\r\n         * [linkWidth description]\r\n         *\r\n         * @todo Description\r\n         * @param value [description]\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"linkWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyLink.prototype, \"controlPointDistance\", {\r\n        /**\r\n         * @return relative control point distance\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"controlPointDistance\");\r\n        },\r\n        /**\r\n         * Distance of control point of a link, defines relative distance from a node at which linke should bend\r\n         * @default 0.2\r\n         * @param value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"controlPointDistance\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyLink.prototype, \"tension\", {\r\n        /**\r\n         * @return tension value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tension\");\r\n        },\r\n        /**\r\n         * Tension of a spline, 1 would make the link to have sharp edges\r\n         * @default 0.8\r\n         * @param value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tension\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return SankeyLink;\r\n}(FlowDiagramLink));\r\nexport { SankeyLink };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyLink\"] = SankeyLink;\r\n//# sourceMappingURL=SankeyLink.js.map","/**\r\n * SankeyNode module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar SankeyNode = /** @class */ (function (_super) {\r\n    __extends(SankeyNode, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SankeyNode() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * [nextInCoord description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.nextInCoord = 0;\r\n        /**\r\n         * [nextOutCoord description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.nextOutCoord = 0;\r\n        _this.className = \"SankeyNode\";\r\n        _this.width = 10;\r\n        _this.height = 10;\r\n        var nameLabel = _this.createChild(LabelBullet);\r\n        nameLabel.shouldClone = false;\r\n        //@should we auto update these locations if position is changed?\r\n        nameLabel.locationX = 1;\r\n        nameLabel.locationY = 0.5;\r\n        nameLabel.label.text = \"{name}\";\r\n        //nameLabel.label.textElement.hideOversized = false;\r\n        nameLabel.width = 150;\r\n        nameLabel.height = 150;\r\n        nameLabel.label.horizontalCenter = \"left\";\r\n        nameLabel.label.padding(0, 5, 0, 5);\r\n        _this.nameLabel = nameLabel;\r\n        var valueLabel = _this.createChild(LabelBullet);\r\n        valueLabel.shouldClone = false;\r\n        valueLabel.label.hideOversized = false;\r\n        valueLabel.locationX = 0.5;\r\n        valueLabel.locationY = 0.5;\r\n        valueLabel.width = 150;\r\n        valueLabel.height = 150;\r\n        //valueLabel.label.text = \"{value}\";\r\n        valueLabel.label.horizontalCenter = \"middle\";\r\n        _this.valueLabel = valueLabel;\r\n        var hiddenState = _this.hiddenState;\r\n        hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n        hiddenState.properties.opacity = 0.5;\r\n        hiddenState.properties.visible = true;\r\n        _this.background.hiddenState.copyFrom(hiddenState);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Invalidates all links, attached to this node.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SankeyNode.prototype.invalidateLinks = function () {\r\n        var _this = this;\r\n        _super.prototype.invalidateLinks.call(this);\r\n        this.nextInCoord = 0;\r\n        this.nextOutCoord = 0;\r\n        var chart = this.chart;\r\n        if (chart) {\r\n            var orientation_1 = chart.orientation;\r\n            if (this._incomingSorted) {\r\n                $iter.each(this._incomingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    var value = dataItem.getWorkingValue(\"value\");\r\n                    if ($type.isNumber(value)) {\r\n                        link.parent = _this.chart.linksContainer;\r\n                        var x = void 0;\r\n                        var y = void 0;\r\n                        var angle = void 0;\r\n                        if (orientation_1 == \"horizontal\") {\r\n                            x = _this.pixelX + _this.dx;\r\n                            y = _this.nextInCoord + _this.pixelY + _this.dy;\r\n                            angle = 0;\r\n                        }\r\n                        else {\r\n                            y = _this.pixelY + _this.dy;\r\n                            x = _this.nextInCoord + _this.pixelX + _this.dx;\r\n                            angle = 90;\r\n                        }\r\n                        link.endX = x;\r\n                        link.endY = y;\r\n                        link.startAngle = angle;\r\n                        link.endAngle = angle;\r\n                        link.gradient.rotation = angle;\r\n                        link.linkWidth = value * chart.valueHeight;\r\n                        if (!dataItem.fromNode) {\r\n                            if (orientation_1 == \"horizontal\") {\r\n                                link.maxWidth = 200;\r\n                                link.startX = _this.pixelX + _this.dx - link.maxWidth;\r\n                                link.startY = link.endY;\r\n                            }\r\n                            else {\r\n                                link.maxHeight = 200;\r\n                                link.startX = link.endX;\r\n                                link.startY = _this.pixelY + _this.dy - link.maxHeight;\r\n                            }\r\n                            // TODO is this needed ?\r\n                            $utils.used(link.gradient);\r\n                            link.fill = dataItem.toNode.color;\r\n                            var stop_1 = link.gradient.stops.getIndex(0);\r\n                            if (stop_1) {\r\n                                if (link.colorMode == \"gradient\") {\r\n                                    stop_1.color = _this.color;\r\n                                }\r\n                                stop_1.opacity = 0;\r\n                                link.fill = link.gradient;\r\n                                link.stroke = link.gradient;\r\n                                link.gradient.validate();\r\n                            }\r\n                        }\r\n                        //link.validate();\r\n                        _this.nextInCoord += link.linkWidth;\r\n                    }\r\n                });\r\n            }\r\n            if (this._outgoingSorted) {\r\n                $iter.each(this._outgoingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    link.parent = _this.chart.linksContainer;\r\n                    var value = dataItem.getWorkingValue(\"value\");\r\n                    if ($type.isNumber(value)) {\r\n                        var x = void 0;\r\n                        var y = void 0;\r\n                        var angle = void 0;\r\n                        if (orientation_1 == \"horizontal\") {\r\n                            angle = 0;\r\n                            x = _this.pixelX + _this.pixelWidth + _this.dx - 1;\r\n                            y = _this.nextOutCoord + _this.pixelY + _this.dy;\r\n                        }\r\n                        else {\r\n                            angle = 90;\r\n                            x = _this.nextOutCoord + _this.pixelX + _this.dx;\r\n                            y = _this.pixelY + _this.pixelHeight + _this.dy - 1;\r\n                        }\r\n                        link.startX = x;\r\n                        link.startY = y;\r\n                        link.startAngle = angle;\r\n                        link.endAngle = angle;\r\n                        link.gradient.rotation = angle;\r\n                        link.linkWidth = value * _this.chart.valueHeight;\r\n                        if (!dataItem.toNode) {\r\n                            if (orientation_1 == \"horizontal\") {\r\n                                link.maxWidth = 200;\r\n                                link.endX = _this.pixelX + link.maxWidth + _this.dx;\r\n                                link.endY = link.startY;\r\n                            }\r\n                            else {\r\n                                link.maxHeight = 200;\r\n                                link.endX = link.startX;\r\n                                link.endY = _this.pixelY + link.maxHeight + _this.dy;\r\n                            }\r\n                            link.opacity = _this.opacity;\r\n                            var stop_2 = link.gradient.stops.getIndex(1);\r\n                            if (stop_2) {\r\n                                if (link.colorMode == \"gradient\") {\r\n                                    stop_2.color = _this.color;\r\n                                }\r\n                                stop_2.opacity = 0;\r\n                                link.fill = link.gradient;\r\n                                link.stroke = link.gradient;\r\n                                link.gradient.validate();\r\n                            }\r\n                        }\r\n                        //link.validate();\r\n                        _this.nextOutCoord += link.linkWidth;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        this.positionBullet(this.nameLabel);\r\n        this.positionBullet(this.valueLabel);\r\n    };\r\n    /**\r\n     * Positions the bullet so it is centered within the node element.\r\n     *\r\n     * @param bullet  Target bullet\r\n     */\r\n    SankeyNode.prototype.positionBullet = function (bullet) {\r\n        if (bullet) {\r\n            bullet.x = this.measuredWidth * bullet.locationX;\r\n            bullet.y = this.measuredHeight * bullet.locationY;\r\n        }\r\n    };\r\n    Object.defineProperty(SankeyNode.prototype, \"level\", {\r\n        /**\r\n         * @return Level\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"level\");\r\n        },\r\n        /**\r\n         * A level node is displayed at. (0 - ...)\r\n         *\r\n         * Levels are measured from left to right.\r\n         *\r\n         * The nodes in the left-most column will have `level = 0`.\r\n         *\r\n         * Nodes in second column - `level = 1`, etc.\r\n         *\r\n         * @param value  Level\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"level\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies properties and labels from another [[SankeyNode]].\r\n     *\r\n     * @param source  Source node\r\n     */\r\n    SankeyNode.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.nameLabel.copyFrom(source.nameLabel);\r\n        this.valueLabel.copyFrom(source.valueLabel);\r\n    };\r\n    return SankeyNode;\r\n}(FlowDiagramNode));\r\nexport { SankeyNode };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;\r\n//# sourceMappingURL=SankeyNode.js.map","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { color } from \"../../core/utils/Color\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar XYChartScrollbar = /** @class */ (function (_super) {\r\n    __extends(XYChartScrollbar, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYChartScrollbar() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A chart element Scrollbar is for.\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        _this.className = \"XYChartScrollbar\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.padding(0, 0, 0, 0);\r\n        var scrollbarChart = _this.createChild(XYChart);\r\n        scrollbarChart.shouldClone = false;\r\n        scrollbarChart.margin(0, 0, 0, 0);\r\n        scrollbarChart.padding(0, 0, 0, 0);\r\n        scrollbarChart.interactionsEnabled = false;\r\n        _this._scrollbarChart = scrollbarChart;\r\n        if (!$utils.isIE()) {\r\n            var filter = new DesaturateFilter();\r\n            filter.filterUnits = \"userSpaceOnUse\";\r\n            scrollbarChart.plotContainer.filters.push(filter);\r\n        }\r\n        _this._disposers.push(_this._scrollbarChart);\r\n        _this.minHeight = 60;\r\n        _this.minWidth = 60;\r\n        var unselectedOverlay = _this.createChild(Sprite);\r\n        unselectedOverlay.shouldClone = false;\r\n        unselectedOverlay.setElement(_this.paper.add(\"path\"));\r\n        unselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n        unselectedOverlay.fillOpacity = 0.8;\r\n        unselectedOverlay.interactionsEnabled = false;\r\n        unselectedOverlay.isMeasured = false;\r\n        unselectedOverlay.toBack();\r\n        _this._unselectedOverlay = unselectedOverlay;\r\n        _this._disposers.push(_this._unselectedOverlay);\r\n        scrollbarChart.toBack();\r\n        _this.background.cornerRadius(0, 0, 0, 0);\r\n        var thumbBackground = _this.thumb.background;\r\n        thumbBackground.cornerRadius(0, 0, 0, 0);\r\n        thumbBackground.fillOpacity = 0;\r\n        thumbBackground.fill = interfaceColors.getFor(\"background\");\r\n        var hoverState = thumbBackground.states.getKey(\"hover\");\r\n        if (hoverState) {\r\n            hoverState.properties.fillOpacity = 0.2;\r\n        }\r\n        var downState = thumbBackground.states.getKey(\"down\");\r\n        if (downState) {\r\n            downState.properties.fillOpacity = 0.4;\r\n        }\r\n        _this._disposers.push(_this._chart);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(XYChartScrollbar.prototype, \"series\", {\r\n        /**\r\n         * A list of series that are used to draw graph(s) on the scrollbar.\r\n         *\r\n         * @readonly\r\n         * @return Series\r\n         */\r\n        get: function () {\r\n            if (!this._series) {\r\n                this._series = new List();\r\n                this._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n                this._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n            }\r\n            return this._series;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Decorates a new series when they are pushed into a `series` list.\r\n     *\r\n     * @param event Event\r\n     */\r\n    XYChartScrollbar.prototype.handleSeriesAdded = function (event) {\r\n        var _this = this;\r\n        var sourceSeries = event.newValue;\r\n        if (!sourceSeries.xAxis || !sourceSeries.yAxis) {\r\n            return;\r\n        }\r\n        var scrollbarChart = this.scrollbarChart;\r\n        scrollbarChart.zoomOutButton.disabled = true;\r\n        this.chart = sourceSeries.chart;\r\n        // Ensure that scrollbar chart shares the same locale as parent chart\r\n        scrollbarChart.language.locale = this.chart.language.locale;\r\n        var addXAxis = true;\r\n        var addYAxis = true;\r\n        // check if we haven't added clone of x or y axis before\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (series != sourceSeries) {\r\n                if (series.xAxis == sourceSeries.xAxis && _this.scrollbarChart.xAxes.length > 0) {\r\n                    addXAxis = false;\r\n                }\r\n                if (series.yAxis == sourceSeries.yAxis && _this.scrollbarChart.yAxes.length > 0) {\r\n                    addYAxis = false;\r\n                }\r\n            }\r\n        });\r\n        sourceSeries.events.on(\"beforedisposed\", function () {\r\n            _this.series.removeValue(sourceSeries);\r\n        });\r\n        var interfaceColors = new InterfaceColorSet();\r\n        var series = sourceSeries.clone();\r\n        if ($utils.isIE()) {\r\n            series.stroke = color(\"#aaaaaa\");\r\n            series.fill = series.stroke;\r\n            series.propertyFields.fill = undefined;\r\n            series.propertyFields.stroke = undefined;\r\n        }\r\n        sourceSeries.scrollbarSeries = series;\r\n        if (addXAxis) {\r\n            var xAxis = sourceSeries.xAxis.clone();\r\n            scrollbarChart.xAxes.moveValue(xAxis);\r\n            xAxis.title.disabled = true;\r\n            xAxis.rangeChangeDuration = 0;\r\n            //xAxis.id = sourceSeries.uid;\r\n            var renderer = xAxis.renderer;\r\n            renderer.ticks.template.disabled = true;\r\n            renderer.inside = true;\r\n            renderer.labels.template.inside = true;\r\n            renderer.line.strokeOpacity = 0;\r\n            renderer.minLabelPosition = 0.02;\r\n            renderer.maxLabelPosition = 0.98;\r\n            renderer.line.disabled = true;\r\n            renderer.axisFills.template.disabled = true;\r\n            renderer.baseGrid.disabled = true;\r\n            renderer.grid.template.strokeOpacity = 0.05;\r\n            renderer.minWidth = undefined;\r\n            renderer.minHeight = undefined;\r\n            renderer.padding(0, 0, 0, 0);\r\n            renderer.chart = scrollbarChart;\r\n            renderer.margin(0, 0, 0, 0);\r\n            xAxis.width = percent(100);\r\n            var labelsTemplate = renderer.labels.template;\r\n            labelsTemplate.fillOpacity = 0.5;\r\n            xAxis.maxZoomCount = undefined;\r\n            xAxis.minZoomCount = undefined;\r\n            if (xAxis instanceof DateAxis) {\r\n                var vAxis_1 = xAxis;\r\n                var sourceAxis = sourceSeries.xAxis;\r\n                vAxis_1.groupCount = sourceAxis.groupCount * 5;\r\n                vAxis_1.min = undefined;\r\n                vAxis_1.max = undefined;\r\n                this._disposers.push(vAxis_1.clonedFrom.events.on(\"extremeschanged\", function () {\r\n                    if ($type.isNumber(vAxis_1.clonedFrom.minDefined)) {\r\n                        vAxis_1.min = vAxis_1.clonedFrom.minDefined;\r\n                    }\r\n                    if ($type.isNumber(vAxis_1.clonedFrom.maxDefined)) {\r\n                        vAxis_1.max = vAxis_1.clonedFrom.maxDefined;\r\n                    }\r\n                }, undefined, false));\r\n            }\r\n            else if (xAxis instanceof ValueAxis) {\r\n                var vAxis_2 = xAxis;\r\n                vAxis_2.min = undefined;\r\n                vAxis_2.max = undefined;\r\n                if (!$type.isNumber(vAxis_2.clonedFrom.minDefined)) {\r\n                    vAxis_2.min = undefined;\r\n                }\r\n                if (!$type.isNumber(vAxis_2.clonedFrom.maxDefined)) {\r\n                    vAxis_2.max = undefined;\r\n                }\r\n                this._disposers.push(vAxis_2.clonedFrom.events.on(\"extremeschanged\", function () {\r\n                    if ($type.isNumber(vAxis_2.clonedFrom.minDefined)) {\r\n                        vAxis_2.min = vAxis_2.clonedFrom.min;\r\n                    }\r\n                    if ($type.isNumber(vAxis_2.clonedFrom.maxDefined)) {\r\n                        vAxis_2.max = vAxis_2.clonedFrom.max;\r\n                    }\r\n                }, undefined, false));\r\n            }\r\n            series.xAxis = xAxis;\r\n        }\r\n        else {\r\n            this.scrollbarChart.xAxes.each(function (xAxis) {\r\n                if (xAxis.clonedFrom == sourceSeries.xAxis) {\r\n                    series.xAxis = xAxis;\r\n                }\r\n            });\r\n        }\r\n        if (addYAxis) {\r\n            var yAxis = sourceSeries.yAxis.clone();\r\n            scrollbarChart.yAxes.moveValue(yAxis);\r\n            yAxis.title.disabled = true;\r\n            yAxis.rangeChangeDuration = 0;\r\n            var renderer = yAxis.renderer;\r\n            renderer.ticks.template.disabled = true;\r\n            renderer.inside = true;\r\n            renderer.labels.template.inside = true;\r\n            renderer.line.strokeOpacity = 0;\r\n            renderer.minLabelPosition = 0.02;\r\n            renderer.maxLabelPosition = 0.98;\r\n            renderer.line.disabled = true;\r\n            renderer.axisFills.template.disabled = true;\r\n            renderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n            renderer.baseGrid.disabled = true;\r\n            renderer.grid.template.strokeOpacity = 0.05;\r\n            renderer.minWidth = undefined;\r\n            renderer.minHeight = undefined;\r\n            renderer.chart = scrollbarChart;\r\n            renderer.padding(0, 0, 0, 0);\r\n            renderer.margin(0, 0, 0, 0);\r\n            yAxis.height = percent(100);\r\n            var labelsTemplate = renderer.labels.template;\r\n            labelsTemplate.fillOpacity = 0.5;\r\n            series.yAxis = yAxis;\r\n            yAxis.maxZoomCount = undefined;\r\n            yAxis.minZoomCount = undefined;\r\n            if (yAxis instanceof DateAxis) {\r\n                var vAxis_3 = yAxis;\r\n                vAxis_3.min = undefined;\r\n                vAxis_3.max = undefined;\r\n                var sourceAxis = sourceSeries.yAxis;\r\n                yAxis.groupCount = sourceAxis.groupCount * 5;\r\n                this._disposers.push(vAxis_3.clonedFrom.events.on(\"extremeschanged\", function () {\r\n                    if ($type.isNumber(vAxis_3.clonedFrom.minDefined)) {\r\n                        vAxis_3.min = vAxis_3.clonedFrom.minDefined;\r\n                    }\r\n                    if ($type.isNumber(vAxis_3.clonedFrom.maxDefined)) {\r\n                        vAxis_3.max = vAxis_3.clonedFrom.maxDefined;\r\n                    }\r\n                }));\r\n            }\r\n            else if (yAxis instanceof ValueAxis) {\r\n                var vAxis_4 = yAxis;\r\n                vAxis_4.min = undefined;\r\n                vAxis_4.max = undefined;\r\n                if (!$type.isNumber(vAxis_4.clonedFrom.minDefined)) {\r\n                    vAxis_4.min = undefined;\r\n                }\r\n                if (!$type.isNumber(vAxis_4.clonedFrom.maxDefined)) {\r\n                    vAxis_4.max = undefined;\r\n                }\r\n                this._disposers.push(vAxis_4.clonedFrom.events.on(\"extremeschanged\", function () {\r\n                    if ($type.isNumber(vAxis_4.clonedFrom.minDefined)) {\r\n                        vAxis_4.min = vAxis_4.clonedFrom.minDefined;\r\n                    }\r\n                    if ($type.isNumber(vAxis_4.clonedFrom.maxDefined)) {\r\n                        vAxis_4.max = vAxis_4.clonedFrom.maxDefined;\r\n                    }\r\n                }));\r\n            }\r\n        }\r\n        else {\r\n            this.scrollbarChart.yAxes.each(function (yAxis) {\r\n                if (yAxis.clonedFrom == sourceSeries.yAxis) {\r\n                    series.yAxis = yAxis;\r\n                }\r\n            });\r\n        }\r\n        series.rangeChangeDuration = 0;\r\n        series.interpolationDuration = 0;\r\n        series.defaultState.transitionDuration = 0;\r\n        series.showOnInit = false;\r\n        this._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n        // data might be set drectly on series\r\n        this._disposers.push(sourceSeries.events.on(\"datavalidated\", function () {\r\n            if (series.data != sourceSeries.data) { // data setter doesn't check this\r\n                series.data = sourceSeries.data;\r\n            }\r\n        }, undefined, false));\r\n        series.defaultState.properties.visible = true;\r\n        scrollbarChart.series.push(series);\r\n        this.updateByOrientation();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChartScrollbar.prototype.updateByOrientation = function () {\r\n        var _this = this;\r\n        if (this._scrollbarChart) {\r\n            $iter.each(this._scrollbarChart.xAxes.iterator(), function (xAxis) {\r\n                var renderer = xAxis.renderer;\r\n                if (_this.orientation == \"vertical\") {\r\n                    renderer.grid.template.disabled = true;\r\n                    renderer.labels.template.disabled = true;\r\n                    renderer.minGridDistance = 10;\r\n                }\r\n                else {\r\n                    renderer.grid.template.disabled = false;\r\n                    renderer.labels.template.disabled = false;\r\n                    renderer.minGridDistance = xAxis.clonedFrom.renderer.minGridDistance;\r\n                }\r\n            });\r\n            $iter.each(this._scrollbarChart.yAxes.iterator(), function (yAxis) {\r\n                var renderer = yAxis.renderer;\r\n                if (_this.orientation == \"horizontal\") {\r\n                    renderer.grid.template.disabled = true;\r\n                    renderer.labels.template.disabled = true;\r\n                    renderer.minGridDistance = 10;\r\n                }\r\n                else {\r\n                    renderer.grid.template.disabled = false;\r\n                    renderer.labels.template.disabled = false;\r\n                    renderer.minGridDistance = yAxis.clonedFrom.renderer.minGridDistance;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Cleans up after series are removed from Scrollbar.\r\n     *\r\n     * @param event  Event\r\n     */\r\n    XYChartScrollbar.prototype.handleSeriesRemoved = function (event) {\r\n        var sourceSeries = event.oldValue;\r\n        var scrollbarChart = this.scrollbarChart;\r\n        scrollbarChart.series.each(function (series) {\r\n            if (series && series.clonedFrom == sourceSeries) {\r\n                scrollbarChart.series.removeValue(series);\r\n            }\r\n        });\r\n        if (scrollbarChart.series.length == 0) {\r\n            scrollbarChart.xAxes.clear();\r\n            scrollbarChart.yAxes.clear();\r\n        }\r\n        try {\r\n            sourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n        }\r\n        catch (err) {\r\n        }\r\n    };\r\n    Object.defineProperty(XYChartScrollbar.prototype, \"scrollbarChart\", {\r\n        /**\r\n         * A chart element that is used to display graphs in the Scrollbar.\r\n         *\r\n         * This is not the same as `chart`. It's a totally independent instance of\r\n         * [[XYChart]] with separate config, series, etc.\r\n         *\r\n         * It can be configured just like any other [[XYChart]].\r\n         *\r\n         * @readonly\r\n         * @return Scrollbar's internal chart\r\n         */\r\n        get: function () {\r\n            return this._scrollbarChart;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChartScrollbar.prototype, \"chart\", {\r\n        /**\r\n         * @return Chart\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * A chart that Scrollbar belongs to.\r\n         *\r\n         * @param chart  Chart\r\n         */\r\n        set: function (chart) {\r\n            if (this._chart.get() !== chart) {\r\n                this._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n                this.handleDataChanged();\r\n                this._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChartScrollbar.prototype, \"unselectedOverlay\", {\r\n        /**\r\n         * A [[Sprite]] object representing overlay that is used to dim area of the\r\n         * scrollbar that is currently not selected.\r\n         *\r\n         * Use its `fillOpacity` to set opacity of the fill, with `0` (zero)\r\n         * completely disabling the dimming, and `1` making unselected area completely\r\n         * blank.\r\n         *\r\n         * @since 4.6.1\r\n         * @readonly\r\n         * @return Unselected area curtain element\r\n         */\r\n        get: function () {\r\n            return this._unselectedOverlay;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates Scrollbar's internal chart's data when the main chart's data\r\n     * changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChartScrollbar.prototype.handleDataChanged = function () {\r\n        if (this.chart.data != this.scrollbarChart.data) {\r\n            this.scrollbarChart.data = this.chart.data;\r\n        }\r\n        else {\r\n            // add data is handled in XYChart\r\n            // invalidating all data caused the problem: https://github.com/amcharts/amcharts4/issues/2096\r\n            this.scrollbarChart.invalidateRawData();\r\n        }\r\n    };\r\n    /**\r\n     * Zooms out all axes on the internal chart.\r\n     */\r\n    XYChartScrollbar.prototype.zoomOutAxes = function () {\r\n        var scrollbarChart = this.scrollbarChart;\r\n        $iter.each(scrollbarChart.xAxes.iterator(), function (x) {\r\n            x.zoom({ start: 0, end: 1 }, true, true);\r\n        });\r\n        $iter.each(scrollbarChart.yAxes.iterator(), function (y) {\r\n            y.zoom({ start: 0, end: 1 }, true, true);\r\n        });\r\n    };\r\n    /**\r\n     * Updates scrollbar thumb.\r\n     */\r\n    XYChartScrollbar.prototype.updateThumb = function () {\r\n        _super.prototype.updateThumb.call(this);\r\n        if (this._unselectedOverlay) {\r\n            var thumb = this.thumb;\r\n            var x = thumb.pixelX || 0;\r\n            var y = thumb.pixelY || 0;\r\n            var w = thumb.pixelWidth || 0;\r\n            var h = thumb.pixelHeight || 0;\r\n            var path = \"\";\r\n            if (this.orientation == \"horizontal\") {\r\n                path = $path.rectToPath({\r\n                    x: -1,\r\n                    y: 0,\r\n                    width: x,\r\n                    height: h\r\n                });\r\n                path += $path.rectToPath({\r\n                    x: x + w,\r\n                    y: 0,\r\n                    width: (this.pixelWidth || 0) - x - w,\r\n                    height: h\r\n                });\r\n            }\r\n            else {\r\n                path = $path.rectToPath({\r\n                    x: 0,\r\n                    y: 0,\r\n                    width: w,\r\n                    height: y\r\n                });\r\n                path += $path.rectToPath({\r\n                    x: 0,\r\n                    y: y + h,\r\n                    width: w,\r\n                    height: (this.pixelHeight || 0) - y - h\r\n                });\r\n            }\r\n            this._unselectedOverlay.path = path;\r\n        }\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    XYChartScrollbar.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            if ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n                for (var i = 0, len = config.series.length; i < len; i++) {\r\n                    var series = config.series[i];\r\n                    if ($type.hasValue(series) && $type.isString(series)) {\r\n                        if (this.map.hasKey(series)) {\r\n                            config.series[i] = this.map.getKey(series);\r\n                        }\r\n                        else {\r\n                            throw Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return XYChartScrollbar;\r\n}(Scrollbar));\r\nexport { XYChartScrollbar };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n//# sourceMappingURL=XYChartScrollbar.js.map","/**\r\n * Candlestick Series module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar CandlestickSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(CandlestickSeriesDataItem, _super);\r\n    /**\r\n     * Defines a type of [[Component]] this data item is used for\r\n     * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n     */\r\n    //public _component!: CandlestickSeries;\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CandlestickSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.values.lowValueX = {};\r\n        _this.values.lowValueY = {};\r\n        _this.values.highValueX = {};\r\n        _this.values.highValueY = {};\r\n        _this.className = \"CandlestickSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CandlestickSeriesDataItem.prototype, \"lowValueX\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.lowValueX.value;\r\n        },\r\n        /**\r\n         * Low value for horizontal axis.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"lowValueX\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeriesDataItem.prototype, \"lowValueY\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.lowValueY.value;\r\n        },\r\n        /**\r\n         * Low value for vertical axis.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"lowValueY\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeriesDataItem.prototype, \"highValueX\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.highValueX.value;\r\n        },\r\n        /**\r\n         * High value for horizontal axis.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"highValueX\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeriesDataItem.prototype, \"highValueY\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.highValueY.value;\r\n        },\r\n        /**\r\n         * High value for vertical axis.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"highValueY\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeriesDataItem.prototype, \"closeValueX\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.valueX.value;\r\n        },\r\n        /**\r\n         * Close value for horizontal axis.\r\n         *\r\n         * This is an alias for `valueX` added for convenience only.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"valueX\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeriesDataItem.prototype, \"closeValueY\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.valueY.value;\r\n        },\r\n        /**\r\n         * Close value for vertical axis.\r\n         *\r\n         * This is an alias for `valueX` added for convenience only.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"valueY\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CandlestickSeriesDataItem;\r\n}(ColumnSeriesDataItem));\r\nexport { CandlestickSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar CandlestickSeries = /** @class */ (function (_super) {\r\n    __extends(CandlestickSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CandlestickSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"CandlestickSeries\";\r\n        _this.groupFields.lowValueX = \"low\";\r\n        _this.groupFields.lowValueY = \"low\";\r\n        _this.groupFields.highValueX = \"high\";\r\n        _this.groupFields.highValueY = \"high\";\r\n        _this.strokeOpacity = 1;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        var positiveColor = interfaceColors.getFor(\"positive\");\r\n        var negativeColor = interfaceColors.getFor(\"negative\");\r\n        _this.dropFromOpenState.properties.fill = negativeColor;\r\n        _this.dropFromOpenState.properties.stroke = negativeColor;\r\n        _this.riseFromOpenState.properties.fill = positiveColor;\r\n        _this.riseFromOpenState.properties.stroke = positiveColor;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    CandlestickSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Candlestick Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    CandlestickSeries.prototype.createDataItem = function () {\r\n        return new CandlestickSeriesDataItem();\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    CandlestickSeries.prototype.validateDataElementReal = function (dataItem) {\r\n        _super.prototype.validateDataElementReal.call(this, dataItem);\r\n        this.validateCandlestick(dataItem);\r\n    };\r\n    CandlestickSeries.prototype.validateCandlestick = function (dataItem) {\r\n        var column = dataItem.column;\r\n        if (column) {\r\n            var lowLine_1 = column.lowLine;\r\n            var highLine_1 = column.highLine;\r\n            if (this.baseAxis == this.xAxis) {\r\n                var x = column.pixelWidth / 2;\r\n                lowLine_1.x = x;\r\n                highLine_1.x = x;\r\n                var open_1 = dataItem.getWorkingValue(this.yOpenField);\r\n                var close_1 = dataItem.getWorkingValue(this.yField);\r\n                var yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n                var yClose = this.yAxis.getY(dataItem, this.yField);\r\n                var yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n                var yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n                var pixelY = column.pixelY;\r\n                lowLine_1.y1 = yLow - pixelY;\r\n                highLine_1.y1 = yHigh - pixelY;\r\n                if (open_1 < close_1) {\r\n                    lowLine_1.y2 = yOpen - pixelY;\r\n                    highLine_1.y2 = yClose - pixelY;\r\n                }\r\n                else {\r\n                    lowLine_1.y2 = yClose - pixelY;\r\n                    highLine_1.y2 = yOpen - pixelY;\r\n                }\r\n            }\r\n            if (this.baseAxis == this.yAxis) {\r\n                var y = column.pixelHeight / 2;\r\n                lowLine_1.y = y;\r\n                highLine_1.y = y;\r\n                var open_2 = dataItem.getWorkingValue(this.xOpenField);\r\n                var close_2 = dataItem.getWorkingValue(this.xField);\r\n                var xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n                var xClose = this.xAxis.getX(dataItem, this.xField);\r\n                var xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n                var xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n                var pixelX = column.pixelX;\r\n                lowLine_1.x1 = xLow - pixelX;\r\n                highLine_1.x1 = xHigh - pixelX;\r\n                if (open_2 < close_2) {\r\n                    lowLine_1.x2 = xOpen - pixelX;\r\n                    highLine_1.x2 = xClose - pixelX;\r\n                }\r\n                else {\r\n                    lowLine_1.x2 = xClose - pixelX;\r\n                    highLine_1.x2 = xOpen - pixelX;\r\n                }\r\n            }\r\n            $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n                // LOW LINE\r\n                var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n                if (rangeColumn) {\r\n                    var rangeLowLine = rangeColumn.lowLine;\r\n                    rangeLowLine.x = lowLine_1.x;\r\n                    rangeLowLine.y = lowLine_1.y;\r\n                    rangeLowLine.x1 = lowLine_1.x1;\r\n                    rangeLowLine.x2 = lowLine_1.x2;\r\n                    rangeLowLine.y1 = lowLine_1.y1;\r\n                    rangeLowLine.y2 = lowLine_1.y2;\r\n                    // HIGH LINE\r\n                    var rangehighLine = rangeColumn.highLine;\r\n                    rangehighLine.x = highLine_1.x;\r\n                    rangehighLine.y = highLine_1.y;\r\n                    rangehighLine.x1 = highLine_1.x1;\r\n                    rangehighLine.x2 = highLine_1.x2;\r\n                    rangehighLine.y1 = highLine_1.y1;\r\n                    rangehighLine.y2 = highLine_1.y2;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(CandlestickSeries.prototype, \"xLowField\", {\r\n        /**\r\n         * A data field to look for \"low\" value for horizontal axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Field name\r\n         */\r\n        get: function () {\r\n            return this._xLowField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeries.prototype, \"yLowField\", {\r\n        /**\r\n         * A data field to look for \"low\" value for vertical axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Field name\r\n         */\r\n        get: function () {\r\n            return this._yLowField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeries.prototype, \"xHighField\", {\r\n        /**\r\n         * A data field to look for \"high\" value for horizontal axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Field name\r\n         */\r\n        get: function () {\r\n            return this._xHighField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeries.prototype, \"yHighField\", {\r\n        /**\r\n         * A data field to look for \"high\" value for vertical axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Field name\r\n         */\r\n        get: function () {\r\n            return this._yHighField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets up which data fields to use for data access.\r\n     */\r\n    CandlestickSeries.prototype.defineFields = function () {\r\n        _super.prototype.defineFields.call(this);\r\n        var xAxis = this.xAxis;\r\n        var yAxis = this.yAxis;\r\n        if (xAxis && yAxis) {\r\n            if (this.baseAxis == xAxis) {\r\n                var yAxisFieldName = $utils.capitalize(yAxis.axisFieldName);\r\n                this._yLowField = (\"low\" + yAxisFieldName + \"Y\");\r\n                this._yHighField = (\"high\" + yAxisFieldName + \"Y\");\r\n            }\r\n            if (this.baseAxis == yAxis) {\r\n                var xAxisFieldName = $utils.capitalize(xAxis.axisFieldName);\r\n                this._xLowField = (\"low\" + xAxisFieldName + \"X\");\r\n                this._xHighField = (\"high\" + xAxisFieldName + \"X\");\r\n            }\r\n            this.addValueField(xAxis, this._xValueFields, this._xLowField);\r\n            this.addValueField(xAxis, this._xValueFields, this._xHighField);\r\n            this.addValueField(yAxis, this._yValueFields, this._yLowField);\r\n            this.addValueField(yAxis, this._yValueFields, this._yHighField);\r\n        }\r\n    };\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param marker  Legend item container\r\n     */\r\n    CandlestickSeries.prototype.createLegendMarker = function (marker) {\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.removeChildren();\r\n        var column = marker.createChild(Candlestick);\r\n        column.shouldClone = false;\r\n        column.copyFrom(this.columns.template);\r\n        var cw;\r\n        var ch;\r\n        var highLine = column.lowLine;\r\n        var lowLine = column.highLine;\r\n        if (this.baseAxis == this.yAxis) {\r\n            cw = w / 3;\r\n            ch = h;\r\n            highLine.y = h / 2;\r\n            lowLine.y = h / 2;\r\n            highLine.x2 = w / 3;\r\n            lowLine.x2 = w / 3;\r\n            lowLine.x = w / 3 * 2;\r\n            column.column.x = w / 3;\r\n        }\r\n        else {\r\n            cw = w;\r\n            ch = h / 3;\r\n            highLine.x = w / 2;\r\n            lowLine.x = w / 2;\r\n            highLine.y2 = h / 3;\r\n            lowLine.y2 = h / 3;\r\n            lowLine.y = h / 3 * 2;\r\n            column.column.y = h / 3;\r\n        }\r\n        column.width = cw;\r\n        column.height = ch;\r\n        $object.copyProperties(this, marker, visualProperties);\r\n        $object.copyProperties(this.columns.template, column, visualProperties);\r\n        column.stroke = this.riseFromOpenState.properties.stroke;\r\n        column.fill = column.stroke;\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = column.fill;\r\n        legendDataItem.colorOrig = column.fill;\r\n    };\r\n    /**\r\n     * Returns an element to use for Candlestick\r\n     * @ignore\r\n     * @return Element.\r\n     */\r\n    CandlestickSeries.prototype.createColumnTemplate = function () {\r\n        return new Candlestick();\r\n    };\r\n    return CandlestickSeries;\r\n}(ColumnSeries));\r\nexport { CandlestickSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n//# sourceMappingURL=CandlestickSeries.js.map","/**\r\n * Column series module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem } from \"./XYSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar ColumnSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(ColumnSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColumnSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ColumnSeriesDataItem\";\r\n        _this.locations[\"dateX\"] = 0.5;\r\n        _this.locations[\"dateY\"] = 0.5;\r\n        _this.locations[\"categoryX\"] = 0.5;\r\n        _this.locations[\"categoryY\"] = 0.5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ColumnSeriesDataItem.prototype, \"column\", {\r\n        /**\r\n         * @return Column\r\n         */\r\n        get: function () {\r\n            return this._column;\r\n        },\r\n        /**\r\n         * A column used to draw a column for this data item.\r\n         *\r\n         * @param column\r\n         */\r\n        set: function (column) {\r\n            this.setColumn(column);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ColumnSeriesDataItem.prototype.setColumn = function (column) {\r\n        var _this = this;\r\n        if (this._column && column != this._column) {\r\n            $array.remove(this.sprites, this._column);\r\n        }\r\n        this._column = column;\r\n        if (column) {\r\n            var prevDataItem = column.dataItem;\r\n            if (prevDataItem && prevDataItem != this) {\r\n                prevDataItem.column = undefined;\r\n            }\r\n            this.addSprite(column);\r\n            this._disposers.push(new Disposer(function () {\r\n                // TODO investigate why component is undefined\r\n                // https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\r\n                if (_this.component) {\r\n                    _this.component.columns.removeValue(column);\r\n                }\r\n            }));\r\n        }\r\n    };\r\n    Object.defineProperty(ColumnSeriesDataItem.prototype, \"width\", {\r\n        get: function () {\r\n            var width = this.properties.width;\r\n            if (this._adapterO) {\r\n                width = this._adapterO.apply(\"width\", width);\r\n            }\r\n            return width;\r\n        },\r\n        set: function (value) {\r\n            if (this.properties.width != value) {\r\n                this.properties.width = value;\r\n                if (this.component) {\r\n                    this.component.validateDataElement(this);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColumnSeriesDataItem.prototype, \"rangesColumns\", {\r\n        /**\r\n         * A dictionary storing axes ranges columns by axis uid\r\n         */\r\n        get: function () {\r\n            if (!this._rangesColumns) {\r\n                this._rangesColumns = new Dictionary();\r\n            }\r\n            return this._rangesColumns;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ColumnSeriesDataItem;\r\n}(XYSeriesDataItem));\r\nexport { ColumnSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar ColumnSeries = /** @class */ (function (_super) {\r\n    __extends(ColumnSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColumnSeries() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Start location within cell for columns.\r\n         */\r\n        _this._startLocation = 0;\r\n        /**\r\n         * End location within cell for columns.\r\n         */\r\n        _this._endLocation = 1;\r\n        _this.className = \"ColumnSeries\";\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        _this.strokeOpacity = 0;\r\n        _this.fillOpacity = 1;\r\n        _this.clustered = true;\r\n        var columnsContainer = _this.mainContainer.createChild(Container);\r\n        columnsContainer.shouldClone = false;\r\n        columnsContainer.isMeasured = false;\r\n        columnsContainer.layout = \"none\";\r\n        _this._columnsContainer = columnsContainer;\r\n        _this.columns.template.pixelPerfect = false;\r\n        _this.tooltipColorSource = _this.columns.template;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ColumnSeries.prototype, \"columnsContainer\", {\r\n        /**\r\n         * A container that columns are created in.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        get: function () {\r\n            return this._columnsContainer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    ColumnSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Column Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    ColumnSeries.prototype.createDataItem = function () {\r\n        return new ColumnSeriesDataItem();\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ColumnSeries.prototype.validate = function () {\r\n        //@todo Check if we can do better than use `instanceof`\r\n        // find start/end locations based on clustered/stacked settings\r\n        // go through chart series instead of base axis series, because axis series doesn't maintain order\r\n        var _this = this;\r\n        this.group.node.removeAttribute(\"fill\");\r\n        if (this.chart && this.xAxis && this.yAxis) {\r\n            var baseAxisSeries = this.chart.series;\r\n            var clusterCount_1 = 0;\r\n            var index_1 = 0;\r\n            var sortedByAxis_1 = [];\r\n            $iter.each(baseAxisSeries.iterator(), function (series) {\r\n                if (series instanceof ColumnSeries) {\r\n                    if (_this.baseAxis == series.baseAxis) {\r\n                        var index_2;\r\n                        if (_this.baseAxis == _this.xAxis) {\r\n                            index_2 = _this.chart.yAxes.indexOf(series.yAxis);\r\n                        }\r\n                        else {\r\n                            index_2 = _this.chart.xAxes.indexOf(series.xAxis);\r\n                        }\r\n                        sortedByAxis_1.push({ series: series, axis: index_2 });\r\n                    }\r\n                }\r\n            });\r\n            sortedByAxis_1.sort(function (a, b) { return a.axis - b.axis; });\r\n            var prevAxisIndex_1;\r\n            $array.each(sortedByAxis_1, function (sortedItem) {\r\n                var series = sortedItem.series;\r\n                if (series instanceof ColumnSeries) {\r\n                    if ((!series.stacked && series.clustered) || (prevAxisIndex_1 != sortedItem.axis && series.clustered)) {\r\n                        clusterCount_1++;\r\n                    }\r\n                    if (series == _this) {\r\n                        index_1 = clusterCount_1 - 1;\r\n                    }\r\n                }\r\n                prevAxisIndex_1 = sortedItem.axis;\r\n            });\r\n            if (!this.clustered) {\r\n                index_1 = 0;\r\n                clusterCount_1 = 1;\r\n            }\r\n            var renderer = this.baseAxis.renderer;\r\n            var cellStartLocation = renderer.cellStartLocation;\r\n            var cellEndLocation = renderer.cellEndLocation;\r\n            this._startLocation = cellStartLocation + (index_1 / clusterCount_1) * (cellEndLocation - cellStartLocation);\r\n            this._endLocation = cellStartLocation + (index_1 + 1) / clusterCount_1 * (cellEndLocation - cellStartLocation);\r\n            var xAxis = this.xAxis;\r\n            var yAxis = this.yAxis;\r\n            if (xAxis instanceof CategoryAxis && yAxis instanceof ValueAxis) {\r\n                if (xAxis.sortBySeries == this) {\r\n                    this.sortCategoryAxis(xAxis, \"valueY\");\r\n                }\r\n            }\r\n            if (yAxis instanceof CategoryAxis && xAxis instanceof ValueAxis) {\r\n                if (yAxis.sortBySeries == this) {\r\n                    this.sortCategoryAxis(yAxis, \"valueX\");\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.validate.call(this);\r\n        for (var i = 0; i < this.startIndex; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            this.disableUnusedColumns(dataItem);\r\n        }\r\n        for (var i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            this.disableUnusedColumns(dataItem);\r\n        }\r\n        this._propertiesChanged = false;\r\n    };\r\n    ColumnSeries.prototype.sortCategoryAxis = function (axis, key) {\r\n        var _this = this;\r\n        this.dataItems.values.sort(function (x, y) {\r\n            return y.values[key].workingValue - x.values[key].workingValue;\r\n        });\r\n        var i = 0;\r\n        this.dataItems.each(function (dataItem) {\r\n            dataItem._index = i;\r\n            i++;\r\n        });\r\n        axis.dataItems.each(function (dataItem) {\r\n            var axis = dataItem.component;\r\n            var currentPosition = axis.categoryToPosition(dataItem.category) - dataItem.deltaPosition;\r\n            var seriesDataItem = axis.getSeriesDataItemByCategory(dataItem.category, _this);\r\n            if (seriesDataItem) {\r\n                var index = _this.dataItems.indexOf(seriesDataItem);\r\n                dataItem._index = index;\r\n                var deltaPosition = $math.round((index + 0.5) / _this.dataItems.length - currentPosition, 3);\r\n                if (dataItem.deltaAnimation && !dataItem.deltaAnimation.isDisposed() && dataItem.deltaAnimation.animationOptions[0].to == deltaPosition) {\r\n                    // void\r\n                }\r\n                else if (deltaPosition != $math.round(dataItem.deltaPosition, 3)) {\r\n                    if (dataItem.deltaAnimation) {\r\n                        dataItem.deltaAnimation.stop();\r\n                    }\r\n                    dataItem.deltaAnimation = dataItem.animate({ property: \"deltaPosition\", from: -deltaPosition, to: 0 }, axis.interpolationDuration, axis.interpolationEasing);\r\n                    _this._disposers.push(dataItem.deltaAnimation);\r\n                }\r\n            }\r\n        });\r\n        axis.dataItems.values.sort(function (x, y) {\r\n            return x.index - y.index;\r\n        });\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    ColumnSeries.prototype.validateDataElement = function (dataItem) {\r\n        // important oder here, first real, then super. we need this to know size\r\n        if (this.chart && this.xAxis && this.yAxis) {\r\n            this.validateDataElementReal(dataItem);\r\n            _super.prototype.validateDataElement.call(this, dataItem);\r\n        }\r\n    };\r\n    /**\r\n     * Returns relative start location for the data item.\r\n     *\r\n     * @param dataItem  Data item\r\n     * @return Location (0-1)\r\n     */\r\n    ColumnSeries.prototype.getStartLocation = function (dataItem) {\r\n        var startLocation = this._startLocation;\r\n        if (this.baseAxis == this.xAxis) {\r\n            startLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n        }\r\n        else {\r\n            startLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n        }\r\n        return startLocation;\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    /*\r\n   public handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n       if (this.simplifiedProcessing) {\r\n           this.validateDataElement(dataItem);\r\n       }\r\n       else {\r\n           super.handleDataItemWorkingValueChange(dataItem, name);\r\n       }\r\n   }*/\r\n    /**\r\n     * Returns relative end location for the data item.\r\n     *\r\n     * @param dataItem  Data item\r\n     * @return Location (0-1)\r\n     */\r\n    ColumnSeries.prototype.getEndLocation = function (dataItem) {\r\n        var endLocation = this._endLocation;\r\n        if (this.baseAxis == this.xAxis) {\r\n            endLocation += dataItem.locations[this.xField] - 0.5;\r\n        }\r\n        else {\r\n            endLocation += dataItem.locations[this.yField] - 0.5;\r\n        }\r\n        return endLocation;\r\n    };\r\n    /**\r\n     * Validates data item's elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    ColumnSeries.prototype.validateDataElementReal = function (dataItem) {\r\n        var _this = this;\r\n        //\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n        var l;\r\n        var r;\r\n        var t;\r\n        var b;\r\n        var startLocation = this.getStartLocation(dataItem);\r\n        var endLocation = this.getEndLocation(dataItem);\r\n        var xField = this.xField;\r\n        var xOpenField = this.xOpenField;\r\n        var yField = this.yField;\r\n        var yOpenField = this.yOpenField;\r\n        var template = this.columns.template;\r\n        var percentWidth = template.percentWidth;\r\n        var percentHeight = template.percentHeight;\r\n        var pixelWidth = template.pixelWidth;\r\n        var pixelHeight = template.pixelHeight;\r\n        var maxWidth = template.maxWidth;\r\n        var maxHeight = template.maxHeight;\r\n        var paddingLeft = template.pixelPaddingLeft;\r\n        var paddingRight = template.pixelPaddingRight;\r\n        var paddingTop = template.pixelPaddingTop;\r\n        var paddingBottom = template.pixelPaddingBottom;\r\n        var outOfBounds = false;\r\n        var diw = dataItem.width;\r\n        if ($type.hasValue(diw)) {\r\n            if ($type.isNumber(diw)) {\r\n                pixelWidth = diw;\r\n            }\r\n            if (diw instanceof Percent) {\r\n                percentWidth = diw.value * 100;\r\n            }\r\n        }\r\n        // two category axes\r\n        if ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n            if (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\r\n                return;\r\n            }\r\n            startLocation = 0;\r\n            endLocation = 1;\r\n            if (!$type.isNaN(percentWidth)) {\r\n                var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n                startLocation += offset;\r\n                endLocation -= offset;\r\n            }\r\n            l = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n            r = this.xAxis.getX(dataItem, xField, endLocation);\r\n            // in case width is set in pixels\r\n            if ($type.isNaN(percentWidth)) {\r\n                var offset = ((r - l) - pixelWidth) / 2;\r\n                l += offset;\r\n                r -= offset;\r\n            }\r\n            // in case max width is set in pixels\r\n            if (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\r\n                var offset = ((r - l) - maxWidth) / 2;\r\n                l += offset;\r\n                r -= offset;\r\n            }\r\n            startLocation = 0;\r\n            endLocation = 1;\r\n            if (!$type.isNaN(percentHeight)) {\r\n                var offset = $math.round((1 - percentHeight / 100) / 2, 5);\r\n                startLocation += offset;\r\n                endLocation -= offset;\r\n            }\r\n            t = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n            b = this.yAxis.getY(dataItem, yField, endLocation);\r\n            // in case width is set in pixels\r\n            if ($type.isNaN(percentHeight)) {\r\n                var offset = ((b - t) - pixelHeight) / 2;\r\n                b += offset;\r\n                t -= offset;\r\n            }\r\n            // in case max width is set in pixels\r\n            if (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\r\n                var offset = ((b - t) - maxHeight) / 2;\r\n                b += offset;\r\n                t -= offset;\r\n            }\r\n            r = this.fixHorizontalCoordinate(r);\r\n            l = this.fixHorizontalCoordinate(l);\r\n            t = this.fixVerticalCoordinate(t);\r\n            b = this.fixVerticalCoordinate(b);\r\n        }\r\n        else if (this.baseAxis == this.xAxis) {\r\n            if (!dataItem.hasValue(this._yValueFields)) {\r\n                return;\r\n            }\r\n            // in case width is set in percent\r\n            if (!$type.isNaN(percentWidth)) {\r\n                var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n                startLocation += offset;\r\n                endLocation -= offset;\r\n            }\r\n            l = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n            r = this.xAxis.getX(dataItem, xField, endLocation);\r\n            // in case width is set in pixels\r\n            if ($type.isNaN(percentWidth)) {\r\n                var offset = ((r - l) - pixelWidth) / 2;\r\n                l += offset;\r\n                r -= offset;\r\n            }\r\n            // in case width is set in pixels\r\n            if (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\r\n                var offset = ((r - l) - maxWidth) / 2;\r\n                l += offset;\r\n                r -= offset;\r\n            }\r\n            var bottomLocation = dataItem.locations[yOpenField];\r\n            var topLocation = dataItem.locations[yField];\r\n            // otherwise gantt chart will start items in the middle of a cell\r\n            if (this.yAxis instanceof ValueAxis) {\r\n                if (this.dataFields[this.yField] != this.dataFields[this.yOpenField]) {\r\n                    bottomLocation = 0;\r\n                    topLocation = 0;\r\n                }\r\n            }\r\n            b = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n            t = this.yAxis.getY(dataItem, yField, topLocation);\r\n            // used to save location for bullets, but it's not a good approach\r\n            // dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n            var axisLenght = Math.ceil(this.yAxis.axisLength);\r\n            if ((t < 0 && b < 0) || (t > axisLenght && b > axisLenght)) {\r\n                outOfBounds = true;\r\n            }\r\n            t = this.fixVerticalCoordinate(t);\r\n            b = this.fixVerticalCoordinate(b);\r\n            if (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n                outOfBounds = true;\r\n            }\r\n        }\r\n        // horizontal bars\r\n        else {\r\n            if (!dataItem.hasValue(this._xValueFields)) {\r\n                return;\r\n            }\r\n            if (!$type.isNaN(percentHeight)) {\r\n                var offset = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n                startLocation += offset;\r\n                endLocation -= offset;\r\n            }\r\n            t = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n            b = this.yAxis.getY(dataItem, yField, endLocation);\r\n            // in case height is set in pixels\r\n            if ($type.isNaN(percentHeight)) {\r\n                var offset = ((b - t) - pixelHeight) / 2;\r\n                b -= offset;\r\n                t += offset;\r\n            }\r\n            // in case height is set in pixels\r\n            if (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\r\n                var offset = ((b - t) - maxHeight) / 2;\r\n                b -= offset;\r\n                t += offset;\r\n            }\r\n            var rightLocation = dataItem.locations[xField];\r\n            var leftLocation = dataItem.locations[xOpenField];\r\n            // otherwise gantt chart will start items in the middle of a cell\r\n            if (this.xAxis instanceof ValueAxis) {\r\n                if (this.dataFields[this.xField] != this.dataFields[this.xOpenField]) {\r\n                    rightLocation = 0;\r\n                    leftLocation = 0;\r\n                }\r\n            }\r\n            r = this.xAxis.getX(dataItem, xField, rightLocation);\r\n            l = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n            // used to save location for bullets, but it's not a good approach\r\n            // dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n            var axisLenght = Math.ceil(this.xAxis.axisLength);\r\n            if ((r < 0 && l < 0) || (r > axisLenght && l > axisLenght)) {\r\n                outOfBounds = true;\r\n            }\r\n            r = this.fixHorizontalCoordinate(r);\r\n            l = this.fixHorizontalCoordinate(l);\r\n            if (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n                outOfBounds = true;\r\n            }\r\n        }\r\n        var w = Math.abs(r - l);\r\n        var h = Math.abs(b - t);\r\n        var x = Math.min(l, r);\r\n        var y = Math.min(t, b);\r\n        if (!outOfBounds) {\r\n            var column_1;\r\n            if (!dataItem.column) {\r\n                column_1 = this.columns.create();\r\n                //$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n                $object.copyProperties(this, column_1, visualProperties); // need this because 3d columns are not in the same container\r\n                $object.copyProperties(this.columns.template, column_1, visualProperties); // second time, no force, so that columns.template would override series properties\r\n                dataItem.addSprite(column_1);\r\n                dataItem.column = column_1;\r\n                column_1.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n                // accessibility\r\n                if (this.itemsFocusable()) {\r\n                    this.role = \"menu\";\r\n                    column_1.role = \"menuitem\";\r\n                    column_1.focusable = true;\r\n                }\r\n                else {\r\n                    this.role = \"list\";\r\n                    column_1.role = \"listitem\";\r\n                    column_1.focusable = false;\r\n                }\r\n                if (column_1.focusable) {\r\n                    column_1.events.on(\"focus\", function (ev) {\r\n                        column_1.readerTitle = _this.populateString(_this.itemReaderText, dataItem);\r\n                    }, undefined, false);\r\n                    column_1.events.on(\"blur\", function (ev) {\r\n                        column_1.readerTitle = \"\";\r\n                    }, undefined, false);\r\n                }\r\n                if (column_1.hoverable) {\r\n                    column_1.events.on(\"over\", function (ev) {\r\n                        column_1.readerTitle = _this.populateString(_this.itemReaderText, dataItem);\r\n                    }, undefined, false);\r\n                    column_1.events.on(\"out\", function (ev) {\r\n                        column_1.readerTitle = \"\";\r\n                    }, undefined, false);\r\n                }\r\n                column_1.parent = this.columnsContainer;\r\n                column_1.virtualParent = this;\r\n            }\r\n            else {\r\n                column_1 = dataItem.column;\r\n                if (this._propertiesChanged) {\r\n                    $object.copyProperties(this, column_1, visualProperties);\r\n                    $object.copyProperties(this.columns.template, column_1, visualProperties);\r\n                    $array.each(visualProperties, function (property) {\r\n                        column_1[property] = column_1[property];\r\n                    });\r\n                }\r\n            }\r\n            column_1.width = w;\r\n            column_1.height = h;\r\n            column_1.x = x;\r\n            column_1.y = y;\r\n            column_1.realX = l;\r\n            column_1.realY = t;\r\n            column_1.realWidth = r - l;\r\n            column_1.realHeight = b - t;\r\n            this.setColumnStates(column_1);\r\n            if (column_1.invalid) {\r\n                column_1.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n            }\r\n            column_1.__disabled = false;\r\n            //column.returnAfterTemp();\r\n            $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n                var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n                if (!rangeColumn) {\r\n                    rangeColumn = _this.columns.create();\r\n                    //$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n                    $object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n                    dataItem.addSprite(rangeColumn);\r\n                    dataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n                    rangeColumn.paper = _this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n                }\r\n                rangeColumn.parent = axisRange.contents;\r\n                rangeColumn.width = w;\r\n                rangeColumn.height = h;\r\n                rangeColumn.x = x;\r\n                rangeColumn.y = y;\r\n                _this.setColumnStates(rangeColumn);\r\n                if (rangeColumn.invalid) {\r\n                    rangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n                }\r\n                rangeColumn.__disabled = false;\r\n                //rangeColumn.returnAfterTemp();\r\n            });\r\n        }\r\n        else {\r\n            this.disableUnusedColumns(dataItem);\r\n        }\r\n        dataItem.itemWidth = w;\r\n        dataItem.itemHeight = h;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    ColumnSeries.prototype.disableUnusedColumns = function (dataItem) {\r\n        if (dataItem) {\r\n            if (dataItem.column) {\r\n                // otherwise might flicker when enabling\r\n                dataItem.column.width = 0;\r\n                dataItem.column.height = 0;\r\n                dataItem.column.__disabled = true;\r\n            }\r\n            $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n                var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n                if (rangeColumn) {\r\n                    // otherwise might flicker when enabling\r\n                    rangeColumn.width = 0;\r\n                    rangeColumn.height = 0;\r\n                    rangeColumn.__disabled = true;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Apply different state/coloring to columns based on the change value.\r\n     *\r\n     * @param sprite  Sprite to apply state to\r\n     * @todo Do not apply accessibility to wicks of the candlesticks\r\n     */\r\n    ColumnSeries.prototype.setColumnStates = function (sprite) {\r\n        if (this._dropFromOpenState || this._dropFromPreviousState || this._riseFromOpenState || this._riseFromPreviousState) {\r\n            var dataItem = sprite.dataItem;\r\n            if (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n                var open_1;\r\n                var value = void 0;\r\n                var change = void 0;\r\n                if (this.baseAxis == this.yAxis) {\r\n                    if (this.xOpenField && this.xField && this.xAxis instanceof ValueAxis) {\r\n                        open_1 = dataItem.getValue(this.xOpenField);\r\n                        value = dataItem.getValue(this.xField);\r\n                        change = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.yOpenField && this.yField && this.yAxis instanceof ValueAxis) {\r\n                        open_1 = dataItem.getValue(this.yOpenField);\r\n                        value = dataItem.getValue(this.yField);\r\n                        change = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n                    }\r\n                }\r\n                if (value < open_1) {\r\n                    dataItem.droppedFromOpen = true;\r\n                    sprite.defaultState.copyFrom(this._dropFromOpenState);\r\n                    sprite.setState(this._dropFromOpenState, 0);\r\n                }\r\n                else {\r\n                    dataItem.droppedFromOpen = false;\r\n                    sprite.defaultState.copyFrom(this._riseFromOpenState);\r\n                    sprite.setState(this._riseFromOpenState, 0);\r\n                }\r\n                if (change < 0) {\r\n                    dataItem.droppedFromPrevious = true;\r\n                    sprite.defaultState.copyFrom(this._dropFromPreviousState);\r\n                    sprite.setState((this._dropFromPreviousState), 0);\r\n                }\r\n                else {\r\n                    dataItem.droppedFromPrevious = false;\r\n                    sprite.defaultState.copyFrom(this._riseFromPreviousState);\r\n                    sprite.setState((this._riseFromPreviousState), 0);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(ColumnSeries.prototype, \"columns\", {\r\n        /**\r\n         * A list of column elements in the series.\r\n         *\r\n         * @return Columns\r\n         */\r\n        get: function () {\r\n            if (!this._columns) {\r\n                this._columns = new ListTemplate(this.createColumnTemplate());\r\n                this._disposers.push(new ListDisposer(this._columns));\r\n                this._disposers.push(this._columns.template);\r\n            }\r\n            return this._columns;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and returns a column element to use as a template.\r\n     *\r\n     * @return Column template\r\n     */\r\n    ColumnSeries.prototype.createColumnTemplate = function () {\r\n        return new Column();\r\n    };\r\n    Object.defineProperty(ColumnSeries.prototype, \"clustered\", {\r\n        /**\r\n         * @return Clustered?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"clustered\");\r\n        },\r\n        /**\r\n         * Cluster this series columns?\r\n         *\r\n         * Setting to `false` will make columns overlap with other series.\r\n         *\r\n         * @default true\r\n         * @param value  Clustered?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"clustered\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColumnSeries.prototype, \"dropFromOpenState\", {\r\n        /**\r\n         * @return State\r\n         */\r\n        get: function () {\r\n            if (!this._dropFromOpenState) {\r\n                this._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n            }\r\n            return this._dropFromOpenState;\r\n        },\r\n        /**\r\n         * A state to apply to a column when close value is lower than open value.\r\n         *\r\n         * Can be used to differentiate appearance based on value relations.\r\n         *\r\n         * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n         *\r\n         * @readonly You can modify state object, but can't overwrite it\r\n         * @param  value  State\r\n         */\r\n        set: function (value) {\r\n            this._dropFromOpenState = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColumnSeries.prototype, \"dropFromPreviousState\", {\r\n        /**\r\n         * @return State\r\n         */\r\n        get: function () {\r\n            if (!this._dropFromPreviousState) {\r\n                this._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n            }\r\n            return this._dropFromPreviousState;\r\n        },\r\n        /**\r\n         * A state to apply to a column when its value is lower value of a previous\r\n         * column.\r\n         *\r\n         * Can be used to differentiate appearance based on value relations.\r\n         *\r\n         * @readonly You can modify state object, but can't overwrite it\r\n         * @param  value  State\r\n         */\r\n        set: function (value) {\r\n            this._dropFromPreviousState = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColumnSeries.prototype, \"riseFromOpenState\", {\r\n        /**\r\n         * @return State\r\n         */\r\n        get: function () {\r\n            if (!this._riseFromOpenState) {\r\n                this._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n            }\r\n            return this._riseFromOpenState;\r\n        },\r\n        /**\r\n         * A state to apply to a column when close value is same or higher than open\r\n         * value.\r\n         *\r\n         * Can be used to differentiate appearance based on value relations.\r\n         *\r\n         * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n         *\r\n         * @readonly You can modify state object, but can't overwrite it\r\n         * @param  value  State\r\n         */\r\n        set: function (value) {\r\n            this._riseFromOpenState = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColumnSeries.prototype, \"riseFromPreviousState\", {\r\n        /**\r\n         * @return State\r\n         */\r\n        get: function () {\r\n            if (!this._riseFromPreviousState) {\r\n                this._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n            }\r\n            return this._riseFromPreviousState;\r\n        },\r\n        /**\r\n         * A state to apply to a column when its value is same or higher than value\r\n         * of a previous column.\r\n         *\r\n         * Can be used to differentiate appearance based on value relations.\r\n         *\r\n         * @readonly You can modify state object, but can't overwrite it\r\n         * @param  value  State\r\n         */\r\n        set: function (value) {\r\n            this._riseFromPreviousState = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates value of the related legend item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    ColumnSeries.prototype.updateLegendValue = function (dataItem, notRange) {\r\n        var _this = this;\r\n        _super.prototype.updateLegendValue.call(this, dataItem, notRange);\r\n        if (this.legendDataItem) {\r\n            var marker = this.legendDataItem.marker;\r\n            var fromOpenState_1;\r\n            var fromPreviousState_1;\r\n            if (dataItem) {\r\n                if (dataItem.droppedFromOpen) {\r\n                    fromOpenState_1 = this._dropFromOpenState;\r\n                }\r\n                else {\r\n                    fromOpenState_1 = this._riseFromOpenState;\r\n                }\r\n                if (dataItem.droppedFromPrevious) {\r\n                    fromPreviousState_1 = this._dropFromPreviousState;\r\n                }\r\n                else {\r\n                    fromPreviousState_1 = this._riseFromPreviousState;\r\n                }\r\n            }\r\n            $iter.each(marker.children.iterator(), function (child) {\r\n                if (dataItem) {\r\n                    child.setState(fromPreviousState_1);\r\n                    child.setState(fromOpenState_1);\r\n                }\r\n                else {\r\n                    // todo: think what to do here, maybe apply above states based on totals?\r\n                    child.setState(_this._riseFromPreviousState);\r\n                    child.setState(_this._riseFromOpenState);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param marker  Legend item container\r\n     */\r\n    ColumnSeries.prototype.createLegendMarker = function (marker) {\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.removeChildren();\r\n        var column = marker.createChild(RoundedRectangle);\r\n        column.shouldClone = false;\r\n        $object.copyProperties(this, column, visualProperties);\r\n        column.copyFrom(this.columns.template);\r\n        column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n        column.width = w;\r\n        column.height = h;\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = this.fill;\r\n        legendDataItem.colorOrig = this.fill;\r\n    };\r\n    /**\r\n     * Copies all properties from another instance of [[ColumnSeries]].\r\n     *\r\n     * @param source  Source series\r\n     */\r\n    ColumnSeries.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.columns.template.copyFrom(source.columns.template);\r\n    };\r\n    /**\r\n    * returns bullet x location\r\n    * @ignore\r\n    */\r\n    ColumnSeries.prototype.getBulletLocationX = function (bullet, field) {\r\n        if (this.baseAxis == this.xAxis) {\r\n            var bulletLocationX = bullet.locationX;\r\n            if (!$type.isNumber(bulletLocationX)) {\r\n                bulletLocationX = 0.5;\r\n            }\r\n            var endLocation = this.getEndLocation(bullet.dataItem);\r\n            var startLocation = this.getStartLocation(bullet.dataItem);\r\n            return endLocation - (endLocation - startLocation) * bulletLocationX;\r\n        }\r\n        else {\r\n            return _super.prototype.getBulletLocationX.call(this, bullet, field);\r\n        }\r\n    };\r\n    /**\r\n    * returns bullet y location\r\n    * @ignore\r\n    */\r\n    ColumnSeries.prototype.getBulletLocationY = function (bullet, field) {\r\n        if (this.baseAxis == this.yAxis) {\r\n            var bulletLocationY = bullet.locationY;\r\n            if (!$type.isNumber(bulletLocationY)) {\r\n                bulletLocationY = 0.5;\r\n            }\r\n            var endLocation = this.getEndLocation(bullet.dataItem);\r\n            var startLocation = this.getStartLocation(bullet.dataItem);\r\n            return endLocation - (endLocation - startLocation) * bulletLocationY;\r\n        }\r\n        else {\r\n            return _super.prototype.getBulletLocationY.call(this, bullet, field);\r\n        }\r\n    };\r\n    ColumnSeries.prototype.getAdjustedXLocation = function (dataItem, field, bulletLocationX) {\r\n        //if (this.baseAxis == this.xAxis) {\r\n        if (!$type.isNumber(bulletLocationX)) {\r\n            if (dataItem) {\r\n                bulletLocationX = dataItem.locations[field];\r\n            }\r\n            else {\r\n                bulletLocationX = 0.5;\r\n            }\r\n        }\r\n        return this._endLocation - (this._endLocation - this._startLocation) * (1 - bulletLocationX);\r\n        //}\r\n        //else {\r\n        //\treturn super.getAdjustedXLocation(dataItem, field);\r\n        //}\r\n    };\r\n    ColumnSeries.prototype.getAdjustedYLocation = function (dataItem, field, bulletLocationY) {\r\n        //if (this.baseAxis == this.yAxis) {\r\n        if (!$type.isNumber(bulletLocationY)) {\r\n            if (dataItem) {\r\n                bulletLocationY = dataItem.locations[field];\r\n            }\r\n            else {\r\n                bulletLocationY = 0.5;\r\n            }\r\n        }\r\n        return this._endLocation - (this._endLocation - this._startLocation) * bulletLocationY;\r\n        //}\r\n        //else {\r\n        //\treturn super.getAdjustedYLocation(dataItem, field);\r\n        //}\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     */\r\n    ColumnSeries.prototype.fixVerticalCoordinate = function (coordinate) {\r\n        var paddingBottom = this.columns.template.pixelPaddingBottom;\r\n        var paddingTop = this.columns.template.pixelPaddingTop;\r\n        var minY = -paddingTop;\r\n        var maxY = this.yAxis.axisLength + paddingBottom;\r\n        return $math.fitToRange(coordinate, minY, maxY);\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     */\r\n    ColumnSeries.prototype.fixHorizontalCoordinate = function (coordinate) {\r\n        var paddingLeft = this.columns.template.pixelPaddingLeft;\r\n        var paddingRight = this.columns.template.pixelPaddingRight;\r\n        var minX = -paddingLeft;\r\n        var maxX = this.xAxis.axisLength + paddingRight;\r\n        return $math.fitToRange(coordinate, minX, maxX);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    ColumnSeries.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this.columns.clear();\r\n    };\r\n    return ColumnSeries;\r\n}(XYSeries));\r\nexport { ColumnSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n//# sourceMappingURL=ColumnSeries.js.map","/**\r\n * 3D column series module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\nvar ColumnSeries3DDataItem = /** @class */ (function (_super) {\r\n    __extends(ColumnSeries3DDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColumnSeries3DDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ColumnSeries3DDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return ColumnSeries3DDataItem;\r\n}(ColumnSeriesDataItem));\r\nexport { ColumnSeries3DDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar ColumnSeries3D = /** @class */ (function (_super) {\r\n    __extends(ColumnSeries3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColumnSeries3D() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ColumnSeries3D\";\r\n        _this.columns.template.column3D.applyOnClones = true;\r\n        _this.columns.template.hiddenState.properties.visible = true;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ColumnSeries3D.prototype, \"columnsContainer\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            var chart = this.chart;\r\n            if (chart && chart.columnsContainer && chart.leftAxesContainer.layout != \"vertical\" && chart.rightAxesContainer.layout != \"vertical\" && chart.bottomAxesContainer.layout != \"horizontal\" && chart.topAxesContainer.layout != \"horizontal\") {\r\n                return chart.columnsContainer;\r\n            }\r\n            else {\r\n                return this._columnsContainer;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Validates data item's elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    ColumnSeries3D.prototype.validateDataElementReal = function (dataItem) {\r\n        _super.prototype.validateDataElementReal.call(this, dataItem);\r\n        if (dataItem.column) {\r\n            dataItem.column.dx = this.dx;\r\n            dataItem.column.dy = this.dy;\r\n        }\r\n    };\r\n    /**\r\n     * Validates data item's elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ColumnSeries3D.prototype.validateDataElements = function () {\r\n        _super.prototype.validateDataElements.call(this);\r\n        if (this.chart) {\r\n            this.chart.invalidateLayout();\r\n        }\r\n    };\r\n    /**\r\n     * Returns an element to use for 3D bar.\r\n     * @ignore\r\n     * @return Element.\r\n     */\r\n    ColumnSeries3D.prototype.createColumnTemplate = function () {\r\n        return new Column3D();\r\n    };\r\n    Object.defineProperty(ColumnSeries3D.prototype, \"depth\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Depth (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"depth\");\r\n        },\r\n        /**\r\n         * Depth (height) of the slices in the series in pixels.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Depth (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"depth\", value, true);\r\n            var template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n            template.column3D.depth = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColumnSeries3D.prototype, \"angle\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Angle (0-360)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"angle\");\r\n        },\r\n        /**\r\n         * Angle of view for the slices in series. (0-360)\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Angle (0-360)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"angle\", value);\r\n            var template = this.columns.template;\r\n            template.column3D.angle = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ColumnSeries3D;\r\n}(ColumnSeries));\r\nexport { ColumnSeries3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n//# sourceMappingURL=ColumnSeries3D.js.map","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar ConeSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(ConeSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ConeSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ConeSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return ConeSeriesDataItem;\r\n}(ColumnSeriesDataItem));\r\nexport { ConeSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar ConeSeries = /** @class */ (function (_super) {\r\n    __extends(ConeSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ConeSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ConeSeries\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns an element to use for Candlestick\r\n     * @ignore\r\n     * @return Element.\r\n     */\r\n    ConeSeries.prototype.createColumnTemplate = function () {\r\n        return new ConeColumn();\r\n    };\r\n    /**\r\n     * Returns an SVG path to use as series mask.\r\n     *\r\n     * @return SVG path\r\n     */\r\n    ConeSeries.prototype.getMaskPath = function () {\r\n        var dx = 0;\r\n        var dy = 0;\r\n        var column = this.columns.getIndex(0);\r\n        if (column) {\r\n            if (this.baseAxis == this.xAxis) {\r\n                dy = column.coneColumn.innerWidth / 2 + 1;\r\n            }\r\n            else {\r\n                dx = column.coneColumn.innerHeight / 2 + 1;\r\n            }\r\n            return $path.rectToPath({\r\n                x: -dx,\r\n                y: 0,\r\n                width: this.xAxis.axisLength + dx,\r\n                height: this.yAxis.axisLength + dy\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Validates data item's elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    ConeSeries.prototype.validateDataElementReal = function (dataItem) {\r\n        _super.prototype.validateDataElementReal.call(this, dataItem);\r\n        var column = dataItem.column;\r\n        if (column) {\r\n            var coneColumn = dataItem.column.coneColumn;\r\n            coneColumn.fill = dataItem.column.fill;\r\n            if (this.baseAxis == this.yAxis) {\r\n                coneColumn.orientation = \"horizontal\";\r\n            }\r\n            else {\r\n                coneColumn.orientation = \"vertical\";\r\n            }\r\n        }\r\n    };\r\n    return ConeSeries;\r\n}(ColumnSeries));\r\nexport { ConeSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n//# sourceMappingURL=ConeSeries.js.map","/**\r\n * CurvedColumnSeries module.\r\n *\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar CurvedColumnSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(CurvedColumnSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CurvedColumnSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"CurvedColumnSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return CurvedColumnSeriesDataItem;\r\n}(ColumnSeriesDataItem));\r\nexport { CurvedColumnSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar CurvedColumnSeries = /** @class */ (function (_super) {\r\n    __extends(CurvedColumnSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CurvedColumnSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"CurvedColumnSeries\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns an element to use for the curved column.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Element.\r\n     */\r\n    CurvedColumnSeries.prototype.createColumnTemplate = function () {\r\n        return new CurvedColumn();\r\n    };\r\n    /**\r\n     * Validates data item's elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    CurvedColumnSeries.prototype.validateDataElementReal = function (dataItem) {\r\n        _super.prototype.validateDataElementReal.call(this, dataItem);\r\n        var column = dataItem.column;\r\n        column = dataItem.column;\r\n        if (column) {\r\n            var curvedColumn = dataItem.column.curvedColumn;\r\n            curvedColumn.fill = dataItem.column.fill;\r\n            if (this.baseAxis == this.yAxis) {\r\n                column.orientation = \"horizontal\";\r\n            }\r\n            else {\r\n                column.orientation = \"vertical\";\r\n            }\r\n        }\r\n    };\r\n    return CurvedColumnSeries;\r\n}(ColumnSeries));\r\nexport { CurvedColumnSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n//# sourceMappingURL=CurvedColumnSeries.js.map","/**\r\n * Defines Funnel Chart Series.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { options } from \"../../core/Options\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo: sequenced?\r\n/**\r\n * Defines a [[DataItem]] for [[FunnelSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar FunnelSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(FunnelSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FunnelSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"FunnelSeriesDataItem\";\r\n        // this helps to invalidate series when value is 0 an it is hidden (no other events are triggered then)\r\n        _this.events.on(\"visibilitychanged\", function () {\r\n            if (_this.component) {\r\n                _this.component.invalidateDataItems();\r\n            }\r\n        }, _this, false);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(FunnelSeriesDataItem.prototype, \"sliceLink\", {\r\n        /**\r\n         * A [[FunnelSlice]] element, related to this data item ([[FunnelSlice]]).\r\n         *\r\n         * @readonly\r\n         * @return Slice element\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._sliceLink) {\r\n                var sliceLink_1 = this.component.sliceLinks.create();\r\n                this._sliceLink = sliceLink_1;\r\n                this._disposers.push(sliceLink_1);\r\n                sliceLink_1.parent = this.component.slicesContainer;\r\n                this._disposers.push(new Disposer(function () {\r\n                    if (_this.component) {\r\n                        _this.component.sliceLinks.removeValue(sliceLink_1);\r\n                    }\r\n                }));\r\n                this.addSprite(sliceLink_1);\r\n                sliceLink_1.visible = this.visible;\r\n            }\r\n            return this._sliceLink;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FunnelSeriesDataItem;\r\n}(PercentSeriesDataItem));\r\nexport { FunnelSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IFunnelSeriesEvents} for a list of available Events\r\n * @see {@link IFunnelSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nvar FunnelSeries = /** @class */ (function (_super) {\r\n    __extends(FunnelSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FunnelSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this._nextY = 0;\r\n        _this.className = \"FunnelSeries\";\r\n        _this.orientation = \"vertical\";\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        _this.slicesContainer.width = percent(100);\r\n        _this.slicesContainer.height = percent(100);\r\n        _this._disposers.push(_this.slicesContainer.events.on(\"maxsizechanged\", _this.invalidateDataItems, _this, false));\r\n        _this.labelsOpposite = true;\r\n        _this.labelsContainer.layout = \"absolute\";\r\n        _this.bottomRatio = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates a [[FunnelSlice]] element.\r\n     *\r\n     * @return Slice\r\n     */\r\n    FunnelSeries.prototype.createSlice = function () {\r\n        return new FunnelSlice();\r\n    };\r\n    /**\r\n     * Creates a [[FunnelTick]] element.\r\n     *\r\n     * @return Tick\r\n     */\r\n    FunnelSeries.prototype.createTick = function () {\r\n        return new FunnelTick();\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    FunnelSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Funnel Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    FunnelSeries.prototype.createDataItem = function () {\r\n        return new FunnelSeriesDataItem();\r\n    };\r\n    /**\r\n     * Inits FunnelSlice.\r\n     *\r\n     * @param slice to init\r\n     */\r\n    FunnelSeries.prototype.initSlice = function (slice) {\r\n        slice.isMeasured = false;\r\n        slice.defaultState.properties.scale = 1;\r\n        slice.observe(\"scale\", this.handleSliceScale, this);\r\n        slice.observe([\"dx\", \"dy\", \"x\", \"y\"], this.handleSliceMove, this);\r\n        slice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n        var hoverState = slice.states.create(\"hover\");\r\n        hoverState.properties.expandDistance = 0.2;\r\n    };\r\n    /**\r\n     * [initLabel description]\r\n     *\r\n     * @todo Description\r\n     * @param label [description]\r\n     */\r\n    FunnelSeries.prototype.initLabel = function (label) {\r\n        _super.prototype.initLabel.call(this, label);\r\n        label.verticalCenter = \"middle\";\r\n        label.horizontalCenter = \"middle\";\r\n        label.isMeasured = true;\r\n        label.padding(5, 5, 5, 5);\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FunnelSeries.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        this._nextY = 0;\r\n    };\r\n    /**\r\n     * [validateDataElements description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    FunnelSeries.prototype.validateDataElements = function () {\r\n        var _this = this;\r\n        var slicesContainer = this.slicesContainer;\r\n        var labelsContainer = this.labelsContainer;\r\n        var labelTemplate = this.labels.template;\r\n        if (this.alignLabels) {\r\n            labelTemplate.interactionsEnabled = true;\r\n            slicesContainer.isMeasured = true;\r\n            labelsContainer.isMeasured = true;\r\n        }\r\n        else {\r\n            labelTemplate.interactionsEnabled = false;\r\n            slicesContainer.isMeasured = false;\r\n            labelsContainer.isMeasured = false;\r\n        }\r\n        var total = 0;\r\n        var count = 0;\r\n        this.dataItems.each(function (dItem) {\r\n            if ($type.hasValue(dItem.value)) {\r\n                count++;\r\n                if (dItem.value > 0) {\r\n                    total += Math.abs(dItem.getWorkingValue(\"value\") / dItem.value);\r\n                }\r\n                else {\r\n                    if (_this.ignoreZeroValues) {\r\n                        count--;\r\n                    }\r\n                    else {\r\n                        if (!dItem.visible || dItem.__disabled || dItem.isHiding) {\r\n                            count--;\r\n                        }\r\n                        else {\r\n                            total += 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this._total = 1 / count * total;\r\n        this._count = count;\r\n        _super.prototype.validateDataElements.call(this);\r\n        this.arrangeLabels();\r\n    };\r\n    /**\r\n     * [getNextValue description]\r\n     *\r\n     * @todo Description\r\n     * @param dataItem  [description]\r\n     * @return [description]\r\n     */\r\n    FunnelSeries.prototype.getNextValue = function (dataItem) {\r\n        var index = dataItem.index;\r\n        var nextValue = dataItem.getWorkingValue(\"value\");\r\n        if (index < this.dataItems.length - 1) {\r\n            var nextItem = this.dataItems.getIndex(index + 1);\r\n            nextValue = nextItem.getWorkingValue(\"value\");\r\n            if (!nextItem.visible || nextItem.isHiding || nextItem.__disabled || (nextItem.value == 0 && this.ignoreZeroValues)) {\r\n                return this.getNextValue(nextItem);\r\n            }\r\n        }\r\n        return nextValue;\r\n    };\r\n    /**\r\n     * [formDataElement description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    FunnelSeries.prototype.formDataElement = function () {\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    FunnelSeries.prototype.validateDataElement = function (dataItem) {\r\n        var _this = this;\r\n        //if ($type.hasValue(dataItem.value)) {\r\n        // FunnelSlice\r\n        var slice = dataItem.slice;\r\n        slice.orientation = this.orientation;\r\n        var sliceLink = dataItem.sliceLink;\r\n        sliceLink.orientation = this.orientation;\r\n        var tick = dataItem.tick;\r\n        var label = dataItem.label;\r\n        tick.slice = slice;\r\n        tick.label = label;\r\n        if ($type.hasValue(dataItem.value)) {\r\n            this.decorateSlice(dataItem);\r\n            $array.each(dataItem.sprites, function (sprite) {\r\n                if (dataItem.value == 0 && _this.ignoreZeroValues) {\r\n                    sprite.__disabled = true;\r\n                }\r\n                else {\r\n                    sprite.__disabled = false;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            $array.each(dataItem.sprites, function (sprite) {\r\n                sprite.__disabled = true;\r\n            });\r\n        }\r\n        if (dataItem.index == this.dataItems.length - 1) {\r\n            sliceLink.disabled = true;\r\n        }\r\n        // do this at the end, otherwise bullets won't be positioned properly\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n        sliceLink.fill = slice.fill;\r\n        //}\r\n    };\r\n    /**\r\n     * [decorateSlice description]\r\n     *\r\n     * @todo Description\r\n     * @param dataItem [description]\r\n     */\r\n    FunnelSeries.prototype.decorateSlice = function (dataItem) {\r\n        var slice = dataItem.slice;\r\n        var sliceLink = dataItem.sliceLink;\r\n        var label = dataItem.label;\r\n        var tick = dataItem.tick;\r\n        var maxWidth = this.slicesContainer.innerWidth;\r\n        var maxHeight = this.slicesContainer.innerHeight;\r\n        var nextValue = this.getNextValue(dataItem);\r\n        var workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n        var bottomRatio = this.bottomRatio;\r\n        var d = 1;\r\n        if (dataItem.value != 0) {\r\n            d = workingValue / Math.abs(dataItem.value);\r\n        }\r\n        else {\r\n            if (dataItem.__disabled || dataItem.isHiding || !dataItem.visible) {\r\n                d = 0.000001;\r\n            }\r\n        }\r\n        if (this.ignoreZeroValues && dataItem.value == 0) {\r\n            dataItem.__disabled = true;\r\n            return;\r\n        }\r\n        else {\r\n            dataItem.__disabled = false;\r\n        }\r\n        if (this._nextY == Infinity) {\r\n            this._nextY = 0;\r\n        }\r\n        if (this.orientation == \"vertical\") {\r\n            var linkHeight = sliceLink.pixelHeight * d;\r\n            maxHeight = maxHeight + linkHeight; // to avoid one link gap in the bottom\r\n            slice.topWidth = workingValue / this.dataItem.values.value.high * maxWidth;\r\n            slice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxWidth;\r\n            sliceLink.topWidth = slice.bottomWidth;\r\n            sliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxWidth;\r\n            slice.y = this._nextY;\r\n            slice.height = Math.min(100000, $math.max(0, maxHeight / this._count * d / this._total - linkHeight));\r\n            slice.x = maxWidth / 2;\r\n            if (!this.alignLabels) {\r\n                label.x = slice.x;\r\n            }\r\n            else {\r\n                label.x = undefined;\r\n            }\r\n            label.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n            this._nextY += slice.pixelHeight + linkHeight;\r\n            sliceLink.y = this._nextY - linkHeight;\r\n            sliceLink.x = slice.x;\r\n        }\r\n        else {\r\n            var linkWidth = sliceLink.pixelWidth * d;\r\n            maxWidth = maxWidth + linkWidth; // to avoid one link gap in the bottom\r\n            slice.topWidth = workingValue / this.dataItem.values.value.high * maxHeight;\r\n            slice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxHeight;\r\n            sliceLink.topWidth = slice.bottomWidth;\r\n            sliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxHeight;\r\n            slice.x = this._nextY;\r\n            slice.width = Math.min(100000, maxWidth / this._count * d * 1 / this._total - linkWidth);\r\n            slice.y = maxHeight / 2;\r\n            if (!this.alignLabels) {\r\n                label.y = slice.y;\r\n            }\r\n            else {\r\n                label.y = this.labelsContainer.measuredHeight;\r\n            }\r\n            label.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n            this._nextY += slice.pixelWidth + linkWidth;\r\n            sliceLink.x = this._nextY - linkWidth;\r\n            sliceLink.y = slice.y;\r\n        }\r\n    };\r\n    FunnelSeries.prototype.getLastLabel = function (index) {\r\n        if (index > 0) {\r\n            var lastLabel = this.labels.getIndex(index);\r\n            if (lastLabel.__disabled || !lastLabel.visible) {\r\n                return this.getLastLabel(index - 1);\r\n            }\r\n            else {\r\n                return lastLabel;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * [arrangeLabels description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    FunnelSeries.prototype.arrangeLabels = function () {\r\n        if (this.alignLabels) {\r\n            var count = this.labels.length;\r\n            if (count > 1) {\r\n                var lastLabel = this.getLastLabel(count - 1);\r\n                if (lastLabel) {\r\n                    var lastY = lastLabel.pixelY;\r\n                    var lastX = lastLabel.pixelX;\r\n                    if (count > 1) {\r\n                        for (var i = count - 2; i >= 0; i--) {\r\n                            var label = this.labels.getIndex(i);\r\n                            if (label.visible && !label.__disabled) {\r\n                                if (label.invalid) {\r\n                                    label.validate();\r\n                                }\r\n                                if (this.orientation == \"vertical\") {\r\n                                    if (label.pixelY + label.measuredHeight > lastY) {\r\n                                        label.y = Math.min(1000000, lastY - label.measuredHeight);\r\n                                    }\r\n                                }\r\n                                // horizontal\r\n                                else {\r\n                                    if (label.pixelX + label.measuredWidth > lastX) {\r\n                                        label.x = Math.min(1000000, lastX - label.measuredWidth);\r\n                                    }\r\n                                }\r\n                                lastY = label.pixelY;\r\n                                lastX = label.pixelX;\r\n                            }\r\n                        }\r\n                        lastY = 0;\r\n                        lastX = 0;\r\n                        for (var i = 0; i < count; i++) {\r\n                            var label = this.labels.getIndex(i);\r\n                            if (label.visible && !label.__disabled) {\r\n                                if (label.invalid) {\r\n                                    label.validate();\r\n                                }\r\n                                if (this.orientation == \"vertical\") {\r\n                                    if (label.pixelY < lastY) {\r\n                                        label.y = Math.min(1000000, lastY);\r\n                                    }\r\n                                }\r\n                                // horizontal\r\n                                else {\r\n                                    if (label.pixelX < lastX) {\r\n                                        label.x = Math.min(1000000, lastX);\r\n                                    }\r\n                                }\r\n                                lastY += label.measuredHeight;\r\n                                lastX += label.measuredWidth;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Positions series bullet.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param bullet  Bullet\r\n     */\r\n    FunnelSeries.prototype.positionBullet = function (bullet) {\r\n        _super.prototype.positionBullet.call(this, bullet);\r\n        var dataItem = bullet.dataItem;\r\n        var slice = dataItem.slice;\r\n        var locationX = bullet.locationX;\r\n        if (!$type.isNumber(locationX)) {\r\n            locationX = 0.5;\r\n        }\r\n        var locationY = bullet.locationY;\r\n        if (!$type.isNumber(locationY)) {\r\n            locationY = 1;\r\n        }\r\n        bullet.x = slice.pixelX + slice.measuredWidth * locationX;\r\n        bullet.y = slice.pixelY + slice.measuredHeight * locationY;\r\n    };\r\n    Object.defineProperty(FunnelSeries.prototype, \"orientation\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the funnel slices: \"horizontal\" or \"vertical\" (default).\r\n         *\r\n         * @default \"vertical\"\r\n         * @param value Orientation\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"orientation\", value)) {\r\n                this.labelsOpposite = this.labelsOpposite;\r\n                this.invalidate();\r\n                if (value == \"vertical\") {\r\n                    this.ticks.template.locationX = 1;\r\n                    this.ticks.template.locationY = 0.5;\r\n                    this.labels.template.rotation = 0;\r\n                    this.layout = \"horizontal\";\r\n                }\r\n                else {\r\n                    this.ticks.template.locationX = 0.5;\r\n                    this.ticks.template.locationY = 1;\r\n                    this.labels.template.rotation = -90;\r\n                    this.layout = \"vertical\";\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelSeries.prototype, \"bottomRatio\", {\r\n        /**\r\n         * @return {number}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"bottomRatio\");\r\n        },\r\n        /**\r\n         * Indicates how slice's bottom will change in relation to slices top AND\r\n         * next slices top.\r\n         *\r\n         * Basically it's a relative value (0-1) that indicates bottom width\r\n         * position between current slice's top width and the top withd of the next\r\n         * one.\r\n         *\r\n         * The scale goes from 0 (closer to current slice width) to 1 (closer to next\r\n         * slice with).\r\n         *\r\n         * `0` (default) will mean that bottom will be the same as top, resulting in\r\n         * a prefectly square slice.\r\n         *\r\n         * From the data-viz standpoint `0` is a correct setting, since area of the\r\n         * slices will depict their value correctly.\r\n         *\r\n         * `1` will mean that slice will become trapezoid with its bottom matching\r\n         * width of the next slice.\r\n         *\r\n         * `0.5` will make bottom width be in the middle of width of current slice\r\n         * and the next slice.\r\n         *\r\n         * @default 0\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"bottomRatio\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelSeries.prototype, \"sliceLinks\", {\r\n        /**\r\n         * A list of elements linking each actual slice.\r\n         *\r\n         * Please note that links are [[FunnelSlice]] objects, just like real links,\r\n         * so they have all the same configuration options.\r\n         *\r\n         * You can use `template` of this link, to specify how links will look.\r\n         *\r\n         * ```TypeScript\r\n         * series.sliceLinks.template.fillOpacity = 0.5;\r\n         * ```\r\n         * ```JavaScript\r\n         * series.sliceLinks.template.fillOpacity = 0.5;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     \"type\": \"FunnelSeries\",\r\n         *      // ...\r\n         *      \"sliceLinks\": {\r\n         *        \"fillOpacity\": 0.5\r\n         *      }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @return Funnel links\r\n         */\r\n        get: function () {\r\n            if (!this._sliceLinks) {\r\n                var sliceLink = new FunnelSlice();\r\n                sliceLink.applyOnClones = true;\r\n                sliceLink.fillOpacity = 0.5;\r\n                sliceLink.expandDistance = -0.3;\r\n                sliceLink.hiddenState.properties.opacity = 0;\r\n                this._disposers.push(sliceLink);\r\n                this._sliceLinks = new ListTemplate(sliceLink);\r\n                this._disposers.push(new ListDisposer(this._sliceLinks));\r\n            }\r\n            return this._sliceLinks;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Shows hidden series.\r\n     *\r\n     * @param duration  Duration of reveal animation (ms)\r\n     * @return Animation\r\n     */\r\n    FunnelSeries.prototype.show = function (duration) {\r\n        var _this = this;\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        var interpolationDuration = this.defaultState.transitionDuration;\r\n        if ($type.isNumber(duration)) {\r\n            interpolationDuration = duration;\r\n        }\r\n        if (!options.animationsEnabled) {\r\n            interpolationDuration = 0;\r\n        }\r\n        var delay = 0;\r\n        $iter.each($iter.indexed(this.dataItems.iterator()), function (a) {\r\n            var i = a[0];\r\n            var dataItem = a[1];\r\n            if (_this.sequencedInterpolation) {\r\n                delay = _this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n            }\r\n            dataItem.show(interpolationDuration, delay, [\"value\"]);\r\n        });\r\n        var animation = _super.prototype.show.call(this, duration);\r\n        return animation;\r\n    };\r\n    /**\r\n     * Hides series.\r\n     *\r\n     * @param duration  Duration of hiding animation (ms)\r\n     * @return Animation\r\n     */\r\n    FunnelSeries.prototype.hide = function (duration) {\r\n        var _this = this;\r\n        var fields = [\"value\"];\r\n        var value = 0;\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        var delay = 0;\r\n        var interpolationDuration = this.hiddenState.transitionDuration;\r\n        if ($type.isNumber(duration)) {\r\n            interpolationDuration = duration;\r\n        }\r\n        if (!options.animationsEnabled) {\r\n            interpolationDuration = 0;\r\n        }\r\n        $iter.each($iter.indexed(this.dataItems.iterator()), function (a) {\r\n            var i = a[0];\r\n            var dataItem = a[1];\r\n            if (_this.sequencedInterpolation) {\r\n                delay = _this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n            }\r\n            dataItem.hide(interpolationDuration, delay, value, fields);\r\n        });\r\n        var animation = _super.prototype.hide.call(this, duration);\r\n        if (animation && !animation.isFinished()) {\r\n            animation.delay(delay);\r\n        }\r\n        return animation;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    FunnelSeries.prototype.setAlignLabels = function (value) {\r\n        _super.prototype.setAlignLabels.call(this, value);\r\n        this.ticks.template.disabled = !value;\r\n        var labelsContainer = this.labelsContainer;\r\n        if (labelsContainer) {\r\n            // do not align\r\n            if (!value) {\r\n                labelsContainer.width = percent(100);\r\n                labelsContainer.height = percent(100);\r\n            }\r\n            //align\r\n            else {\r\n                labelsContainer.height = undefined;\r\n                labelsContainer.width = undefined;\r\n                labelsContainer.margin(10, 10, 10, 10);\r\n            }\r\n        }\r\n        this.labelsOpposite = this.labelsOpposite;\r\n    };\r\n    Object.defineProperty(FunnelSeries.prototype, \"labelsOpposite\", {\r\n        /**\r\n         * @return Labels on opposite side?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"labelsOpposite\");\r\n        },\r\n        /**\r\n         * Put labels on the oppsite side of the series?\r\n         *\r\n         * This setting is only used if `alignLabels = true`.\r\n         *\r\n         * If set to `true` (default) labels will be drawn to the right (on vertical\r\n         * series), or to the bottom (on horizontal series).\r\n         *\r\n         * If set to `false`, labels will be positioned to the left or top\r\n         * respectively.\r\n         *\r\n         * @default true\r\n         * @since 4.1.13\r\n         * @param  value  Labels on opposite side?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"labelsOpposite\", value);\r\n            var labelTemplate = this.labels.template;\r\n            var labelAlign = \"none\";\r\n            var labelValign = \"none\";\r\n            if (!this.alignLabels) {\r\n                if (this.orientation == \"vertical\") {\r\n                    labelAlign = \"center\";\r\n                }\r\n                else {\r\n                    labelValign = \"middle\";\r\n                }\r\n            }\r\n            else {\r\n                // opposite (left/bottom)\r\n                if (value) {\r\n                    this.labelsContainer.toFront();\r\n                    // left\r\n                    if (this.orientation == \"vertical\") {\r\n                        this.ticks.template.locationX = 1;\r\n                        labelTemplate.horizontalCenter = \"left\";\r\n                        labelAlign = \"right\";\r\n                    }\r\n                    // bottom\r\n                    else {\r\n                        this.ticks.template.locationY = 1;\r\n                        labelTemplate.horizontalCenter = \"right\";\r\n                        labelValign = \"bottom\";\r\n                    }\r\n                }\r\n                // non oposite (right/top)\r\n                else {\r\n                    this.labelsContainer.toBack();\r\n                    // right\r\n                    if (this.orientation == \"vertical\") {\r\n                        this.ticks.template.locationX = 0;\r\n                        labelAlign = \"left\";\r\n                    }\r\n                    // top\r\n                    else {\r\n                        labelValign = \"top\";\r\n                        this.ticks.template.locationY = 0;\r\n                    }\r\n                }\r\n            }\r\n            labelTemplate.align = labelAlign;\r\n            labelTemplate.valign = labelValign;\r\n            this.validateLayout();\r\n            this.ticks.each(function (tick) {\r\n                tick.invalidate();\r\n            });\r\n            this.invalidateDataItems();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FunnelSeries;\r\n}(PercentSeries));\r\nexport { FunnelSeries };\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSeries\"] = FunnelSeries;\r\nregistry.registeredClasses[\"FunnelSeriesDataItem\"] = FunnelSeriesDataItem;\r\n//# sourceMappingURL=FunnelSeries.js.map","/**\r\n * Line series module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem } from \"./XYSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { DurationAxis } from \"../axes/DurationAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar LineSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(LineSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LineSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"LineSeriesDataItem\";\r\n        return _this;\r\n    }\r\n    return LineSeriesDataItem;\r\n}(XYSeriesDataItem));\r\nexport { LineSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar LineSeries = /** @class */ (function (_super) {\r\n    __extends(LineSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LineSeries() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Minimum distance in pixels between two adjacent points.\r\n         *\r\n         * If the distance is less than this setting, a point is skipped.\r\n         *\r\n         * This allows acceptable performance with huge amounts of data points.\r\n         *\r\n         * @default 0.5\r\n         */\r\n        _this.minDistance = 0.5;\r\n        _this.segments = new ListTemplate(_this.createSegment());\r\n        _this.segments.template.applyOnClones = true;\r\n        _this._disposers.push(new ListDisposer(_this.segments));\r\n        _this._disposers.push(_this.segments.template);\r\n        _this._segmentsIterator = new $iter.ListIterator(_this.segments, function () { return _this.segments.create(); });\r\n        _this._segmentsIterator.createNewItems = true;\r\n        _this.className = \"LineSeries\";\r\n        _this.strokeOpacity = 1;\r\n        _this.fillOpacity = 0;\r\n        _this.connect = true;\r\n        _this.tensionX = 1;\r\n        _this.tensionY = 1;\r\n        _this.autoGapCount = 1.1;\r\n        _this.segmentsContainer = _this.mainContainer.createChild(Container);\r\n        _this.segmentsContainer.isMeasured = false;\r\n        // line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n        // todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n        // this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n        _this.bulletsContainer.toFront();\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    LineSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Line Series\");\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    LineSeries.prototype.createSegment = function () {\r\n        return new LineSeriesSegment();\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    LineSeries.prototype.createDataItem = function () {\r\n        return new LineSeriesDataItem();\r\n    };\r\n    /**\r\n     * Inits data item's working values.\r\n     *\r\n     * @param dataItem  Data item\r\n     * @param index     Data item's index\r\n     */\r\n    LineSeries.prototype.setInitialWorkingValues = function (dataItem) {\r\n        // this makes data items animate when added\r\n        var yAxis = this._yAxis.get();\r\n        var xAxis = this._xAxis.get();\r\n        if (this.appeared && this.visible) {\r\n            var previousDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n            dataItem.component = this; // as these values are set before, we don't know component yet\r\n            if (this.baseAxis == xAxis) {\r\n                if (yAxis instanceof ValueAxis) {\r\n                    var initialY = yAxis.minZoomed;\r\n                    if (previousDataItem) {\r\n                        initialY = previousDataItem.values[\"valueY\"].workingValue;\r\n                    }\r\n                    // this makes line animate from previous point to newly added point\r\n                    dataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n                    dataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n                    if (xAxis instanceof DateAxis) {\r\n                        dataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n                        dataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX); // animate to it's location\r\n                    }\r\n                    else if (xAxis instanceof DurationAxis) {\r\n                        if (previousDataItem) {\r\n                            var value = dataItem.valueX;\r\n                            dataItem.setWorkingValue(\"valueX\", previousDataItem.valueX, 0); // instantly move it to previous\r\n                            dataItem.setWorkingValue(\"valueX\", value); // animate to new value\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (this.baseAxis == yAxis) {\r\n                if (xAxis instanceof ValueAxis) {\r\n                    var initialX = xAxis.minZoomed;\r\n                    if (previousDataItem) {\r\n                        initialX = previousDataItem.values[\"valueX\"].workingValue;\r\n                    }\r\n                    dataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n                    dataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n                    if (yAxis instanceof DateAxis) {\r\n                        dataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n                        dataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY); // animate to it's location\r\n                    }\r\n                    else if (yAxis instanceof DurationAxis) {\r\n                        if (previousDataItem) {\r\n                            var value = dataItem.valueY;\r\n                            dataItem.setWorkingValue(\"valueY\", previousDataItem.valueY, 0); // instantly move it to previous\r\n                            dataItem.setWorkingValue(\"valueY\", value); // animate to new value\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (this.baseAxis == xAxis) {\r\n                if (yAxis instanceof ValueAxis) {\r\n                    if (xAxis instanceof DateAxis) {\r\n                        dataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX);\r\n                    }\r\n                    if (xAxis instanceof CategoryAxis) {\r\n                        dataItem.setWorkingLocation(\"categoryX\", dataItem.locations.categoryX);\r\n                    }\r\n                }\r\n            }\r\n            if (this.baseAxis == yAxis) {\r\n                if (xAxis instanceof ValueAxis) {\r\n                    if (yAxis instanceof DateAxis) {\r\n                        dataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY);\r\n                    }\r\n                    if (yAxis instanceof CategoryAxis) {\r\n                        dataItem.setWorkingLocation(\"categoryY\", dataItem.locations.categoryY);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates corresponding legend data item with current values.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    LineSeries.prototype.updateLegendValue = function (dataItem, notRange) {\r\n        _super.prototype.updateLegendValue.call(this, dataItem, notRange);\r\n        //This is hack to save some methos, used to set tooltip color source only\r\n        if (dataItem && dataItem.segment) {\r\n            this.tooltipColorSource = dataItem.segment;\r\n        }\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    LineSeries.prototype.validate = function () {\r\n        var _this = this;\r\n        _super.prototype.validate.call(this);\r\n        if (this.xAxis && this.yAxis) {\r\n            this._segmentsIterator.reset();\r\n            this.openSegmentWrapper(this._adjustedStartIndex);\r\n            $iter.each(this.axisRanges.iterator(), function (range) {\r\n                _this.openSegmentWrapper(_this._adjustedStartIndex, range);\r\n            });\r\n            $iter.each(this._segmentsIterator.iterator(), function (segment) {\r\n                segment.__disabled = true;\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * [sliceData description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    LineSeries.prototype.sliceData = function () {\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        // we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n        // find first to the left\r\n        // TODO use iterator instead\r\n        for (var i = this.startIndex - 1; i >= 0; i--) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            if (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n                startIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        this._adjustedStartIndex = this.findAdjustedIndex(startIndex, [\"stroke\", \"strokeWidth\", \"strokeDasharray\", \"strokeOpacity\", \"fill\", \"fillOpacity\", \"opacity\"]);\r\n        // find first to the right\r\n        // TODO use iterator instead\r\n        for (var i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            if (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n                endIndex = i + 1;\r\n                break;\r\n            }\r\n        }\r\n        this._workingStartIndex = startIndex;\r\n        this._workingEndIndex = endIndex;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    LineSeries.prototype.findAdjustedIndex = function (adjustedIndex, properties) {\r\n        var _this = this;\r\n        var propertyFields = this.propertyFields;\r\n        var startIndex = adjustedIndex;\r\n        $array.each(properties, function (property) {\r\n            if ($type.hasValue(propertyFields[property])) {\r\n                for (var i = startIndex; i >= 0; i--) {\r\n                    var dataItem = _this.dataItems.getIndex(i);\r\n                    if (dataItem) {\r\n                        if ($type.hasValue(dataItem.properties[property])) {\r\n                            if (adjustedIndex > i) {\r\n                                adjustedIndex = i;\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return adjustedIndex;\r\n    };\r\n    /**\r\n     * Wraps openSegment call with iterative solution to prevent stack overflow\r\n     *\r\n     * @param openIndex  Index\r\n     * @param axisRange  Range\r\n     */\r\n    LineSeries.prototype.openSegmentWrapper = function (openIndex, axisRange) {\r\n        var params = {\r\n            \"index\": openIndex,\r\n            \"axisRange\": axisRange\r\n        };\r\n        do {\r\n            params = this.openSegment(params.index, params.axisRange);\r\n        } while (params);\r\n    };\r\n    LineSeries.prototype.getSegment = function () {\r\n        var segment = this._segmentsIterator.getFirst();\r\n        if (segment.isDisposed()) {\r\n            this.segments.removeValue(segment);\r\n            return this.getSegment();\r\n        }\r\n        return segment;\r\n    };\r\n    /**\r\n     * [openSegment description]\r\n     *\r\n     * @todo Description\r\n     * @param openIndex  [description]\r\n     * @param axisRange  [description]\r\n     */\r\n    LineSeries.prototype.openSegment = function (openIndex, axisRange) {\r\n        var addToClose = false;\r\n        var points = [];\r\n        openIndex = Math.min(openIndex, this.dataItems.length);\r\n        var endIndex = Math.min(this._workingEndIndex, this.dataItems.length);\r\n        this._workingEndIndex = Math.min(this._workingEndIndex, this.dataItems.length);\r\n        var closeIndex;\r\n        var propertiesChanged = false;\r\n        var segment = this.getSegment();\r\n        segment.__disabled = false;\r\n        if (axisRange) {\r\n            segment.parent = axisRange.contents;\r\n            $object.copyProperties(axisRange.contents, segment, visualProperties);\r\n        }\r\n        else {\r\n            $object.copyProperties(this, segment, visualProperties);\r\n            segment.filters.clear();\r\n            segment.parent = this.segmentsContainer;\r\n        }\r\n        this.group.node.removeAttribute(\"fill\");\r\n        var connect = this.connect;\r\n        var valuesFound = false; // some flag to avoid multiple closes if no values found\r\n        for (var i = openIndex; i < endIndex; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            dataItem.segment = segment;\r\n            if (dataItem.hasProperties) {\r\n                // if this is first item of segment\r\n                if (i == openIndex) {\r\n                    this.updateSegmentProperties(dataItem.properties, segment);\r\n                }\r\n                else {\r\n                    // this time we only need to know if properties changed, so we don't pass segment\r\n                    propertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n                }\r\n            }\r\n            if (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n                this.addPoints(points, dataItem, this.xField, this.yField);\r\n                valuesFound = true;\r\n            }\r\n            else {\r\n                // if no values in first data item, go to next\r\n                if (i == openIndex) {\r\n                    continue;\r\n                }\r\n                else {\r\n                    // stop cycle\r\n                    if (!connect && valuesFound) {\r\n                        closeIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            closeIndex = i;\r\n            if (this.baseAxis instanceof DateAxis) {\r\n                var next = this.dataItems.getIndex(i + 1);\r\n                if (next && this.baseAxis.makeGap(next, dataItem)) {\r\n                    addToClose = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (propertiesChanged) {\r\n                break;\r\n            }\r\n        }\r\n        return this.closeSegment(segment, points, openIndex, closeIndex, axisRange, addToClose);\r\n    };\r\n    /**\r\n     * [addPoints description]\r\n     *\r\n     * @todo Description\r\n     * @param points    [description]\r\n     * @param dataItem  [description]\r\n     * @param xField    [description]\r\n     * @param yField    [description]\r\n     * @param backwards [description]\r\n     */\r\n    LineSeries.prototype.addPoints = function (points, dataItem, xField, yField, backwards) {\r\n        var point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n        if (!backwards) {\r\n            dataItem.point = point;\r\n        }\r\n        points.push(point);\r\n    };\r\n    /**\r\n     * [closeSegment description]\r\n     *\r\n     * @todo Description\r\n     * @param segment    [description]\r\n     * @param points     [description]\r\n     * @param openIndex  [description]\r\n     * @param closeIndex [description]\r\n     * @param axisRange  [description]\r\n     */\r\n    LineSeries.prototype.closeSegment = function (segment, points, openIndex, closeIndex, axisRange, add) {\r\n        var closePoints = [];\r\n        if (this.dataFields[this._xOpenField] ||\r\n            this.dataFields[this._yOpenField] ||\r\n            this.stacked) {\r\n            for (var i = closeIndex; i >= openIndex; i--) {\r\n                var dataItem = this.dataItems.getIndex(i);\r\n                if (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n                    this.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var baseAxis = this.baseAxis;\r\n            var count = points.length;\r\n            var xAxis = this.xAxis;\r\n            var yAxis = this.yAxis;\r\n            if (count > 0) {\r\n                if (baseAxis == xAxis) {\r\n                    closePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n                    closePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n                }\r\n                else {\r\n                    closePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n                    closePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n                }\r\n            }\r\n        }\r\n        this.drawSegment(segment, points, closePoints);\r\n        if (add) {\r\n            closeIndex++;\r\n        }\r\n        if (closeIndex < this._workingEndIndex - 1) {\r\n            return { \"index\": closeIndex, \"axisRange\": axisRange };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Draws the line segment.\r\n     *\r\n     * @param segment     Segment\r\n     * @param points      Segment points\r\n     * @param closePoints Segment close points\r\n     */\r\n    LineSeries.prototype.drawSegment = function (segment, points, closePoints) {\r\n        segment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n    };\r\n    /**\r\n     * Segement will get its colors from `this.dataItem`, as thats how\r\n     * `getPropertyValue()` method works.\r\n     *\r\n     * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n     * `hasProperties` is set to `true` on data item (this means it can contain\r\n     * some properties set).\r\n     *\r\n     * @param itemProperties  Item properties\r\n     * @param segment         Segment\r\n     * @return Properties changed?\r\n     */\r\n    LineSeries.prototype.updateSegmentProperties = function (itemProperties, segment, checkOnly) {\r\n        var changed = false;\r\n        $object.each(itemProperties, function (propertyName, value) {\r\n            // some value must be defined\r\n            if ($type.hasValue(value)) {\r\n                var currentValue = segment[propertyName];\r\n                var currentValueStr = void 0;\r\n                // current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n                // toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n                if (currentValue) {\r\n                    if (currentValue.toString) {\r\n                        currentValueStr = currentValue.toString();\r\n                    }\r\n                    else {\r\n                        currentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n                    }\r\n                }\r\n                var valueStr = void 0;\r\n                if (value) {\r\n                    if (value.toString) {\r\n                        valueStr = value.toString();\r\n                    }\r\n                    else {\r\n                        valueStr = value; // not doing String(currentValue) as this will make all Objects the same\r\n                    }\r\n                }\r\n                if (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n                    // void\r\n                }\r\n                else {\r\n                    if (!checkOnly) {\r\n                        segment[propertyName] = value;\r\n                    }\r\n                    changed = true;\r\n                }\r\n            }\r\n        });\r\n        return changed;\r\n    };\r\n    Object.defineProperty(LineSeries.prototype, \"connect\", {\r\n        /**\r\n         * @return Connect?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"connect\");\r\n        },\r\n        /**\r\n         * Connect the lines over empty data points?\r\n         *\r\n         * If set to `true` the line will connect two adjacent data points by a\r\n         * straight line. Even if there are data points with missing values\r\n         * in-between.\r\n         *\r\n         * If you set this to `false`, the line will break when there are missing\r\n         * values.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n         * @default true\r\n         * @param value  Connect?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"connect\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LineSeries.prototype, \"tensionX\", {\r\n        /**\r\n         * @return Horizontal tension (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tensionX\");\r\n        },\r\n        /**\r\n         * Horizontal tension setting of the line (0-1).\r\n         *\r\n         * Can be used to create smoothed lines. It works like this:\r\n         *\r\n         * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n         * will mean that the \"tension\" is very high, so the line is maximally\r\n         * attracted to the points it connects, hence the straight line.\r\n         *\r\n         * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n         *\r\n         * The smaller the tension setting, the more relaxed the line and the more\r\n         * wide the curve.\r\n         *\r\n         * This setting is for horizontal tension, meaning the curve will bend in\r\n         * such way that it never goes below or above connecting points. To enable\r\n         * vertical bending as well, use `tensionY`.\r\n         *\r\n         * IMPORTANT: line smoothing works best when data items are placed at regular\r\n         * intervals. For setups where data items are spaced erratically, enabling\r\n         * smoothing might result in awkwardly looking lines.\r\n         *\r\n         * @default 1\r\n         * @param value  Horizontal tension (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tensionX\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LineSeries.prototype, \"tensionY\", {\r\n        /**\r\n         * @return Vertical tension (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tensionY\");\r\n        },\r\n        /**\r\n         * Can be used to create smoothed lines. It works like this:\r\n         *\r\n         * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n         * will mean that the \"tension\" is very high, so the line is maximally\r\n         * attracted to the points it connects, hence the straight line.\r\n         *\r\n         * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n         *\r\n         * The smaller the tension setting, the more relaxed the line and the more\r\n         * wide the curve.\r\n         *\r\n         * This setting is for vertical tension, meaning the curve might bend in\r\n         * such way that it will go below or above connected points.\r\n         *\r\n         * Combine this setting with `tensionX` to create beautifully looking\r\n         * smoothed line series.\r\n         *\r\n         * @default 1\r\n         * @param value  Vertical tension (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tensionY\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param marker  Legend item container\r\n     */\r\n    LineSeries.prototype.createLegendMarker = function (marker) {\r\n        var _this = this;\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.disposeChildren();\r\n        var line = marker.createChild(Line);\r\n        line.shouldClone = false;\r\n        //line.copyFrom(<any>this); coppies events which is not good\r\n        $object.copyProperties(this, line, visualProperties);\r\n        line.x2 = w;\r\n        line.y = h / 2;\r\n        line.y2 = 0.00001;\r\n        line.visible = true;\r\n        if (this.fillOpacity > 0) {\r\n            var fill = marker.createChild(Rectangle);\r\n            //fill.copyFrom(<any>this); coppies events which is not good\r\n            $object.copyProperties(this, fill, visualProperties);\r\n            fill.width = w;\r\n            fill.height = h;\r\n            fill.y = 0;\r\n            fill.strokeOpacity = 0;\r\n            fill.visible = true;\r\n            line.y = 0;\r\n        }\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = this.stroke;\r\n        legendDataItem.colorOrig = this.fill;\r\n        $iter.eachContinue(this.bullets.iterator(), function (bullet) {\r\n            if ((bullet instanceof Bullet) && !bullet.copyToLegendMarker) {\r\n                return false;\r\n            }\r\n            var hasLabels = false;\r\n            if (bullet instanceof Container) {\r\n                // do not copy bullets with labels\r\n                $iter.each(bullet.children.iterator(), function (child) {\r\n                    if (child instanceof Label) {\r\n                        hasLabels = true;\r\n                        return true;\r\n                    }\r\n                });\r\n            }\r\n            if (!hasLabels) {\r\n                var clone = bullet.clone();\r\n                clone.parent = marker;\r\n                clone.isMeasured = true;\r\n                clone.tooltipText = undefined;\r\n                clone.x = w / 2;\r\n                if (_this.fillOpacity > 0) {\r\n                    clone.y = 0;\r\n                }\r\n                else {\r\n                    clone.y = h / 2;\r\n                }\r\n                clone.visible = true;\r\n                // otherwise will not transit to color after hiding\r\n                if (!$type.hasValue(clone.fill)) {\r\n                    clone.fill = _this.fill;\r\n                }\r\n                if (!$type.hasValue(clone.stroke)) {\r\n                    clone.stroke = _this.stroke;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    LineSeries.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this.segments.clear();\r\n    };\r\n    Object.defineProperty(LineSeries.prototype, \"autoGapCount\", {\r\n        /**\r\n         * @return Gap count\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"autoGapCount\");\r\n        },\r\n        /**\r\n         * If `connect = false` and distance between two data points is bigger\r\n         * than `baseInterval * autoGapCount`, a line will break automatically.\r\n         *\r\n         * @since 4.2.4\r\n         * @param  value  Gap count\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"autoGapCount\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return LineSeries;\r\n}(XYSeries));\r\nexport { LineSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n//# sourceMappingURL=LineSeries.js.map","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nvar LineSeriesSegment = /** @class */ (function (_super) {\r\n    __extends(LineSeriesSegment, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LineSeriesSegment() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"LineSeriesSegment\";\r\n        // Set defaults\r\n        _this.isMeasured = false;\r\n        _this.interactionsEnabled = false;\r\n        _this.layout = \"none\";\r\n        // Create fill element\r\n        var fillSprite = _this.createChild(Sprite);\r\n        _this.fillSprite = fillSprite;\r\n        fillSprite.shouldClone = false;\r\n        fillSprite.setElement(_this.paper.add(\"path\"));\r\n        fillSprite.isMeasured = false;\r\n        _this._disposers.push(fillSprite);\r\n        // Create line element\r\n        var strokeSprite = _this.createChild(Sprite);\r\n        _this.strokeSprite = strokeSprite;\r\n        strokeSprite.shouldClone = false;\r\n        strokeSprite.fill = color();\r\n        strokeSprite.setElement(_this.paper.add(\"path\"));\r\n        strokeSprite.isMeasured = false;\r\n        _this._disposers.push(strokeSprite);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the series segment.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param points       Points to connect\r\n     * @param closePoints  ?\r\n     * @param smoothnessX  Horizontal bezier setting (?)\r\n     * @param smoothnessY  Vertical bezier setting (?)\r\n     */\r\n    LineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY) {\r\n        if (!this.disabled) {\r\n            if (points.length > 0 && closePoints.length > 0) {\r\n                // first moveTo helps to avoid Chrome straight line in the mask bug.\r\n                var path = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n                if (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n                    // like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n                }\r\n                else {\r\n                    this.strokeSprite.path = path;\r\n                }\r\n                if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n                    path += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n                    path += $path.lineTo(points[0]);\r\n                    path += $path.closePath();\r\n                    this.fillSprite.path = path;\r\n                }\r\n            }\r\n            else {\r\n                this.fillSprite.path = \"\";\r\n                this.strokeSprite.path = \"\";\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies properties from a [[Sprite]] to both line and fill elements.\r\n     *\r\n     * @param source Source [[Sprite]] to copy properties from\r\n     */\r\n    LineSeriesSegment.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        var lineElement = this.strokeSprite;\r\n        $object.copyProperties(source, lineElement.properties, visualProperties);\r\n        lineElement.events.copyFrom(source.strokeSprite.events);\r\n        lineElement.fillOpacity = 0;\r\n        var fillElement = this.fillSprite;\r\n        $object.copyProperties(source, fillElement.properties, visualProperties);\r\n        fillElement.events.copyFrom(source.fillSprite.events);\r\n        fillElement.strokeOpacity = 0;\r\n    };\r\n    return LineSeriesSegment;\r\n}(Container));\r\nexport { LineSeriesSegment };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n//# sourceMappingURL=LineSeriesSegment.js.map","/**\r\n * Candlestick Series module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar OHLCSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(OHLCSeriesDataItem, _super);\r\n    /**\r\n     * Defines a type of [[Component]] this data item is used for\r\n     * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n     */\r\n    //public _component!: OHLCSeries;\r\n    /**\r\n     * Constructor\r\n     */\r\n    function OHLCSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"OHLCSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return OHLCSeriesDataItem;\r\n}(CandlestickSeriesDataItem));\r\nexport { OHLCSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar OHLCSeries = /** @class */ (function (_super) {\r\n    __extends(OHLCSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function OHLCSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"OHLCSeries\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    OHLCSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"OHLC Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    OHLCSeries.prototype.createDataItem = function () {\r\n        return new OHLCSeriesDataItem();\r\n    };\r\n    OHLCSeries.prototype.validateCandlestick = function (dataItem) {\r\n        var column = dataItem.column;\r\n        if (column) {\r\n            var openLine_1 = column.openLine;\r\n            var highLowLine_1 = column.highLowLine;\r\n            var closeLine_1 = column.closeLine;\r\n            if (this.baseAxis == this.xAxis) {\r\n                var x = column.pixelWidth / 2;\r\n                highLowLine_1.x = x;\r\n                // TODO can these be removed ?\r\n                dataItem.getWorkingValue(this.yOpenField);\r\n                dataItem.getWorkingValue(this.yField);\r\n                var yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n                var yClose = this.yAxis.getY(dataItem, this.yField);\r\n                var yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n                var yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n                var pixelY = column.pixelY;\r\n                openLine_1.y1 = yOpen - pixelY;\r\n                openLine_1.y2 = yOpen - pixelY;\r\n                openLine_1.x1 = 0;\r\n                openLine_1.x2 = x;\r\n                closeLine_1.y1 = yClose - pixelY;\r\n                closeLine_1.y2 = yClose - pixelY;\r\n                closeLine_1.x1 = x;\r\n                closeLine_1.x2 = 2 * x;\r\n                highLowLine_1.y1 = yHigh - pixelY;\r\n                highLowLine_1.y2 = yLow - pixelY;\r\n            }\r\n            if (this.baseAxis == this.yAxis) {\r\n                var y = column.pixelHeight / 2;\r\n                highLowLine_1.y = y;\r\n                // TODO can these be removed ?\r\n                dataItem.getWorkingValue(this.xOpenField);\r\n                dataItem.getWorkingValue(this.xField);\r\n                var xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n                var xClose = this.xAxis.getX(dataItem, this.xField);\r\n                var xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n                var xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n                var pixelX = column.pixelX;\r\n                openLine_1.x1 = xOpen - pixelX;\r\n                openLine_1.x2 = xOpen - pixelX;\r\n                openLine_1.y1 = y;\r\n                openLine_1.y2 = 2 * y;\r\n                closeLine_1.x1 = xClose - pixelX;\r\n                closeLine_1.x2 = xClose - pixelX;\r\n                closeLine_1.y1 = 0;\r\n                closeLine_1.y2 = y;\r\n                highLowLine_1.x1 = xHigh - pixelX;\r\n                highLowLine_1.x2 = xLow - pixelX;\r\n            }\r\n            $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n                var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n                if (rangeColumn) {\r\n                    var rangeOpenLine = rangeColumn.openLine;\r\n                    rangeOpenLine.x = openLine_1.x;\r\n                    rangeOpenLine.y = openLine_1.y;\r\n                    rangeOpenLine.x1 = openLine_1.x1;\r\n                    rangeOpenLine.x2 = openLine_1.x2;\r\n                    rangeOpenLine.y1 = openLine_1.y1;\r\n                    rangeOpenLine.y2 = openLine_1.y2;\r\n                    var rangeCloseLine = rangeColumn.closeLine;\r\n                    rangeCloseLine.x = closeLine_1.x;\r\n                    rangeCloseLine.y = closeLine_1.y;\r\n                    rangeCloseLine.x1 = closeLine_1.x1;\r\n                    rangeCloseLine.x2 = closeLine_1.x2;\r\n                    rangeCloseLine.y1 = closeLine_1.y1;\r\n                    rangeCloseLine.y2 = closeLine_1.y2;\r\n                    var rangeHighLowLine = rangeColumn.highLowLine;\r\n                    rangeHighLowLine.x = highLowLine_1.x;\r\n                    rangeHighLowLine.y = highLowLine_1.y;\r\n                    rangeHighLowLine.x1 = highLowLine_1.x1;\r\n                    rangeHighLowLine.x2 = highLowLine_1.x2;\r\n                    rangeHighLowLine.y1 = highLowLine_1.y1;\r\n                    rangeHighLowLine.y2 = highLowLine_1.y2;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param marker  Legend item container\r\n     */\r\n    OHLCSeries.prototype.createLegendMarker = function (marker) {\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.removeChildren();\r\n        var column = marker.createChild(OHLC);\r\n        column.shouldClone = false;\r\n        column.copyFrom(this.columns.template);\r\n        var cw;\r\n        var ch;\r\n        var openLine = column.openLine;\r\n        var closeLine = column.closeLine;\r\n        var highLowLine = column.highLowLine;\r\n        if (this.baseAxis == this.yAxis) {\r\n            cw = w / 3;\r\n            ch = h;\r\n            highLowLine.y = h / 2;\r\n            highLowLine.x2 = w;\r\n            openLine.x = w / 3 * 2;\r\n            openLine.y2 = h / 2;\r\n            closeLine.x = w / 3;\r\n            closeLine.y2 = h;\r\n            closeLine.y1 = h / 2;\r\n        }\r\n        else {\r\n            cw = w;\r\n            ch = h / 3;\r\n            highLowLine.x = w / 2;\r\n            highLowLine.y2 = h;\r\n            openLine.y = h / 3 * 2;\r\n            openLine.x2 = w / 2;\r\n            closeLine.y = h / 3;\r\n            closeLine.x2 = w;\r\n            closeLine.x1 = w / 2;\r\n        }\r\n        column.width = cw;\r\n        column.height = ch;\r\n        $object.copyProperties(this, marker, visualProperties);\r\n        $object.copyProperties(this.columns.template, column, visualProperties);\r\n        column.stroke = this.riseFromOpenState.properties.stroke;\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = column.stroke;\r\n        legendDataItem.colorOrig = column.stroke;\r\n    };\r\n    /**\r\n     * Returns an element to use for Candlestick\r\n     * @ignore\r\n     * @return Element.\r\n     */\r\n    OHLCSeries.prototype.createColumnTemplate = function () {\r\n        return new OHLC();\r\n    };\r\n    return OHLCSeries;\r\n}(CandlestickSeries));\r\nexport { OHLCSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n//# sourceMappingURL=OHLCSeries.js.map","/**\r\n * Defines Percent Chart Series.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Tick } from \"../elements/Tick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo: sequenced?\r\n/**\r\n * Defines a [[DataItem]] for [[PercentSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PercentSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(PercentSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PercentSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PercentSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Adds an `id` attribute the the slice element and returns its id.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PercentSeriesDataItem.prototype.uidAttr = function () {\r\n        return this.slice.uidAttr();\r\n    };\r\n    /**\r\n     * Hide the data item (and corresponding visual elements).\r\n     *\r\n     * @param duration  Duration (ms)\r\n     * @param delay     Delay hiding (ms)\r\n     * @param toValue   Target value for animation\r\n     * @param fields    Fields to animate while hiding\r\n     */\r\n    PercentSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\r\n        if (!fields) {\r\n            fields = [\"value\"];\r\n        }\r\n        return _super.prototype.hide.call(this, duration, delay, 0, fields);\r\n    };\r\n    /**\r\n     * Sets visibility of the Data Item.\r\n     *\r\n     * @param value Data Item\r\n     */\r\n    PercentSeriesDataItem.prototype.setVisibility = function (value, noChangeValues) {\r\n        if (!noChangeValues) {\r\n            if (value) {\r\n                this.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\r\n            }\r\n            else {\r\n                this.setWorkingValue(\"value\", 0, 0, 0);\r\n            }\r\n        }\r\n        _super.prototype.setVisibility.call(this, value, noChangeValues);\r\n    };\r\n    /**\r\n     * Show hidden data item (and corresponding visual elements).\r\n     *\r\n     * @param duration  Duration (ms)\r\n     * @param delay     Delay hiding (ms)\r\n     * @param fields    Fields to animate while hiding\r\n     */\r\n    PercentSeriesDataItem.prototype.show = function (duration, delay, fields) {\r\n        if (!fields) {\r\n            fields = [\"value\"];\r\n        }\r\n        return _super.prototype.show.call(this, duration, delay, fields);\r\n    };\r\n    Object.defineProperty(PercentSeriesDataItem.prototype, \"category\", {\r\n        /**\r\n         * @return Category\r\n         */\r\n        get: function () {\r\n            return this.properties.category;\r\n        },\r\n        /**\r\n         * Category.\r\n         *\r\n         * @param value  Category\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"category\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a marker used in the legend for this slice.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param marker  Marker container\r\n     */\r\n    PercentSeriesDataItem.prototype.createLegendMarker = function (marker) {\r\n        this.component.createLegendMarker(marker, this);\r\n    };\r\n    Object.defineProperty(PercentSeriesDataItem.prototype, \"legendDataItem\", {\r\n        /**\r\n         * @return Legend data item\r\n         */\r\n        get: function () {\r\n            return this._legendDataItem;\r\n        },\r\n        /**\r\n         * A legend's data item, that corresponds to this data item.\r\n         *\r\n         * @param value  Legend data item\r\n         */\r\n        set: function (value) {\r\n            this._legendDataItem = value;\r\n            if (value.label) {\r\n                value.label.dataItem = this;\r\n            }\r\n            if (value.valueLabel) {\r\n                value.valueLabel.dataItem = this;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PercentSeriesDataItem.prototype, \"tick\", {\r\n        /**\r\n         * A Tick element, related to this data item. (slice)\r\n         *\r\n         * @readonly\r\n         * @return Tick element\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._tick) {\r\n                var tick_1 = this.component.ticks.create();\r\n                this._tick = tick_1;\r\n                this.addSprite(tick_1);\r\n                this._disposers.push(tick_1);\r\n                tick_1.parent = this.component.ticksContainer;\r\n                this._disposers.push(new Disposer(function () {\r\n                    if (_this.component) {\r\n                        _this.component.ticks.removeValue(tick_1);\r\n                    }\r\n                }));\r\n                tick_1.visible = this.visible;\r\n            }\r\n            return this._tick;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PercentSeriesDataItem.prototype, \"label\", {\r\n        /**\r\n         * A Label element, related to this data item. (slice)\r\n         *\r\n         * @readonly\r\n         * @return Label element\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._label) {\r\n                var label_1 = this.component.labels.create();\r\n                this.addSprite(label_1);\r\n                this._label = label_1;\r\n                this._disposers.push(label_1);\r\n                label_1.parent = this.component.labelsContainer;\r\n                this._disposers.push(new Disposer(function () {\r\n                    if (_this.component) {\r\n                        _this.component.labels.removeValue(label_1);\r\n                    }\r\n                }));\r\n                label_1.visible = this.visible;\r\n            }\r\n            return this._label;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PercentSeriesDataItem.prototype, \"slice\", {\r\n        /**\r\n         * An element, related to this data item. (slice)\r\n         *\r\n         * @readonly\r\n         * @return Slice element\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._slice) {\r\n                var component_1 = this.component;\r\n                var slice_1 = component_1.slices.create();\r\n                this.addSprite(slice_1);\r\n                this._slice = slice_1;\r\n                this._disposers.push(slice_1);\r\n                slice_1.parent = component_1.slicesContainer;\r\n                this._disposers.push(new Disposer(function () {\r\n                    component_1.slices.removeValue(slice_1);\r\n                }));\r\n                slice_1.visible = this.visible;\r\n                // Apply accessibility\r\n                if (component_1.itemsFocusable()) {\r\n                    this.component.role = \"menu\";\r\n                    slice_1.role = \"menuitem\";\r\n                    slice_1.focusable = true;\r\n                }\r\n                else {\r\n                    this.component.role = \"list\";\r\n                    slice_1.role = \"listitem\";\r\n                    slice_1.focusable = false;\r\n                }\r\n                // Apply screen reader label\r\n                if (slice_1.focusable) {\r\n                    slice_1.events.on(\"focus\", function (ev) {\r\n                        slice_1.readerTitle = component_1.populateString(component_1.itemReaderText, _this);\r\n                    }, undefined, false);\r\n                    slice_1.events.on(\"blur\", function (ev) {\r\n                        slice_1.readerTitle = \"\";\r\n                    }, undefined, false);\r\n                }\r\n                if (slice_1.hoverable) {\r\n                    slice_1.events.on(\"over\", function (ev) {\r\n                        slice_1.readerTitle = component_1.populateString(component_1.itemReaderText, _this);\r\n                    }, undefined, false);\r\n                    slice_1.events.on(\"out\", function (ev) {\r\n                        slice_1.readerTitle = \"\";\r\n                    }, undefined, false);\r\n                }\r\n            }\r\n            return this._slice;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PercentSeriesDataItem.prototype, \"hiddenInLegend\", {\r\n        /**\r\n         * @return Disabled in legend?\r\n         */\r\n        get: function () {\r\n            return this.properties.hiddenInLegend;\r\n        },\r\n        /**\r\n         * Should dataItem (slice) be hidden in legend?\r\n         *\r\n         * @param value Visible in legend?\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"hiddenInLegend\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PercentSeriesDataItem;\r\n}(SeriesDataItem));\r\nexport { PercentSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[PercentSeries]] which is a base class for [[PieSeries]],\r\n * [[FunnelSeries]], and [[PyramidSeries]].\r\n *\r\n * @see {@link IPercentSeriesEvents} for a list of available Events\r\n * @see {@link IPercentSeriesAdapters} for a list of available Adapters\r\n */\r\nvar PercentSeries = /** @class */ (function (_super) {\r\n    __extends(PercentSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PercentSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PercentSeries\";\r\n        _this._addAllDataItems = false;\r\n        _this.colors = new ColorSet();\r\n        _this.colors.step = 1;\r\n        _this.isMeasured = true;\r\n        _this.calculatePercent = true;\r\n        var slicesContainer = _this.createChild(Container);\r\n        slicesContainer.shouldClone = false;\r\n        slicesContainer.isMeasured = false;\r\n        _this.slicesContainer = slicesContainer;\r\n        var ticksContainer = _this.createChild(Container);\r\n        ticksContainer.shouldClone = false;\r\n        ticksContainer.isMeasured = false;\r\n        ticksContainer.layout = \"none\";\r\n        _this.ticksContainer = ticksContainer;\r\n        var labelsContainer = _this.createChild(Container);\r\n        labelsContainer.shouldClone = false;\r\n        labelsContainer.isMeasured = false;\r\n        labelsContainer.layout = \"none\";\r\n        _this.labelsContainer = labelsContainer;\r\n        _this.alignLabels = false;\r\n        _this.bulletsContainer.toFront();\r\n        // Make all slices focusable\r\n        _this.skipFocusThreshold = 50;\r\n        var defaultState = _this.defaultState;\r\n        defaultState.transitionEasing = $ease.sinOut;\r\n        // Accessibility\r\n        _this.itemReaderText = \"{category}: {value.percent.formatNumber('#.#')}%\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates a slice element.\r\n     *\r\n     * @return Slice\r\n     */\r\n    PercentSeries.prototype.createSlice = function () {\r\n        return new Sprite();\r\n    };\r\n    /**\r\n     * Creates a tick element.\r\n     *\r\n     * @return Tick\r\n     */\r\n    PercentSeries.prototype.createTick = function () {\r\n        return new Tick();\r\n    };\r\n    /**\r\n     * Sreates label element.\r\n     *\r\n     * @return label\r\n     */\r\n    PercentSeries.prototype.createLabel = function () {\r\n        return new Label();\r\n    };\r\n    Object.defineProperty(PercentSeries.prototype, \"slices\", {\r\n        /**\r\n         * A list of slice elements for the series.\r\n         *\r\n         * Use its `template` to configure look and behavior of the slices. E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * series.slices.template.stroke = am4core.color(\"#fff\");\r\n         * series.slices.template.strokeWidth = 2;\r\n         * ```\r\n         * ```JavaScript\r\n         * series.slices.template.stroke = am4core.color(\"#fff\");\r\n         * series.slices.template.strokeWidth = 2;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     // ...\r\n         *     \"slices\": {\r\n         *       \"stroke\": \"#fff\",\r\n         *       \"strokeWidth\": 2\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n         * @return Slices\r\n         */\r\n        get: function () {\r\n            if (!this._slices) {\r\n                var slice = this.createSlice();\r\n                slice.applyOnClones = true;\r\n                this._disposers.push(slice);\r\n                this.initSlice(slice);\r\n                this._slices = new ListTemplate(slice);\r\n                this._disposers.push(new ListDisposer(this._slices));\r\n            }\r\n            return this._slices;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PercentSeries.prototype, \"ticks\", {\r\n        /**\r\n         * A list of tick elements for the series. Ticks connect slice to its label.\r\n         *\r\n         * Use its `template` to configure look and behavior of the ticks. E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * series.ticks.template.strokeWidth = 2;\r\n         * ```\r\n         * ```JavaScript\r\n         * series.ticks.template.strokeWidth = 2;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     // ...\r\n         *     \"ticks\": {\r\n         *       \"strokeWidth\": 2\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n         * @return Ticks\r\n         */\r\n        get: function () {\r\n            if (!this._ticks) {\r\n                var tick = this.createTick();\r\n                tick.applyOnClones = true;\r\n                this._disposers.push(tick);\r\n                this.initTick(tick);\r\n                this._ticks = new ListTemplate(tick);\r\n                this._disposers.push(new ListDisposer(this._ticks));\r\n            }\r\n            return this._ticks;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PercentSeries.prototype, \"labels\", {\r\n        /**\r\n         * A list of slice label elements for the series.\r\n         *\r\n         * Use its `template` to configure look and behavior of the labels. E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * series.labels.template.fill = am4core.color(\"#c00\");\r\n         * series.labels.template.fontSize = 20;\r\n         * ```\r\n         * ```JavaScript\r\n         * series.labels.template.fill = am4core.color(\"#c00\");\r\n         * series.labels.template.fontSize = 20;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     // ...\r\n         *     \"labels\": {\r\n         *       \"stroke\": \"#c00\",\r\n         *       \"fontSize\": 20\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n         * @return Labels\r\n         */\r\n        get: function () {\r\n            if (!this._labels) {\r\n                var label = this.createLabel();\r\n                label.applyOnClones = true;\r\n                this._disposers.push(label);\r\n                this.initLabel(label);\r\n                this._labels = new ListTemplate(label);\r\n                this._disposers.push(new ListDisposer(this._labels));\r\n            }\r\n            return this._labels;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    PercentSeries.prototype.createDataItem = function () {\r\n        return new PercentSeriesDataItem();\r\n    };\r\n    /**\r\n     * Creates and returns a new slice element.\r\n     *\r\n     * @param sliceType  Type of the slice element\r\n     * @return Slice\r\n     */\r\n    PercentSeries.prototype.initSlice = function (slice) {\r\n    };\r\n    PercentSeries.prototype.initLabel = function (label) {\r\n        label.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\r\n        label.isMeasured = false;\r\n        label.padding(5, 5, 5, 5);\r\n    };\r\n    PercentSeries.prototype.initTick = function (label) {\r\n    };\r\n    /**\r\n     * Validates (processes) data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PercentSeries.prototype.validateDataItems = function () {\r\n        this.colors.reset();\r\n        if (this.patterns) {\r\n            this.patterns.reset();\r\n        }\r\n        _super.prototype.validateDataItems.call(this);\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    PercentSeries.prototype.validateDataElement = function (dataItem) {\r\n        var slice = dataItem.slice;\r\n        if (slice) {\r\n            if (slice.fill == undefined) {\r\n                if (this.patterns) {\r\n                    if (!$type.hasValue(slice.stroke)) {\r\n                        slice.stroke = this.colors.next();\r\n                    }\r\n                    slice.fill = this.patterns.next();\r\n                    if ($type.hasValue(slice.fillOpacity)) {\r\n                        slice.fill.backgroundOpacity = slice.fillOpacity;\r\n                    }\r\n                    if (slice.stroke instanceof Color) {\r\n                        slice.fill.stroke = slice.stroke;\r\n                        slice.fill.fill = slice.stroke;\r\n                    }\r\n                }\r\n                else {\r\n                    slice.fill = this.colors.next();\r\n                }\r\n            }\r\n            else {\r\n                this.colors.currentStep += this.colors.step;\r\n            }\r\n            if (slice.stroke == undefined) {\r\n                slice.stroke = slice.fill;\r\n            }\r\n        }\r\n        // do this at the end, otherwise bullets won't be positioned properly\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n        if (slice) {\r\n            dataItem.bullets.each(function (key, bullet) {\r\n                if (bullet.fill == undefined) {\r\n                    bullet.fill = slice.fill;\r\n                }\r\n                if (bullet.stroke == undefined) {\r\n                    bullet.stroke = slice.stroke;\r\n                }\r\n            });\r\n        }\r\n        this.updateLegendValue(dataItem);\r\n    };\r\n    /**\r\n     * Validates (processes) data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PercentSeries.prototype.validateData = function () {\r\n        _super.prototype.validateData.call(this);\r\n        if (this.chart) {\r\n            this.chart.feedLegend();\r\n        }\r\n    };\r\n    /**\r\n     * Arranges slice labels according to position settings.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItems  Data items\r\n     */\r\n    PercentSeries.prototype.arrangeLabels = function (dataItems) {\r\n        for (var i = 0, len = dataItems.length; i < len; i++) {\r\n            var dataItem = dataItems[i];\r\n            var label = dataItem.label;\r\n            if (label) {\r\n                if (label.invalid) {\r\n                    label.validate();\r\n                }\r\n                var lh = label.measuredHeight;\r\n                if (!label.visible) {\r\n                    lh = 0;\r\n                }\r\n                if (label.pixelY - lh / 2 < -this.maxHeight / 2) {\r\n                    label.y = -this.maxHeight / 2 + lh / 2;\r\n                }\r\n                var nextLabel = this.getNextLabel(i + 1, dataItems);\r\n                var bottom = label.pixelY + lh;\r\n                if (nextLabel) {\r\n                    if (nextLabel.y < bottom) {\r\n                        nextLabel.y = bottom;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    PercentSeries.prototype.arrangeLabels2 = function (dataItems) {\r\n        var previousTop = this.maxHeight / 2;\r\n        for (var i = dataItems.length - 1; i >= 0; i--) {\r\n            var dataItem = dataItems[i];\r\n            var label = dataItem.label;\r\n            if (label) {\r\n                if (label.invalid) {\r\n                    label.validate();\r\n                }\r\n                var lh = label.measuredHeight;\r\n                if (!label.visible) {\r\n                    lh = 0;\r\n                }\r\n                if (i == dataItems.length - 1) {\r\n                    previousTop += lh / 2;\r\n                }\r\n                if (label.pixelY + lh > previousTop) {\r\n                    label.y = previousTop - lh;\r\n                    previousTop = label.y;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the next label according to `index`.\r\n     *\r\n     * @param index      Current index\r\n     * @param dataItems  Data items\r\n     * @return Label element\r\n     */\r\n    PercentSeries.prototype.getNextLabel = function (index, dataItems) {\r\n        if (dataItems.length >= index) {\r\n            var nextDataItem = dataItems[index];\r\n            if (nextDataItem) {\r\n                if (nextDataItem.label) {\r\n                    if (nextDataItem.visible) {\r\n                        return nextDataItem.label;\r\n                    }\r\n                    else {\r\n                        return this.getNextLabel(index + 1, dataItems);\r\n                    }\r\n                }\r\n                else {\r\n                    return this.getNextLabel(index + 1, dataItems);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(PercentSeries.prototype, \"colors\", {\r\n        /**\r\n         * @return Color set\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"colors\");\r\n        },\r\n        /**\r\n         * A color set to be used for slices.\r\n         *\r\n         * For each new subsequent slice, the chart will assign the next color in\r\n         * this set.\r\n         *\r\n         * @param value  Color set\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"colors\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PercentSeries.prototype, \"patterns\", {\r\n        /**\r\n         * @return Pattern set\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"patterns\");\r\n        },\r\n        /**\r\n         * A [[PatternSet]] to use when creating patterned fills for slices.\r\n         *\r\n         * @since 4.7.5\r\n         * @param value  Pattern set\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"patterns\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Binds related legend data item's visual settings to this series' visual\r\n     * settings.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param marker    Container\r\n     * @param dataItem  Data item\r\n     */\r\n    PercentSeries.prototype.createLegendMarker = function (marker, dataItem) {\r\n        $iter.each(marker.children.iterator(), function (child) {\r\n            var slice = dataItem.slice;\r\n            child.defaultState.properties.fill = slice.fill;\r\n            child.defaultState.properties.stroke = slice.stroke;\r\n            child.defaultState.properties.fillOpacity = slice.fillOpacity;\r\n            child.defaultState.properties.strokeOpacity = slice.strokeOpacity;\r\n            child.fill = slice.fill;\r\n            child.stroke = slice.stroke;\r\n            child.fillOpacity = slice.fillOpacity;\r\n            child.strokeOpacity = slice.strokeOpacity;\r\n            if (child.fill == undefined) {\r\n                child.__disabled = true;\r\n            }\r\n            var legendDataItem = marker.dataItem;\r\n            legendDataItem.color = slice.fill;\r\n            legendDataItem.colorOrig = slice.fill;\r\n            child.addDisposer(slice.events.on(\"propertychanged\", function (ev) {\r\n                if (ev.property == \"fill\") {\r\n                    child.__disabled = false;\r\n                    if (!child.isActive) {\r\n                        child.fill = slice.fill;\r\n                    }\r\n                    child.defaultState.properties.fill = slice.fill;\r\n                    legendDataItem.color = slice.fill;\r\n                    legendDataItem.colorOrig = slice.fill;\r\n                }\r\n                if (ev.property == \"stroke\") {\r\n                    if (!child.isActive) {\r\n                        child.stroke = slice.stroke;\r\n                    }\r\n                    child.defaultState.properties.stroke = slice.stroke;\r\n                }\r\n            }, undefined, false));\r\n        });\r\n    };\r\n    /**\r\n     * Repositions bullets when slice's size changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Event\r\n     */\r\n    PercentSeries.prototype.handleSliceScale = function (event) {\r\n        var _this = this;\r\n        var slice = event.target;\r\n        var dataItem = slice.dataItem;\r\n        $iter.each(dataItem.bullets.iterator(), function (a) {\r\n            var value = a[1];\r\n            _this.positionBullet(value);\r\n        });\r\n    };\r\n    /**\r\n     * Repositions bullet and labels when slice moves.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Event\r\n     */\r\n    PercentSeries.prototype.handleSliceMove = function (event) {\r\n    };\r\n    /**\r\n     * Copies all properties from another instance of [[PercentSeries]].\r\n     *\r\n     * @param source  Source series\r\n     */\r\n    PercentSeries.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.slices.template.copyFrom(source.slices.template);\r\n        this.labels.template.copyFrom(source.labels.template);\r\n        this.ticks.template.copyFrom(source.ticks.template);\r\n        this.colors = source.colors.clone();\r\n    };\r\n    Object.defineProperty(PercentSeries.prototype, \"alignLabels\", {\r\n        /**\r\n         * @return Align labels?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"alignLabels\");\r\n        },\r\n        /**\r\n         * Align labels into nice vertical columns?\r\n         *\r\n         * This will ensure that labels never overlap with each other.\r\n         *\r\n         * Arranging labels into columns makes them more readble, and better user\r\n         * experience.\r\n         *\r\n         * If set to `false` labels will be positioned at `label.radius` distance,\r\n         * and may, in some cases, overlap.\r\n         *\r\n         * @default true\r\n         * @param value  Align labels?\r\n         */\r\n        set: function (value) {\r\n            this.setAlignLabels(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    PercentSeries.prototype.setAlignLabels = function (value) {\r\n        this.setPropertyValue(\"alignLabels\", value, true);\r\n    };\r\n    Object.defineProperty(PercentSeries.prototype, \"ignoreZeroValues\", {\r\n        /**\r\n         * @return Ignore zero values\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"ignoreZeroValues\");\r\n        },\r\n        /**\r\n         * If set to `true` the chart will not show slices with zero values.\r\n         *\r\n         * @default false\r\n         * @since 4.7.9\r\n         * @param  value  Ignore zero values\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"ignoreZeroValues\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates corresponding legend data item with current values.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    PercentSeries.prototype.updateLegendValue = function (dataItem) {\r\n        if (dataItem) {\r\n            var legendDataItem = dataItem.legendDataItem;\r\n            var legendSettings = dataItem.legendSettings;\r\n            if (legendDataItem && legendSettings) {\r\n                if (legendSettings) {\r\n                    if (legendSettings.labelText) {\r\n                        legendDataItem.label.text = legendSettings.labelText;\r\n                    }\r\n                    if (legendSettings.itemLabelText) {\r\n                        legendDataItem.label.text = legendSettings.itemLabelText;\r\n                    }\r\n                    if (legendSettings.valueText) {\r\n                        legendDataItem.valueLabel.text = legendSettings.valueText;\r\n                    }\r\n                    if (legendSettings.itemValueText) {\r\n                        legendDataItem.valueLabel.text = legendSettings.itemValueText;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return PercentSeries;\r\n}(Series));\r\nexport { PercentSeries };\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PercentSeries\"] = PercentSeries;\r\nregistry.registeredClasses[\"PercentSeriesDataItem\"] = PercentSeriesDataItem;\r\n/**\r\n * Add default responsive rules\r\n */\r\n/**\r\n * Disable labels and ticks.\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.maybeXS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof PercentSeries) {\r\n            var state = target.states.create(stateId);\r\n            var labelState = target.labels.template.states.create(stateId);\r\n            labelState.properties.disabled = true;\r\n            var tickState = target.ticks.template.states.create(stateId);\r\n            tickState.properties.disabled = true;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n//# sourceMappingURL=PercentSeries.js.map","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo: sequenced?\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PictorialStackedSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(PictorialStackedSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PictorialStackedSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PictorialStackedSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PictorialStackedSeriesDataItem;\r\n}(PyramidSeriesDataItem));\r\nexport { PictorialStackedSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nvar PictorialStackedSeries = /** @class */ (function (_super) {\r\n    __extends(PictorialStackedSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PictorialStackedSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PictorialStackedSeries\";\r\n        _this.topWidth = percent(100);\r\n        _this.bottomWidth = percent(100);\r\n        _this.valueIs = \"height\";\r\n        _this.applyTheme();\r\n        _this.startLocation = 0;\r\n        _this.endLocation = 1;\r\n        _this.align = \"center\";\r\n        _this.valign = \"middle\";\r\n        _this._maskSprite = _this.slicesContainer.createChild(Sprite);\r\n        _this._maskSprite.visible = false;\r\n        _this._maskSprite.zIndex = 100;\r\n        _this._maskSprite.shouldClone = false;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sizes the mask to fit the series.\r\n     *\r\n     * @ignore\r\n     */\r\n    PictorialStackedSeries.prototype.validateDataElements = function () {\r\n        var maxWidth = this.slicesContainer.maxWidth;\r\n        var maxHeight = this.slicesContainer.maxHeight;\r\n        var maskSprite = this._maskSprite;\r\n        //maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n        var pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n        var pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n        var scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n        if (scale == Infinity) {\r\n            scale = 1; // can't return here, won't draw legend properly\r\n        }\r\n        scale = $math.max(0.001, scale);\r\n        var startLocation = this.startLocation;\r\n        var endLocation = this.endLocation;\r\n        var newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n        var newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n        maskSprite.scale = scale;\r\n        if (this.orientation == \"vertical\") {\r\n            this.topWidth = newWidth + 4;\r\n            this.bottomWidth = newWidth + 4;\r\n            this.pyramidHeight = newHeight * (endLocation - startLocation);\r\n            maskSprite.x = maxWidth / 2;\r\n            maskSprite.y = newHeight / 2;\r\n        }\r\n        else {\r\n            this.topWidth = newHeight + 4;\r\n            this.bottomWidth = newHeight + 4;\r\n            this.pyramidHeight = newWidth * (endLocation - startLocation);\r\n            maskSprite.valign = \"middle\";\r\n            maskSprite.x = newWidth / 2;\r\n            maskSprite.y = maxHeight / 2;\r\n        }\r\n        maskSprite.verticalCenter = \"middle\";\r\n        maskSprite.horizontalCenter = \"middle\";\r\n        _super.prototype.validateDataElements.call(this);\r\n        var y;\r\n        var x;\r\n        if (this.orientation == \"vertical\") {\r\n            if (this.valign == \"bottom\") {\r\n                y = (maxHeight - newHeight);\r\n            }\r\n            if (this.valign == \"middle\") {\r\n                y = (maxHeight - newHeight) / 2;\r\n            }\r\n            if (this.valign == \"top\") {\r\n                y = 0;\r\n            }\r\n            if (this.align == \"left\") {\r\n                x = -(maxWidth - newWidth) / 2;\r\n            }\r\n            if (this.align == \"center\") {\r\n                x = 0;\r\n            }\r\n            if (this.align == \"right\") {\r\n                x = (maxWidth - newWidth) / 2;\r\n            }\r\n            this.slices.template.dy = startLocation * newHeight;\r\n            if (this.alignLabels) {\r\n                this.slicesContainer.dx = x;\r\n            }\r\n        }\r\n        else {\r\n            if (this.valign == \"bottom\") {\r\n                y = (maxHeight - newHeight) / 2;\r\n            }\r\n            if (this.valign == \"middle\") {\r\n                y = 0;\r\n            }\r\n            if (this.valign == \"top\") {\r\n                y = -(maxHeight - newHeight) / 2;\r\n            }\r\n            if (this.align == \"left\") {\r\n                x = 0;\r\n            }\r\n            if (this.align == \"center\") {\r\n                x = (maxWidth - newWidth) / 2;\r\n            }\r\n            if (this.align == \"right\") {\r\n                x = (maxWidth - newWidth);\r\n            }\r\n            this.slices.template.dx = startLocation * newWidth;\r\n            if (this.alignLabels) {\r\n                this.slicesContainer.dy = y;\r\n            }\r\n        }\r\n        this.slicesContainer.x = x;\r\n        this.labelsContainer.x = x;\r\n        this.ticksContainer.x = x;\r\n        this.slicesContainer.y = y;\r\n        this.labelsContainer.y = y;\r\n        this.ticksContainer.y = y;\r\n        if (newWidth > 0 && newHeight > 0) {\r\n            this.slicesContainer.mask = maskSprite;\r\n        }\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    PictorialStackedSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Pyramid Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    PictorialStackedSeries.prototype.createDataItem = function () {\r\n        return new PictorialStackedSeriesDataItem();\r\n    };\r\n    Object.defineProperty(PictorialStackedSeries.prototype, \"maskSprite\", {\r\n        /**\r\n         * A [[Sprite]] element that is used as a series mask.\r\n         *\r\n         * If set, this element's shape will be used to apply shape to the whole\r\n         * stacked pictorial series.\r\n         *\r\n         * You can use this element's `path` property to set an SVG path for the\r\n         * shape:\r\n         *\r\n         * ```TypeScript\r\n         * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n         * // ...\r\n         * series.maskSprite.path = iconPath;\r\n         * ```\r\n         * ```JavaScript\r\n         * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n         * // ...\r\n         * series.maskSprite.path = iconPath;\r\n         * ```\r\n         * ```JSON\r\n         * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n         * // ...\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     \"type\": \"PictorialStackedSeries\",\r\n         *     // ...\r\n         *     \"maskSprite\": {\r\n         *       \"path\": iconPath\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @return Mask sprite\r\n         */\r\n        get: function () {\r\n            return this._maskSprite;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Inits FunnelSlice.\r\n     *\r\n     * @param slice to init\r\n     */\r\n    PictorialStackedSeries.prototype.initSlice = function (slice) {\r\n        _super.prototype.initSlice.call(this, slice);\r\n        var hs = slice.states.getKey(\"hover\");\r\n        if (hs) {\r\n            hs.properties.expandDistance = 0;\r\n        }\r\n    };\r\n    Object.defineProperty(PictorialStackedSeries.prototype, \"startLocation\", {\r\n        /**\r\n         * @return  Start location\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startLocation\");\r\n        },\r\n        /**\r\n         * Relative location to start series from.\r\n         *\r\n         * Range of values: 0 to 1.\r\n         *\r\n         * This setting indicates where actual slices will start relatively to the\r\n         * whole height/width of the series.\r\n         *\r\n         * For example, if we want slices to start at 30% from the top/left of the\r\n         * series, we can set `startLocation = 0.3`.\r\n         *\r\n         * To fill shape outside of the location range, use background of the\r\n         * property `slicesContainer`.\r\n         *\r\n         * ```TypeScript\r\n         * series.startLocation = 0.2;\r\n         * series.endLocation = 0.8;\r\n         * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n         * ```\r\n         * ```JavaScript\r\n         * series.startLocation = 0.2;\r\n         * series.endLocation = 0.8;\r\n         * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     // ...\r\n         *     \"startLocation\": 0.2,\r\n         *     \"endLocation\": 0.8,\r\n         *     \"slicesContainer\": {\r\n         *       \"background\": {\r\n         *         \"fill\": \"#eee\"\r\n         *       }\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @default 0\r\n         * @since 4.1.13\r\n         * @param  value  Start location\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startLocation\", value)) {\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PictorialStackedSeries.prototype, \"endLocation\", {\r\n        /**\r\n         * @return End location\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endLocation\");\r\n        },\r\n        /**\r\n         * Relative location to end series at.\r\n         *\r\n         * Range of values: 0 to 1.\r\n         *\r\n         * This setting indicates where actual slices will end relatively to the\r\n         * whole height/width of the series.\r\n         *\r\n         * For example, if we want slices to end at 70% from the top/left of the\r\n         * series, we can set `endLocation = 0.7`.\r\n         *\r\n         * To fill shape outside of the location range, use background of the\r\n         * property `slicesContainer`.\r\n         *\r\n         * ```TypeScript\r\n         * series.startLocation = 0.2;\r\n         * series.endLocation = 0.8;\r\n         * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n         * ```\r\n         * ```JavaScript\r\n         * series.startLocation = 0.2;\r\n         * series.endLocation = 0.8;\r\n         * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     // ...\r\n         *     \"startLocation\": 0.2,\r\n         *     \"endLocation\": 0.8,\r\n         *     \"slicesContainer\": {\r\n         *       \"background\": {\r\n         *         \"fill\": \"#eee\"\r\n         *       }\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @default 1\r\n         * @since 4.1.13\r\n         * @param  value  End location\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endLocation\", value)) {\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PictorialStackedSeries;\r\n}(PyramidSeries));\r\nexport { PictorialStackedSeries };\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n//# sourceMappingURL=PictorialStackedSeries.js.map","/**\r\n * Defines Pie Chart Series.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\n//import { Slice3D } from \"../../core/elements/3D/Slice3D\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo: sequenced?\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PieSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(PieSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PieSeriesDataItem\";\r\n        _this.values.radiusValue = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(PieSeriesDataItem.prototype, \"radiusValue\", {\r\n        /**\r\n         * @return Radius\r\n         */\r\n        get: function () {\r\n            return this.values.radiusValue.value;\r\n        },\r\n        /**\r\n         * Slice's radius, if other than default.\r\n         *\r\n         * @param value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"radiusValue\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Hide the data item (and corresponding visual elements).\r\n     *\r\n     * @param duration  Duration (ms)\r\n     * @param delay     Delay hiding (ms)\r\n     * @param toValue   Target value for animation\r\n     * @param fields    Fields to animate while hiding\r\n     */\r\n    PieSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\r\n        return _super.prototype.hide.call(this, duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n    };\r\n    /**\r\n     * Show hidden data item (and corresponding visual elements).\r\n     *\r\n     * @param duration  Duration (ms)\r\n     * @param delay     Delay hiding (ms)\r\n     * @param fields    Fields to animate while hiding\r\n     */\r\n    PieSeriesDataItem.prototype.show = function (duration, delay, fields) {\r\n        return _super.prototype.show.call(this, duration, delay, [\"value\", \"radiusValue\"]);\r\n    };\r\n    return PieSeriesDataItem;\r\n}(PercentSeriesDataItem));\r\nexport { PieSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar PieSeries = /** @class */ (function (_super) {\r\n    __extends(PieSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PieSeries\";\r\n        _this.alignLabels = true;\r\n        //this.startAngle = -90;\r\n        //this.endAngle = 270;\r\n        _this.layout = \"none\";\r\n        _this.labels.template.radius = percent(5);\r\n        _this.addDisposer(_this.labels.template.events.on(\"enabled\", _this.invalidate, _this, false));\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * creates slice\r\n     */\r\n    PieSeries.prototype.createSlice = function () {\r\n        return new Slice();\r\n    };\r\n    /**\r\n     * creates tick\r\n     */\r\n    PieSeries.prototype.createTick = function () {\r\n        return new PieTick();\r\n    };\r\n    /**\r\n     * creates label\r\n     */\r\n    PieSeries.prototype.createLabel = function () {\r\n        return new AxisLabelCircular();\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    PieSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    PieSeries.prototype.createDataItem = function () {\r\n        return new PieSeriesDataItem();\r\n    };\r\n    /**\r\n     * Inits slice.\r\n     *\r\n     * @param slice to init\r\n     */\r\n    PieSeries.prototype.initSlice = function (slice) {\r\n        slice.isMeasured = false;\r\n        slice.defaultState.properties.scale = 1;\r\n        slice.observe(\"scale\", this.handleSliceScale, this);\r\n        slice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n        slice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n        var hoverState = slice.states.create(\"hover\");\r\n        hoverState.properties.scale = 1.05;\r\n        var defaultState = slice.defaultState;\r\n        defaultState.properties.shiftRadius = 0;\r\n        slice.togglable = true;\r\n        slice.events.on(\"toggled\", function (event) {\r\n            event.target.hideTooltip();\r\n        });\r\n        var activeState = slice.states.create(\"active\");\r\n        activeState.properties.shiftRadius = 0.10;\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PieSeries.prototype.validate = function () {\r\n        this._leftItems = [];\r\n        this._rightItems = [];\r\n        this._currentStartAngle = this.startAngle;\r\n        this._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n        this._maxRadiusPercent = 0;\r\n        for (var i = this.startIndex; i < this.endIndex; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            var radiusValuePercent = dataItem.values.radiusValue.percent;\r\n            if (radiusValuePercent > this._maxRadiusPercent) {\r\n                this._maxRadiusPercent = radiusValuePercent;\r\n            }\r\n        }\r\n        _super.prototype.validate.call(this);\r\n        if (this.alignLabels) {\r\n            if (this.startAngle > this.endAngle) {\r\n                this._rightItems.reverse();\r\n            }\r\n            else {\r\n                this._leftItems.reverse();\r\n            }\r\n            this._rightItems.sort(function (a, b) {\r\n                var aAngle = (a.slice.middleAngle + 360) % 360;\r\n                var bAngle = (b.slice.middleAngle + 360) % 360;\r\n                if (aAngle > 270) {\r\n                    aAngle -= 360;\r\n                }\r\n                if (bAngle > 270) {\r\n                    bAngle -= 360;\r\n                }\r\n                if (aAngle < bAngle) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            });\r\n            this._leftItems.sort(function (a, b) {\r\n                var aAngle = (a.slice.middleAngle + 360) % 360;\r\n                var bAngle = (b.slice.middleAngle + 360) % 360;\r\n                if (aAngle < bAngle) {\r\n                    return 1;\r\n                }\r\n                else {\r\n                    return -1;\r\n                }\r\n            });\r\n            this.arrangeLabels(this._rightItems);\r\n            this.arrangeLabels2(this._rightItems);\r\n            this.arrangeLabels(this._leftItems);\r\n            this.arrangeLabels2(this._leftItems);\r\n        }\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    PieSeries.prototype.validateDataElement = function (dataItem) {\r\n        if (this.pixelRadius > 0) {\r\n            if (this.ignoreZeroValues && dataItem.value == 0) {\r\n                dataItem.__disabled = true;\r\n            }\r\n            else {\r\n                dataItem.__disabled = false;\r\n            }\r\n            // SLICE\r\n            var slice = dataItem.slice;\r\n            slice.radius = this.pixelRadius;\r\n            if ($type.isNumber(dataItem.radiusValue)) {\r\n                slice.radius = this.pixelInnerRadius + (this.pixelRadius - this.pixelInnerRadius) * dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n            }\r\n            if (!(slice.innerRadius instanceof Percent)) {\r\n                slice.innerRadius = this.pixelInnerRadius;\r\n            }\r\n            slice.startAngle = this._currentStartAngle;\r\n            slice.arc = Math.abs(dataItem.values.value.percent) * (this.endAngle - this.startAngle) / 100;\r\n            // LABEL\r\n            if (!this.labels.template.disabled) {\r\n                var label = dataItem.label;\r\n                var tick = dataItem.tick;\r\n                tick.slice = slice;\r\n                tick.label = label;\r\n                var normalizedMiddleAngle = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n                var point = void 0;\r\n                if (this.alignLabels) {\r\n                    var labelRadius = label.pixelRadius(slice.radius);\r\n                    var x = tick.length + labelRadius;\r\n                    label.dx = 0;\r\n                    label.dy = 0;\r\n                    label.verticalCenter = \"middle\";\r\n                    var arcRect = this._arcRect;\r\n                    // right half\r\n                    if (normalizedMiddleAngle > 270 || normalizedMiddleAngle <= 90) {\r\n                        x += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n                        label.horizontalCenter = \"left\";\r\n                        this._rightItems.push(dataItem);\r\n                    }\r\n                    // left half\r\n                    else {\r\n                        x -= arcRect.x * this.pixelRadius;\r\n                        label.horizontalCenter = \"right\";\r\n                        this._leftItems.push(dataItem);\r\n                        x *= -1;\r\n                    }\r\n                    var distance = slice.radius + tick.length + labelRadius;\r\n                    point = { x: x, y: slice.iy * distance };\r\n                    label.moveTo(point);\r\n                }\r\n                else {\r\n                    var depth = slice[\"depth\"];\r\n                    if (!$type.isNumber(depth)) {\r\n                        depth = 0;\r\n                    }\r\n                    label.fixPosition(slice.middleAngle, slice.radius, slice.radiusY, 0, -depth);\r\n                }\r\n            }\r\n            this._currentStartAngle += slice.arc;\r\n            // do this at the end, otherwise bullets won't be positioned properly\r\n            _super.prototype.validateDataElement.call(this, dataItem);\r\n        }\r\n    };\r\n    Object.defineProperty(PieSeries.prototype, \"radius\", {\r\n        /**\r\n         * @return Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius for the series' slices in pixels or [[Percent]].\r\n         *\r\n         * @param value  Radius\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieSeries.prototype, \"pixelRadius\", {\r\n        /**\r\n         * @return Radius\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._pixelRadius;\r\n        },\r\n        /**\r\n         * @ignore\r\n         */\r\n        set: function (value) {\r\n            if (this._pixelRadius != value) {\r\n                this._pixelRadius = value;\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieSeries.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * @return Pixel inner radius\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._pixelInnerRadius;\r\n        },\r\n        /**\r\n         * @ignore\r\n         */\r\n        set: function (value) {\r\n            if (this._pixelInnerRadius != value) {\r\n                this._pixelInnerRadius = value;\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieSeries.prototype, \"innerRadius\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius for the series' slices in pixels.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Redo so that users can set it\r\n         * @param value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieSeries.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Angle\r\n         */\r\n        get: function () {\r\n            var startAngle = this.getPropertyValue(\"startAngle\");\r\n            if ($type.isNumber(startAngle)) {\r\n                return startAngle;\r\n            }\r\n            else {\r\n                return this._startAngleInternal;\r\n            }\r\n        },\r\n        /**\r\n         * Start angle for the series' slices in degrees. (0-360)\r\n         *\r\n         * @param value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieSeries.prototype, \"endAngle\", {\r\n        /**\r\n         * @return Angle\r\n         */\r\n        get: function () {\r\n            var endAngle = this.getPropertyValue(\"endAngle\");\r\n            if ($type.isNumber(endAngle)) {\r\n                return endAngle;\r\n            }\r\n            else {\r\n                return this._endAngleInternal;\r\n            }\r\n        },\r\n        /**\r\n         * End angle for the series' slices in degrees. (0-360)\r\n         *\r\n         * @param value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Positions series bullet.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param bullet  Bullet\r\n     */\r\n    PieSeries.prototype.positionBullet = function (bullet) {\r\n        _super.prototype.positionBullet.call(this, bullet);\r\n        var dataItem = bullet.dataItem;\r\n        var slice = dataItem.slice;\r\n        var locationX = bullet.locationX;\r\n        if (!$type.isNumber(locationX)) {\r\n            locationX = 0.5;\r\n        }\r\n        var locationY = bullet.locationY;\r\n        if (!$type.isNumber(locationY)) {\r\n            locationY = 1;\r\n        }\r\n        var angle = slice.startAngle + slice.arc * locationX;\r\n        bullet.x = locationY * slice.radius * $math.cos(angle);\r\n        bullet.y = locationY * slice.radiusY * $math.sin(angle);\r\n    };\r\n    /**\r\n     * Repositions bullet and labels when slice moves.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Event\r\n     */\r\n    PieSeries.prototype.handleSliceMove = function (event) {\r\n        if (!this.alignLabels) {\r\n            var slice = event.target;\r\n            var dataItem = slice.dataItem;\r\n            // moving textelement, as label dx and dy are already employed for aligning\r\n            //@labeltodo\r\n            if (dataItem) {\r\n                var label = dataItem.label;\r\n                if (label) {\r\n                    label.dx = label.fdx + slice.dx + slice.pixelX;\r\n                    label.dy = label.fdy + slice.dy + slice.pixelY;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(PieSeries.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        get: function () {\r\n            if (this.definedBBox) {\r\n                return this.definedBBox;\r\n            }\r\n            var chart = this.chart;\r\n            if (chart) {\r\n                return $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n            }\r\n            return $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PieSeries;\r\n}(PercentSeries));\r\nexport { PieSeries };\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n//# sourceMappingURL=PieSeries.js.map","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PieSeries3DDataItem = /** @class */ (function (_super) {\r\n    __extends(PieSeries3DDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieSeries3DDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PieSeries3DDataItem\";\r\n        _this.values.depthValue = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(PieSeries3DDataItem.prototype, \"depthValue\", {\r\n        /**\r\n         * @return Depth\r\n         */\r\n        get: function () {\r\n            return this.values[\"depthValue\"].value;\r\n        },\r\n        /**\r\n         * Slice depth (height).\r\n         *\r\n         * @param value  Depth\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"depthValue\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PieSeries3DDataItem;\r\n}(PieSeriesDataItem));\r\nexport { PieSeries3DDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar PieSeries3D = /** @class */ (function (_super) {\r\n    __extends(PieSeries3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieSeries3D() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PieSeries3D\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    PieSeries3D.prototype.createDataItem = function () {\r\n        return new PieSeries3DDataItem();\r\n    };\r\n    /**\r\n     * creates slice\r\n     */\r\n    PieSeries3D.prototype.createSlice = function () {\r\n        return new Slice3D();\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    PieSeries3D.prototype.validateDataElement = function (dataItem) {\r\n        var slice = dataItem.slice;\r\n        var depth = this.depth;\r\n        if (!$type.isNumber(depth)) {\r\n            depth = this.chart.depth;\r\n        }\r\n        var depthPercent = dataItem.values.depthValue.percent;\r\n        if (!$type.isNumber(depthPercent)) {\r\n            depthPercent = 100;\r\n        }\r\n        slice.depth = depthPercent * depth / 100;\r\n        var angle = this.angle;\r\n        if (!$type.isNumber(angle)) {\r\n            angle = this.chart.angle;\r\n        }\r\n        slice.angle = angle;\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PieSeries3D.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        for (var i = this._workingStartIndex; i < this._workingEndIndex; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            var slice = dataItem.slice;\r\n            var startAngle = slice.startAngle;\r\n            // find quarter\r\n            //q0 || q1\r\n            if ((startAngle >= -90 && startAngle < 90)) {\r\n                slice.toFront();\r\n            }\r\n            //q2 || q3\r\n            else if ((startAngle >= 90)) {\r\n                slice.toBack();\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(PieSeries3D.prototype, \"depth\", {\r\n        /**\r\n         * @return Depth (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"depth\");\r\n        },\r\n        /**\r\n         * Depth (height) of the pie slice in pixels.\r\n         *\r\n         * @param value  Depth (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"depth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieSeries3D.prototype, \"angle\", {\r\n        /**\r\n         * @return Angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"angle\");\r\n        },\r\n        /**\r\n         * Angle of the view point of the 3D pie. (0-360)\r\n         *\r\n         * @param value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"angle\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Positions series bullet.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param bullet  Bullet\r\n     */\r\n    PieSeries3D.prototype.positionBullet = function (bullet) {\r\n        _super.prototype.positionBullet.call(this, bullet);\r\n        var dataItem = bullet.dataItem;\r\n        var slice = dataItem.slice;\r\n        bullet.y = bullet.pixelY - slice.depth;\r\n    };\r\n    return PieSeries3D;\r\n}(PieSeries));\r\nexport { PieSeries3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n//# sourceMappingURL=PieSeries3D.js.map","/**\r\n * Defines Pyramid Series.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo: sequenced?\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PyramidSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(PyramidSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PyramidSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PyramidSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PyramidSeriesDataItem;\r\n}(FunnelSeriesDataItem));\r\nexport { PyramidSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nvar PyramidSeries = /** @class */ (function (_super) {\r\n    __extends(PyramidSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PyramidSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PyramidSeries\";\r\n        _this.topWidth = percent(0);\r\n        _this.bottomWidth = percent(100);\r\n        _this.pyramidHeight = percent(100);\r\n        _this.valueIs = \"area\";\r\n        _this.sliceLinks.template.width = 0;\r\n        _this.sliceLinks.template.height = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    PyramidSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Pyramid Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    PyramidSeries.prototype.createDataItem = function () {\r\n        return new PyramidSeriesDataItem();\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PyramidSeries.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        this._nextWidth = undefined;\r\n    };\r\n    /**\r\n     * [getNextValue description]\r\n     *\r\n     * @todo Description\r\n     * @param dataItem [description]\r\n     * @return [description]\r\n     */\r\n    PyramidSeries.prototype.getNextValue = function (dataItem) {\r\n        var index = dataItem.index;\r\n        var nextValue = dataItem.getWorkingValue(\"value\");\r\n        if (index < this.dataItems.length - 1) {\r\n            var nextItem = this.dataItems.getIndex(index + 1);\r\n            nextValue = nextItem.getWorkingValue(\"value\");\r\n        }\r\n        if (nextValue == 0) {\r\n            nextValue = 0.000001;\r\n        }\r\n        return nextValue;\r\n    };\r\n    /**\r\n     * [validateDataElements description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    PyramidSeries.prototype.validateDataElements = function () {\r\n        var _this = this;\r\n        var maxWidth = this.slicesContainer.innerWidth;\r\n        var maxHeight = this.slicesContainer.innerHeight;\r\n        this.dataItems.each(function (dataItem) {\r\n            if (dataItem.value > 0) {\r\n                var relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n                var sliceLink = dataItem.sliceLink;\r\n                if (_this.orientation == \"vertical\") {\r\n                    maxHeight -= (sliceLink.pixelHeight * relValue);\r\n                }\r\n                else {\r\n                    maxWidth -= (sliceLink.pixelWidth * relValue);\r\n                }\r\n            }\r\n        });\r\n        this._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n        this._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n        if (this.orientation == \"vertical\") {\r\n            var y = (maxHeight - this._pyramidHeight) / 2;\r\n            this.slicesContainer.y = y;\r\n            this.labelsContainer.y = y;\r\n            this.ticksContainer.y = y;\r\n        }\r\n        else {\r\n            var x = (maxWidth - this._pyramidWidth) / 2;\r\n            this.slicesContainer.x = x;\r\n            this.labelsContainer.x = x;\r\n            this.ticksContainer.x = x;\r\n        }\r\n        _super.prototype.validateDataElements.call(this);\r\n    };\r\n    /**\r\n     * [decorateSlice description]\r\n     *\r\n     * @todo Description\r\n     * @param dataItem [description]\r\n     */\r\n    PyramidSeries.prototype.decorateSlice = function (dataItem) {\r\n        var sum = this.dataItem.values.value.absoluteSum;\r\n        if (sum == 0) {\r\n            return;\r\n        }\r\n        var slice = dataItem.slice;\r\n        var sliceLink = dataItem.sliceLink;\r\n        var label = dataItem.label;\r\n        var tick = dataItem.tick;\r\n        // TODO can this be removed ?\r\n        this.getNextValue(dataItem);\r\n        var workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n        var pyramidWidth = this._pyramidWidth;\r\n        var pyramidHeight = this._pyramidHeight;\r\n        var maxWidth = this.slicesContainer.innerWidth;\r\n        var maxHeight = this.slicesContainer.innerHeight;\r\n        var linkWidth = sliceLink.pixelWidth;\r\n        var linkHeight = sliceLink.pixelHeight;\r\n        if (dataItem.value == 0 && this.ignoreZeroValues) {\r\n            dataItem.__disabled = true;\r\n        }\r\n        else {\r\n            dataItem.__disabled = false;\r\n        }\r\n        if (this.orientation == \"vertical\") {\r\n            var topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n            if (!$type.isNumber(this._nextWidth)) {\r\n                this._nextWidth = topWidth;\r\n            }\r\n            var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n            var sliceTopWidth = this._nextWidth;\r\n            var angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n            var c = Math.tan(Math.PI / 2 - angle);\r\n            if (c == 0) {\r\n                c = 0.00000001;\r\n            }\r\n            var sliceHeight = void 0;\r\n            var sliceBottomWidth = void 0;\r\n            if (this.valueIs == \"area\") {\r\n                var totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n                var square = totalSquare * workingValue / sum;\r\n                var s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n                sliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n                if (sliceHeight > 0) {\r\n                    sliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n                }\r\n                else {\r\n                    sliceBottomWidth = sliceTopWidth;\r\n                }\r\n            }\r\n            else {\r\n                sliceHeight = pyramidHeight * workingValue / sum;\r\n                sliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n            }\r\n            slice.height = sliceHeight;\r\n            slice.width = maxWidth;\r\n            slice.bottomWidth = sliceBottomWidth;\r\n            slice.topWidth = sliceTopWidth;\r\n            sliceLink.topWidth = slice.bottomWidth;\r\n            sliceLink.bottomWidth = slice.bottomWidth;\r\n            slice.y = this._nextY;\r\n            //slice.x = maxWidth / 2;\r\n            if (!this.alignLabels) {\r\n                label.x = maxWidth / 2;\r\n            }\r\n            else {\r\n                label.x = 0;\r\n            }\r\n            label.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n            this._nextY += slice.pixelHeight + linkHeight * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n            sliceLink.y = this._nextY - linkHeight;\r\n            sliceLink.x = maxWidth / 2;\r\n        }\r\n        else {\r\n            var topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n            if (!$type.isNumber(this._nextWidth)) {\r\n                this._nextWidth = topWidth;\r\n            }\r\n            var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n            var sliceTopWidth = this._nextWidth;\r\n            var angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n            var c = Math.tan(Math.PI / 2 - angle);\r\n            if (c == 0) {\r\n                c = 0.00000001;\r\n            }\r\n            var sliceWidth = void 0;\r\n            var sliceBottomWidth = void 0;\r\n            if (this.valueIs == \"area\") {\r\n                var totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n                var square = totalSquare * workingValue / sum;\r\n                sliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n                sliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n            }\r\n            else {\r\n                sliceWidth = pyramidWidth * workingValue / sum;\r\n                sliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n            }\r\n            slice.width = sliceWidth;\r\n            slice.height = maxHeight;\r\n            slice.bottomWidth = sliceBottomWidth;\r\n            slice.topWidth = sliceTopWidth;\r\n            sliceLink.topWidth = slice.bottomWidth;\r\n            sliceLink.bottomWidth = slice.bottomWidth;\r\n            slice.x = this._nextY;\r\n            if (!this.alignLabels) {\r\n                label.y = maxHeight / 2;\r\n            }\r\n            else {\r\n                label.y = this.labelsContainer.measuredHeight;\r\n            }\r\n            label.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n            this._nextY += slice.pixelWidth + linkWidth * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n            sliceLink.x = this._nextY - linkWidth;\r\n            sliceLink.y = maxHeight / 2;\r\n        }\r\n        this._nextWidth = slice.bottomWidth;\r\n    };\r\n    Object.defineProperty(PyramidSeries.prototype, \"topWidth\", {\r\n        /**\r\n         * @return {number | Percent}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"topWidth\");\r\n        },\r\n        /**\r\n         * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n         *\r\n         * `0%` (default) means the pyramid will be perfectly pointy.\r\n         * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n         * `100%` will take the whole width of the chart.\r\n         *\r\n         * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n         * `100%` and `bottomWidth` to `0%`.\r\n         *\r\n         * @default 0%\r\n         * @param {number | Percent}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PyramidSeries.prototype, \"pyramidHeight\", {\r\n        /**\r\n         * @return {number | Percent}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pyramidHeight\");\r\n        },\r\n        /**\r\n         * Height of pyramid\r\n         *\r\n         *\r\n         * @default 100%\r\n         * @param {number | Percent}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PyramidSeries.prototype, \"bottomWidth\", {\r\n        /**\r\n         * @return {number | Percent}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"bottomWidth\");\r\n        },\r\n        /**\r\n         * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n         *\r\n         * `0%` means the pyramid's botto will be pointy.\r\n         * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n         * `100%` (default) will take the whole width of the chart.\r\n         *\r\n         * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n         * `100%` and `bottomWidth` to `0%`.\r\n         *\r\n         * @param {number | Percent}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PyramidSeries.prototype, \"valueIs\", {\r\n        /**\r\n         * @return {\"area\" | \"height\"}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"valueIs\");\r\n        },\r\n        /**\r\n         * Indicates how slice's value will influence its size.\r\n         *\r\n         * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n         * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n         * slices based on their value.\r\n         *\r\n         * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n         * will represent their value relatively to values of the other slices.\r\n         *\r\n         * This is a correct way to depict \"weight\" of each slice based on their\r\n         * values.\r\n         *\r\n         * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n         * divvied up between slices. Actual slice width or area is not counted in.\r\n         *\r\n         * From the data-viz standpoint this does not make a lot of sense, since\r\n         * slices with lesser values might appear more prominent if they are placed\r\n         * towards thick end of the pyramid since their areas will be bigger.\r\n         *\r\n         * @default \"area\"\r\n         * @param {\"area\" | \"height\"}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"valueIs\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PyramidSeries;\r\n}(FunnelSeries));\r\nexport { PyramidSeries };\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n//# sourceMappingURL=PyramidSeries.js.map","/**\r\n * Radar column series module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar RadarColumnSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(RadarColumnSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarColumnSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ColumnSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return RadarColumnSeriesDataItem;\r\n}(ColumnSeriesDataItem));\r\nexport { RadarColumnSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar RadarColumnSeries = /** @class */ (function (_super) {\r\n    __extends(RadarColumnSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarColumnSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"RadarColumnSeries\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates and returns a RadarColumn element to use as column in radar chart.\r\n     *\r\n     * @return RadarColumn.\r\n     */\r\n    RadarColumnSeries.prototype.createColumnTemplate = function () {\r\n        return new RadarColumn();\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarColumnSeries.prototype.validate = function () {\r\n        // so that radius would be updated\r\n        if (this.chart.invalid) {\r\n            this.chart.validate();\r\n        }\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    RadarColumnSeries.prototype.disableUnusedColumns = function (dataItem) {\r\n        if (dataItem) {\r\n            if (dataItem.column) {\r\n                dataItem.column.__disabled = true;\r\n            }\r\n            $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n                var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n                if (rangeColumn) {\r\n                    rangeColumn.__disabled = true;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    RadarColumnSeries.prototype.validateDataElementReal = function (dataItem) {\r\n        var _this = this;\r\n        var startAngle = this.chart.startAngle;\r\n        var endAngle = this.chart.endAngle;\r\n        var yField = this.yField;\r\n        var yOpenField = this.yOpenField;\r\n        var xField = this.xField;\r\n        var xOpenField = this.xOpenField;\r\n        var lAngle;\r\n        var rAngle;\r\n        var tRadius;\r\n        var bRadius;\r\n        var startLocation = this.getStartLocation(dataItem);\r\n        var endLocation = this.getEndLocation(dataItem);\r\n        var cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n        var radarColumn = dataItem.column;\r\n        if (!radarColumn) {\r\n            radarColumn = this.columns.create();\r\n            dataItem.column = radarColumn;\r\n            $object.copyProperties(this, radarColumn, visualProperties); // need this \r\n            $object.copyProperties(this.columns.template, radarColumn, visualProperties); // second time, no force, so that columns.template would override series properties\t\t\t\r\n            dataItem.addSprite(radarColumn);\r\n            radarColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n            this.setColumnStates(radarColumn);\r\n        }\r\n        var width = radarColumn.width;\r\n        var percentWidth = 100;\r\n        if (width instanceof Percent) {\r\n            percentWidth = width.percent;\r\n        }\r\n        var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n        startLocation += offset;\r\n        endLocation -= offset;\r\n        // two category axes\r\n        if ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n            tRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, 0, \"valueY\"), y: this.yAxis.getY(dataItem, yField, 0, \"valueY\") });\r\n            bRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, 1, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, 1, \"valueY\") });\r\n            lAngle = this.xAxis.getAngle(dataItem, xOpenField, 0, \"valueX\");\r\n            rAngle = this.xAxis.getAngle(dataItem, xField, 1, \"valueX\");\r\n            startAngle = startAngle + startLocation * cellAngle;\r\n            endAngle = endAngle - (1 - endLocation) * cellAngle;\r\n        }\r\n        else if (this.baseAxis == this.xAxis) {\r\n            tRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n            bRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n            lAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n            rAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n            startAngle = startAngle + startLocation * cellAngle;\r\n            endAngle = endAngle - (1 - endLocation) * cellAngle;\r\n        }\r\n        else {\r\n            tRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n            bRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n            lAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n            rAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n        }\r\n        if (rAngle < lAngle) {\r\n            var temp = rAngle;\r\n            rAngle = lAngle;\r\n            lAngle = temp;\r\n        }\r\n        lAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n        rAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n        var slice = radarColumn.radarColumn;\r\n        slice.startAngle = lAngle;\r\n        var arc = rAngle - lAngle;\r\n        if (arc > 0) {\r\n            slice.arc = arc;\r\n            slice.radius = tRadius;\r\n            slice.innerRadius = bRadius;\r\n            radarColumn.__disabled = false;\r\n            radarColumn.parent = this.columnsContainer;\r\n            $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n                var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n                if (!rangeColumn) {\r\n                    rangeColumn = _this.columns.create();\r\n                    $object.forceCopyProperties(_this.columns.template, rangeColumn, visualProperties);\r\n                    $object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n                    if (rangeColumn.dataItem) {\r\n                        $array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n                    }\r\n                    dataItem.addSprite(rangeColumn);\r\n                    rangeColumn.paper = _this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\r\n                    _this.setColumnStates(rangeColumn);\r\n                    dataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n                }\r\n                var slice = rangeColumn.radarColumn;\r\n                slice.startAngle = lAngle;\r\n                slice.arc = arc;\r\n                slice.radius = tRadius;\r\n                slice.innerRadius = bRadius;\r\n                if (slice.invalid) {\r\n                    slice.paper = _this.paper;\r\n                    slice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n                }\r\n                rangeColumn.__disabled = false;\r\n                rangeColumn.parent = axisRange.contents;\r\n            });\r\n        }\r\n        else {\r\n            this.disableUnusedColumns(dataItem);\r\n        }\r\n    };\r\n    /**\r\n     * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n     *\r\n     * @param    dataItem   Data item\r\n     * @param    xKey       Name of X data field\r\n     * @param    yKey       Name of Y data field\r\n     * @param    locationX  X location\r\n     * @param    locationY  Y location\r\n     * @param    stackKeyX  ?\r\n     * @param    stackKeyY  ?\r\n     * @returns             Coordinates\r\n     */\r\n    RadarColumnSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {\r\n        if (!stackKeyX) {\r\n            stackKeyX = \"valueX\";\r\n        }\r\n        if (!stackKeyY) {\r\n            stackKeyY = \"valueY\";\r\n        }\r\n        var x = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n        var y = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n        var radius = $math.getDistance({ x: x, y: y });\r\n        // hack to be able to determine angle later\r\n        if (radius == 0) {\r\n            radius = 0.00001;\r\n        }\r\n        var angle = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n        return { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n    };\r\n    /**\r\n     * Returns an SVG path to be used as a mask for the series.\r\n     *\r\n     * @return SVG path\r\n     */\r\n    RadarColumnSeries.prototype.getMaskPath = function () {\r\n        var renderer = this.yAxis.renderer;\r\n        return $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n    };\r\n    RadarColumnSeries.prototype.positionBulletReal = function (bullet, positionX, positionY) {\r\n        var xAxis = this.xAxis;\r\n        var yAxis = this.yAxis;\r\n        if (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\r\n            bullet.visible = false;\r\n        }\r\n        bullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\r\n    };\r\n    RadarColumnSeries.prototype.setXAxis = function (axis) {\r\n        _super.prototype.setXAxis.call(this, axis);\r\n        this.updateRendererRefs();\r\n    };\r\n    RadarColumnSeries.prototype.setYAxis = function (axis) {\r\n        _super.prototype.setYAxis.call(this, axis);\r\n        this.updateRendererRefs();\r\n    };\r\n    RadarColumnSeries.prototype.updateRendererRefs = function () {\r\n        var rendererX = this.xAxis.renderer;\r\n        var rendererY = this.yAxis.renderer;\r\n        rendererX.axisRendererY = rendererY;\r\n    };\r\n    return RadarColumnSeries;\r\n}(ColumnSeries));\r\nexport { RadarColumnSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n//# sourceMappingURL=RadarColumnSeries.js.map","/**\r\n * Radar series module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem } from \"./LineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n//import { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\n//import { Sprite } from \"../../core/Sprite\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar RadarSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(RadarSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"RadarSeriesDataItem\";\r\n        _this.setLocation(\"dateX\", 0, 0);\r\n        _this.setLocation(\"dateY\", 0, 0);\r\n        _this.setLocation(\"categoryX\", 0, 0);\r\n        _this.setLocation(\"categoryY\", 0, 0);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return RadarSeriesDataItem;\r\n}(LineSeriesDataItem));\r\nexport { RadarSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar RadarSeries = /** @class */ (function (_super) {\r\n    __extends(RadarSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"RadarSeries\";\r\n        _this.connectEnds = true;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarSeries.prototype.validate = function () {\r\n        // so that radius would be updated\r\n        if (this.chart.invalid) {\r\n            this.chart.validate();\r\n        }\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    RadarSeries.prototype.createDataItem = function () {\r\n        return new RadarSeriesDataItem();\r\n    };\r\n    /**\r\n     * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n     *\r\n     * @param    dataItem   Data item\r\n     * @param    xKey       Name of X data field\r\n     * @param    yKey       Name of Y data field\r\n     * @param    locationX  X location\r\n     * @param    locationY  Y location\r\n     * @param    stackKeyX  ?\r\n     * @param    stackKeyY  ?\r\n     * @returns             Coordinates\r\n     */\r\n    RadarSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {\r\n        if (!stackKeyX) {\r\n            stackKeyX = \"valueX\";\r\n        }\r\n        if (!stackKeyY) {\r\n            stackKeyY = \"valueY\";\r\n        }\r\n        var x = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n        var y = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n        var radius = $math.getDistance({ x: x, y: y });\r\n        // hack to be able to determine angle later\r\n        if (radius == 0) {\r\n            radius = 0.00001;\r\n        }\r\n        var angle = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n        var startAngle = this.chart.startAngle;\r\n        var endAngle = this.chart.endAngle;\r\n        //\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n        if (angle < startAngle || angle > endAngle) {\r\n            return undefined;\r\n        }\r\n        else {\r\n            return { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n        }\r\n    };\r\n    /**\r\n     * [addPoints description]\r\n     *\r\n     * @todo Description\r\n     * @param points    [description]\r\n     * @param dataItem  [description]\r\n     * @param xField    [description]\r\n     * @param yField    [description]\r\n     * @param backwards [description]\r\n     */\r\n    RadarSeries.prototype.addPoints = function (points, dataItem, xField, yField, backwards) {\r\n        var point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n        if (point) {\r\n            points.push(point);\r\n        }\r\n    };\r\n    /**\r\n     * Returns an SVG path to be used as a mask for the series.\r\n     *\r\n     * @return SVG path\r\n     */\r\n    RadarSeries.prototype.getMaskPath = function () {\r\n        var renderer = this.yAxis.renderer;\r\n        return $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n    };\r\n    /**\r\n     * [drawSegment description]\r\n     *\r\n     * @todo Description\r\n     * @param segment      [description]\r\n     * @param points       [description]\r\n     * @param closePoints  [description]\r\n     */\r\n    RadarSeries.prototype.drawSegment = function (segment, points, closePoints) {\r\n        var axis = this.yAxis;\r\n        var renderer = axis.renderer;\r\n        if (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n            // adds one point to the beginning of closePoints array, if needed\r\n            if (this.dataFields[this._xOpenField] ||\r\n                this.dataFields[this._yOpenField] ||\r\n                this.stacked) {\r\n                points.push(points[0]);\r\n                if (closePoints.length > 0) {\r\n                    closePoints.unshift(closePoints[closePoints.length - 1]);\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.drawSegment.call(this, segment, points, closePoints);\r\n    };\r\n    Object.defineProperty(RadarSeries.prototype, \"connectEnds\", {\r\n        /**\r\n         * @return Connect?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"connectEnds\");\r\n        },\r\n        /**\r\n         * Should the last and and first data points be connected, forming a complete\r\n         * closed circle?\r\n         *\r\n         * @default true\r\n         * @param value  Connect?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"connectEnds\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    RadarSeries.prototype.positionBulletReal = function (bullet, positionX, positionY) {\r\n        var xAxis = this.xAxis;\r\n        var yAxis = this.yAxis;\r\n        if (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\r\n            bullet.visible = false;\r\n        }\r\n        bullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\r\n    };\r\n    RadarSeries.prototype.setXAxis = function (axis) {\r\n        _super.prototype.setXAxis.call(this, axis);\r\n        this.updateRendererRefs();\r\n    };\r\n    RadarSeries.prototype.setYAxis = function (axis) {\r\n        _super.prototype.setYAxis.call(this, axis);\r\n        this.updateRendererRefs();\r\n    };\r\n    RadarSeries.prototype.updateRendererRefs = function () {\r\n        var rendererX = this.xAxis.renderer;\r\n        var rendererY = this.yAxis.renderer;\r\n        rendererX.axisRendererY = rendererY;\r\n    };\r\n    return RadarSeries;\r\n}(LineSeries));\r\nexport { RadarSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n//# sourceMappingURL=RadarSeries.js.map","/**\r\n * Step line series module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem } from \"./LineSeries\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar StepLineSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(StepLineSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function StepLineSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"StepLineSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return StepLineSeriesDataItem;\r\n}(LineSeriesDataItem));\r\nexport { StepLineSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar StepLineSeries = /** @class */ (function (_super) {\r\n    __extends(StepLineSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function StepLineSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"StepLineSeries\";\r\n        _this.applyTheme();\r\n        _this.startLocation = 0;\r\n        _this.endLocation = 1;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    StepLineSeries.prototype.createDataItem = function () {\r\n        return new StepLineSeriesDataItem();\r\n    };\r\n    /**\r\n     * [addPoints description]\r\n     *\r\n     * @todo Description\r\n     * @param points     [description]\r\n     * @param dataItem   [description]\r\n     * @param xField     [description]\r\n     * @param yField     [description]\r\n     * @param backwards  [description]\r\n     */\r\n    StepLineSeries.prototype.addPoints = function (points, dataItem, xField, yField, backwards) {\r\n        var startLocationX;\r\n        var endLocationX;\r\n        var startLocationY;\r\n        var endLocationY;\r\n        if (this.baseAxis == this.xAxis) {\r\n            startLocationX = this.startLocation;\r\n            endLocationX = this.endLocation;\r\n            startLocationY = this.getAdjustedXLocation(dataItem, this.yOpenField);\r\n            endLocationY = this.getAdjustedXLocation(dataItem, this.yField);\r\n        }\r\n        if (this.baseAxis == this.yAxis) {\r\n            startLocationY = this.startLocation;\r\n            endLocationY = this.endLocation;\r\n            startLocationX = this.getAdjustedXLocation(dataItem, this.xOpenField);\r\n            endLocationX = this.getAdjustedXLocation(dataItem, this.xField);\r\n        }\r\n        var x0 = this.xAxis.getX(dataItem, xField, startLocationX);\r\n        var y0 = this.yAxis.getY(dataItem, yField, startLocationY);\r\n        var x1 = this.xAxis.getX(dataItem, xField, endLocationX);\r\n        var y1 = this.yAxis.getY(dataItem, yField, endLocationY);\r\n        x0 = $math.fitToRange(x0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n        y0 = $math.fitToRange(y0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n        x1 = $math.fitToRange(x1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n        y1 = $math.fitToRange(y1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n        // this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n        if (!this.noRisers) {\r\n            if (points.length > 1) {\r\n                var prevPoint = points[points.length - 1];\r\n                if (this.baseAxis == this.xAxis) {\r\n                    if (backwards) {\r\n                        points.push({ x: prevPoint.x, y: y1 });\r\n                    }\r\n                    else {\r\n                        points.push({ x: x0, y: prevPoint.y });\r\n                    }\r\n                }\r\n                if (this.baseAxis == this.yAxis) {\r\n                    if (backwards) {\r\n                        points.push({ x: x1, y: prevPoint.y });\r\n                    }\r\n                    else {\r\n                        points.push({ x: prevPoint.x, y: y0 });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        var point0 = { x: x0, y: y0 };\r\n        var point1 = { x: x1, y: y1 };\r\n        if (backwards) {\r\n            points.push(point1, point0);\r\n        }\r\n        else {\r\n            points.push(point0, point1);\r\n        }\r\n    };\r\n    /**\r\n     * Draws the line segment.\r\n     *\r\n     * @param segment     Segment\r\n     * @param points      Segment points\r\n     * @param closePoints Segment close points\r\n     */\r\n    StepLineSeries.prototype.drawSegment = function (segment, points, closePoints) {\r\n        var vertical = false;\r\n        if (this.yAxis == this.baseAxis) {\r\n            vertical = true;\r\n        }\r\n        segment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    StepLineSeries.prototype.createSegment = function () {\r\n        return new StepLineSeriesSegment();\r\n    };\r\n    Object.defineProperty(StepLineSeries.prototype, \"noRisers\", {\r\n        /**\r\n         * @return No risers\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"noRisers\");\r\n        },\r\n        /**\r\n         * Specifies if step line series should draw only horizontal (or only\r\n         * vertical, depending on base axis) lines, instead of connecting them with\r\n         * vertical (or horizontal) lines.\r\n         *\r\n         * @default false\r\n         * @param value  No risers\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"noRisers\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StepLineSeries.prototype, \"startLocation\", {\r\n        /**\r\n         * @return Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startLocation\");\r\n        },\r\n        /**\r\n         * start location of the step\r\n         *\r\n         * @param value Location (0-1)\r\n         * @default 0\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startLocation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StepLineSeries.prototype, \"endLocation\", {\r\n        /**\r\n         * @return Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endLocation\");\r\n        },\r\n        /**\r\n         * Step end location.\r\n         *\r\n         * @param value Location (0-1)\r\n         * #default 1\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endLocation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return StepLineSeries;\r\n}(LineSeries));\r\nexport { StepLineSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n//# sourceMappingURL=StepLineSeries.js.map","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nvar StepLineSeriesSegment = /** @class */ (function (_super) {\r\n    __extends(StepLineSeriesSegment, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function StepLineSeriesSegment() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"StepLineSeriesSegment\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the series segment.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param points       Points to connect\r\n     * @param closePoints  ?\r\n     * @param smoothnessX  Horizontal bezier setting (?)\r\n     * @param smoothnessY  Vertical bezier setting (?)\r\n     */\r\n    StepLineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY, noRisers, vertical) {\r\n        if (points.length > 0 && closePoints.length > 0) {\r\n            if (noRisers) {\r\n                var path = $path.moveTo(points[0]);\r\n                if (points.length > 0) {\r\n                    for (var i = 1; i < points.length; i++) {\r\n                        var point = points[i];\r\n                        if (i / 2 == Math.round(i / 2)) {\r\n                            path += $path.moveTo(point);\r\n                        }\r\n                        else {\r\n                            path += $path.lineTo(point);\r\n                        }\r\n                    }\r\n                }\r\n                this.strokeSprite.path = path;\r\n                if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n                    path = $path.moveTo(points[0]) + $path.polyline(points);\r\n                    path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n                    path += $path.lineTo(points[0]);\r\n                    path += $path.closePath();\r\n                    this.fillSprite.path = path;\r\n                }\r\n                else {\r\n                }\r\n            }\r\n            else {\r\n                var path = $path.moveTo(points[0]) + $path.polyline(points);\r\n                this.strokeSprite.path = path;\r\n                if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n                    path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n                    path += $path.lineTo(points[0]);\r\n                    path += $path.closePath();\r\n                    this.fillSprite.path = path;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return StepLineSeriesSegment;\r\n}(LineSeriesSegment));\r\nexport { StepLineSeriesSegment };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n//# sourceMappingURL=StepLineSeriesSegment.js.map","/**\r\n * TreeMap series module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar TreeMapSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(TreeMapSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TreeMapSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"TreeMapSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TreeMapSeriesDataItem.prototype, \"parentName\", {\r\n        /**\r\n         * Data for the this particular item.\r\n         *\r\n         * @param value  Item's data\r\n         */\r\n        //public set dataContext(value: Object) {\r\n        //\tthis._dataContext = value;\r\n        //}\r\n        /**\r\n         * @return Item's data\r\n         */\r\n        /*\r\n       public get dataContext(): Object {\r\n           // It's because data of tree series is TreeMapDataItems.\r\n           if (this._dataContext) {\r\n               return (<any>this._dataContext).dataContext;\r\n           }\r\n       }*/\r\n        /**\r\n         * The name of the item's parent item.\r\n         *\r\n         * @return Parent name\r\n         */\r\n        get: function () {\r\n            var treeMapDataItem = this.treeMapDataItem;\r\n            if (treeMapDataItem && treeMapDataItem.parent) {\r\n                return treeMapDataItem.parent.name;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapSeriesDataItem.prototype, \"value\", {\r\n        /**\r\n         * Item's numeric value.\r\n         *\r\n         * @readonly\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            var treeMapDataItem = this.treeMapDataItem;\r\n            if (treeMapDataItem) {\r\n                return treeMapDataItem.value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapSeriesDataItem.prototype, \"treeMapDataItem\", {\r\n        /**\r\n         * A corresponding data item from the tree map.\r\n         *\r\n         * @readonly\r\n         * @return Data item\r\n         */\r\n        get: function () {\r\n            return this._dataContext;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Hides the Data Item and related visual elements.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     * @param delay     Delay animation (ms)\r\n     * @param toValue   A value to set to `fields` when hiding\r\n     * @param fields    A list of data fields to set value to `toValue`\r\n     */\r\n    TreeMapSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\r\n        var treeMapDataItem = this.treeMapDataItem;\r\n        if (treeMapDataItem) {\r\n            treeMapDataItem.hide(duration);\r\n        }\r\n        return _super.prototype.hide.call(this, duration, delay, toValue, fields);\r\n    };\r\n    /**\r\n     * Shows the Data Item and related visual elements.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     * @param delay     Delay animation (ms)\r\n     * @param fields    A list of fields to set values of\r\n     */\r\n    TreeMapSeriesDataItem.prototype.show = function (duration, delay, fields) {\r\n        var treeMapDataItem = this.treeMapDataItem;\r\n        if (treeMapDataItem) {\r\n            treeMapDataItem.show(duration, delay, fields);\r\n        }\r\n        return _super.prototype.show.call(this, duration, delay, fields);\r\n    };\r\n    return TreeMapSeriesDataItem;\r\n}(ColumnSeriesDataItem));\r\nexport { TreeMapSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar TreeMapSeries = /** @class */ (function (_super) {\r\n    __extends(TreeMapSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TreeMapSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"TreeMapSeries\";\r\n        _this.applyTheme();\r\n        _this.fillOpacity = 1;\r\n        _this.strokeOpacity = 1;\r\n        _this.minBulletDistance = 0;\r\n        _this.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n        _this.columns.template.configField = \"config\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.stroke = interfaceColors.getFor(\"background\");\r\n        _this.dataFields.openValueX = \"x0\";\r\n        _this.dataFields.valueX = \"x1\";\r\n        _this.dataFields.openValueY = \"y0\";\r\n        _this.dataFields.valueY = \"y1\";\r\n        _this.sequencedInterpolation = false;\r\n        _this.showOnInit = false;\r\n        // otherwise nodes don't stack nicely to each other\r\n        _this.columns.template.pixelPerfect = false;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Processes data item.\r\n     *\r\n     * @param dataItem     Data item\r\n     * @param dataContext  Raw data\r\n     * @param index        Index of the data item\r\n     */\r\n    TreeMapSeries.prototype.processDataItem = function (dataItem, dataContext) {\r\n        dataContext.seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n        _super.prototype.processDataItem.call(this, dataItem, dataContext);\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    TreeMapSeries.prototype.createDataItem = function () {\r\n        return new TreeMapSeriesDataItem();\r\n    };\r\n    /**\r\n     * Shows series.\r\n     *\r\n     * @param duration  Duration of fade in (ms)\r\n     * @return Animation\r\n     */\r\n    TreeMapSeries.prototype.show = function (duration) {\r\n        if (this.preventShow) {\r\n            return;\r\n        }\r\n        var interpolationDuration = this.defaultState.transitionDuration;\r\n        if ($type.isNumber(duration)) {\r\n            interpolationDuration = duration;\r\n        }\r\n        this.dataItems.each(function (dataItem) {\r\n            //dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n            dataItem.show(duration);\r\n        });\r\n        return _super.prototype.showReal.call(this, interpolationDuration);\r\n    };\r\n    /**\r\n     * Hides series.\r\n     *\r\n     * @param duration  Duration of fade out (ms)\r\n     * @return Animation\r\n     */\r\n    TreeMapSeries.prototype.hide = function (duration) {\r\n        var interpolationDuration = this.defaultState.transitionDuration;\r\n        if ($type.isNumber(duration)) {\r\n            interpolationDuration = duration;\r\n        }\r\n        var animation = _super.prototype.hideReal.call(this, interpolationDuration);\r\n        this.dataItems.each(function (dataItem) {\r\n            //dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n            dataItem.hide(duration);\r\n        });\r\n        return animation;\r\n    };\r\n    /**\r\n     * Process values.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMapSeries.prototype.processValues = function () {\r\n        // Just overriding so that inherited method does not kick in.\r\n    };\r\n    /**\r\n     * Returns relative start location for the data item.\r\n     *\r\n     * @param dataItem  Data item\r\n     * @return Location (0-1)\r\n     */\r\n    TreeMapSeries.prototype.getStartLocation = function (dataItem) {\r\n        return 0;\r\n    };\r\n    /**\r\n     * Returns relative end location for the data item.\r\n     *\r\n     * @param dataItem  Data item\r\n     * @return Location (0-1)\r\n     */\r\n    TreeMapSeries.prototype.getEndLocation = function (dataItem) {\r\n        return 1;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    TreeMapSeries.prototype.dataChangeUpdate = function () {\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    TreeMapSeries.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Add empty data fields if the they are not set, so that XYSeries\r\n            // dataField check does not result in error.\r\n            if (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n                config.dataFields = {};\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param marker  Legend item container\r\n     */\r\n    TreeMapSeries.prototype.createLegendMarker = function (marker) {\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.removeChildren();\r\n        var column = marker.createChild(RoundedRectangle);\r\n        column.shouldClone = false;\r\n        $object.copyProperties(this, column, visualProperties);\r\n        //column.copyFrom(<any>this.columns.template);\r\n        column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n        column.width = w;\r\n        column.height = h;\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = column.fill;\r\n        legendDataItem.colorOrig = column.fill;\r\n    };\r\n    TreeMapSeries.prototype.disableUnusedColumns = function (dataItem) {\r\n        _super.prototype.disableUnusedColumns.call(this, dataItem);\r\n        if (dataItem.column) {\r\n            dataItem.column.__disabled = false;\r\n        }\r\n    };\r\n    return TreeMapSeries;\r\n}(ColumnSeries));\r\nexport { TreeMapSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n//# sourceMappingURL=TreeMapSeries.js.map","/**\r\n * XY series module.\r\n */\r\nimport { __extends, __values } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { options } from \"../../core/Options\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar XYSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(XYSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"XYSeriesDataItem\";\r\n        _this.values.customValue = {};\r\n        _this.values.valueX = { stack: 0 };\r\n        _this.values.valueY = { stack: 0 };\r\n        _this.values.openValueX = {};\r\n        _this.values.openValueY = {};\r\n        _this.values.dateX = {};\r\n        _this.values.dateY = {};\r\n        _this.values.openDateX = {};\r\n        _this.values.openDateY = {};\r\n        _this.setLocation(\"dateX\", 0.5, 0);\r\n        _this.setLocation(\"dateY\", 0.5, 0);\r\n        _this.setLocation(\"categoryX\", 0.5, 0);\r\n        _this.setLocation(\"categoryY\", 0.5, 0);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"valueX\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.valueX.value;\r\n        },\r\n        /**\r\n         * Item's numeric value on X value axis.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"valueX\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"customValue\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.customValue.value;\r\n        },\r\n        /**\r\n         * Item's custom numeric value.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"customValue\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"valueY\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.valueY.value;\r\n        },\r\n        /**\r\n         * Item's numeric value on Y value axis.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"valueY\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"dateX\", {\r\n        /**\r\n         * @return Date\r\n         */\r\n        get: function () {\r\n            return this.getDate(\"dateX\");\r\n        },\r\n        /**\r\n         * Item's date value on X date-based axis.\r\n         *\r\n         * @param date  Date\r\n         */\r\n        set: function (date) {\r\n            this.setDate(\"dateX\", date);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"dateY\", {\r\n        /**\r\n         * @return Date\r\n         */\r\n        get: function () {\r\n            return this.getDate(\"dateY\");\r\n        },\r\n        /**\r\n         * Item's date value on Y date-based axis.\r\n         *\r\n         * @param date  Date\r\n         */\r\n        set: function (date) {\r\n            this.setDate(\"dateY\", date);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"categoryX\", {\r\n        /**\r\n         * @return Category\r\n         */\r\n        get: function () {\r\n            return this.categories.categoryX;\r\n        },\r\n        /**\r\n         * Item's category on X category axis.\r\n         *\r\n         * @param category  Category\r\n         */\r\n        set: function (category) {\r\n            this.setCategory(\"categoryX\", category);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"categoryY\", {\r\n        /**\r\n         * @return Category\r\n         */\r\n        get: function () {\r\n            return this.categories.categoryY;\r\n        },\r\n        /**\r\n         * Item's category on Y category axis.\r\n         *\r\n         * @param category  Category\r\n         */\r\n        set: function (category) {\r\n            this.setCategory(\"categoryY\", category);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"openValueX\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.openValueX.value;\r\n        },\r\n        /**\r\n         * Item's open numeric value on X value axis.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"openValueX\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"openValueY\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.openValueY.value;\r\n        },\r\n        /**\r\n         * Item's open numeric value on Y value axis.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"openValueY\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"openDateX\", {\r\n        /**\r\n         * @return Date\r\n         */\r\n        get: function () {\r\n            return this.getDate(\"openDateX\");\r\n        },\r\n        /**\r\n         * Item's open date value on X date-based axis.\r\n         *\r\n         * @param date  Date\r\n         */\r\n        set: function (date) {\r\n            this.setDate(\"openDateX\", date);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"openDateY\", {\r\n        /**\r\n         * @return Date\r\n         */\r\n        get: function () {\r\n            return this.getDate(\"openDateY\");\r\n        },\r\n        /**\r\n         * Item's open date value on Y date-based axis.\r\n         *\r\n         * @param date  Date\r\n         */\r\n        set: function (date) {\r\n            this.setDate(\"openDateY\", date);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"openCategoryX\", {\r\n        /**\r\n         * @return Category\r\n         */\r\n        get: function () {\r\n            return this.categories.openCategoryX;\r\n        },\r\n        /**\r\n         * Item's open category on X category axis.\r\n         *\r\n         * @param category  Category\r\n         */\r\n        set: function (category) {\r\n            this.setCategory(\"openCategoryX\", category);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"openCategoryY\", {\r\n        /**\r\n         * @return Category\r\n         */\r\n        get: function () {\r\n            return this.categories.openCategoryY;\r\n        },\r\n        /**\r\n         * Item's open category on Y category axis.\r\n         *\r\n         * @param category  Category\r\n         */\r\n        set: function (category) {\r\n            this.setCategory(\"openCategoryY\", category);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Return smallest value out of all item's value fields.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param fields      Fields to check in\r\n     * @param working     Include working (temporary) values\r\n     * @param stackValue  If item is in a stack, the value item starts as\r\n     * @return Value\r\n     */\r\n    XYSeriesDataItem.prototype.getMin = function (fields, working, stackValue) {\r\n        var _this = this;\r\n        //if (this.visible) {  // dumped because of non smooth zooming\r\n        var min;\r\n        if (!$type.isNumber(stackValue)) {\r\n            stackValue = 0;\r\n        }\r\n        $array.each(fields, function (field) {\r\n            var value;\r\n            if (working) {\r\n                value = _this.getWorkingValue(field);\r\n            }\r\n            else {\r\n                value = _this.getValue(field);\r\n            }\r\n            value += stackValue;\r\n            if (value < min || !$type.isNumber(min)) {\r\n                min = value;\r\n            }\r\n        });\r\n        return min;\r\n        //}\r\n    };\r\n    /**\r\n     * Return biggest value out of all item's value fields.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param fields      Fields to check in\r\n     * @param working     Include working (temporary) values\r\n     * @param stackValue  If item is in a stack, the value item starts as\r\n     * @return Value\r\n     */\r\n    XYSeriesDataItem.prototype.getMax = function (fields, working, stackValue) {\r\n        var _this = this;\r\n        //if (this.visible) { // dumped because of non smooth zooming\r\n        var max;\r\n        if (!$type.isNumber(stackValue)) {\r\n            stackValue = 0;\r\n        }\r\n        $array.each(fields, function (field) {\r\n            var value;\r\n            if (working) {\r\n                value = _this.getWorkingValue(field);\r\n            }\r\n            else {\r\n                value = _this.getValue(field);\r\n            }\r\n            value += stackValue;\r\n            if (value > max || !$type.isNumber(max)) {\r\n                max = value;\r\n            }\r\n        });\r\n        return max;\r\n        //}\r\n    };\r\n    return XYSeriesDataItem;\r\n}(SeriesDataItem));\r\nexport { XYSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar XYSeries = /** @class */ (function (_super) {\r\n    __extends(XYSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYSeries() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Indicates which of the series' `dataFields` to calculate aggregate values\r\n         * for.\r\n         *\r\n         * Available data fields for all [[XYSeries]] are:\r\n         * `valueX`, `valueY`, `openValueX`, and `openValueY`.\r\n         *\r\n         * [[CandlestickSeries]] adds:\r\n         * `lowValueX`, `lowValueY`, `highValueX`, and `highValueY`.\r\n         *\r\n         * Available options:\r\n         * `\"open\"`, `\"close\"`, `\"low\"`, `\"high\"`, `\"average\"`, `\"sum\"`.\r\n         *\r\n         * Defaults are as follows:\r\n         * * `valueX`: `\"close\"`\r\n         * * `valueY`: `\"close\"`\r\n         * * `openValueX`: `\"open\"`\r\n         * * `openValueY`: `\"open\"`\r\n         * * `lowValueX`: `\"low\"`\r\n         * * `lowValueY`: `\"low\"`\r\n         * * `highValueX`: `\"high\"`\r\n         * * `highValueY`: `\"high\"`\r\n         *\r\n         * Is required only if data being plotted on a `DateAxis` and\r\n         * its `groupData` is set to `true`.\r\n         *\r\n         * ```TypeScript\r\n         * let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n         * dateAxis.groupData = true;\r\n         *\r\n         * let valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n         *\r\n         * let series = chart.series.push(new am4charts.LineSeries());\r\n         * series.dataFields.dateX = \"date\";\r\n         * series.dataFields.valueY = \"value\";\r\n         * series.groupFields.valueY = \"average\";\r\n         * ```\r\n         * ```JavaScript\r\n         * var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n         * dateAxis.groupData = true;\r\n         *\r\n         * var valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n         *\r\n         * var series = chart.series.push(new am4charts.LineSeries());\r\n         * series.dataFields.dateX = \"date\";\r\n         * series.dataFields.valueY = \"value\";\r\n         * series.groupFields.valueY = \"average\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"xAxes\": [{\r\n         *     \"type\": \"DateAxis\",\r\n         *     \"groupData\": true\r\n         *   }],\r\n         *   \"yAxes\": [{\r\n         *     \"type\": \"ValueAxis\"\r\n         *   }],\r\n         *   \"series\": [{\r\n         *     \"type\": \"LineSeries\",\r\n         *     \"dataFields\": {\r\n         *       \"dateX\": \"date\",\r\n         *       \"valueY\": \"value\"\r\n         *     },\r\n         *     \"groupFields\": {\r\n         *       \"valueY\": \"average\"\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * The above setup will ensure, that if there are many data items within\r\n         * selected range, they will be grouped into aggregated data points, using\r\n         * average value of all the values.\r\n         *\r\n         * For example if we have 2 years worth of daily data (~700 data items), when\r\n         * fully zoomed out, the chart would show ~100 data items instead: one for\r\n         * each week in those two years.\r\n         *\r\n         * Grouping will occur automatically, based on current selection range, and\r\n         * will change dynamically when user zooms in/out the chart.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n         * @since 4.7.0\r\n         */\r\n        _this.groupFields = {};\r\n        /**\r\n         * X axis the series is attached to.\r\n         */\r\n        _this._xAxis = new MutableValueDisposer();\r\n        /**\r\n         * Y axis the series is attached to.\r\n         */\r\n        _this._yAxis = new MutableValueDisposer();\r\n        /**\r\n         * [_xValueFields description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._xValueFields = [];\r\n        /**\r\n         * [_yValueFields description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._yValueFields = [];\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this._baseInterval = {};\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.dataGrouped = false;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.usesShowFields = false;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this._dataSetChanged = false;\r\n        _this._maxxX = 100000;\r\n        _this._maxxY = 100000;\r\n        _this._propertiesChanged = false;\r\n        _this.className = \"XYSeries\";\r\n        _this.isMeasured = false;\r\n        _this.groupFields.valueX = \"close\";\r\n        _this.groupFields.valueY = \"close\";\r\n        _this.groupFields.customValue = \"close\";\r\n        _this.groupFields.openValueX = \"open\";\r\n        _this.groupFields.openValueY = \"open\";\r\n        _this.cursorTooltipEnabled = true;\r\n        _this.cursorHoverEnabled = true;\r\n        _this.excludeFromTotal = false;\r\n        _this.mainContainer.mask = new Sprite();\r\n        _this.mainContainer.mask.setElement(_this.paper.add(\"path\"));\r\n        _this.stacked = false;\r\n        _this.snapTooltip = false;\r\n        _this._showBullets = false;\r\n        _this.tooltip.pointerOrientation = \"horizontal\";\r\n        _this.hideTooltipWhileZooming = true;\r\n        _this.setPropertyValue(\"maskBullets\", true);\r\n        _this.tooltip.events.on(\"hidden\", function () {\r\n            _this.returnBulletDefaultState();\r\n        }, undefined, false);\r\n        _this._disposers.push(_this._xAxis);\r\n        _this._disposers.push(_this._yAxis);\r\n        _this.observe(visualProperties, function () {\r\n            if (_this.inited) {\r\n                _this._propertiesChanged = true;\r\n                if (_this.legendDataItem) {\r\n                    _this.legendDataItem.childrenCreated = false;\r\n                }\r\n                if (_this.chart && _this.chart.legend) {\r\n                    _this.chart.legend.invalidateDataItems();\r\n                }\r\n                _this.invalidate();\r\n            }\r\n        }, undefined, false);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    XYSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"X/Y Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    XYSeries.prototype.createDataItem = function () {\r\n        return new XYSeriesDataItem();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYSeries.prototype.resetExtremes = function () {\r\n        this._tmin.clear();\r\n        this._tmax.clear();\r\n        this._smin.clear();\r\n        this._smax.clear();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYSeries.prototype.dataChangeUpdate = function () {\r\n        this.dataGrouped = false;\r\n        this._baseInterval = {};\r\n        this._currentDataSetId = \"\";\r\n        this.resetExtremes();\r\n        if (this.xAxis) {\r\n            this.xAxis.seriesDataChangeUpdate(this);\r\n        }\r\n        if (this.yAxis) {\r\n            this.yAxis.seriesDataChangeUpdate(this);\r\n        }\r\n    };\r\n    /**\r\n     * (Re)validates the series' data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYSeries.prototype.validateData = function () {\r\n        this._baseInterval = {};\r\n        var dataFields = this.dataFields;\r\n        if (dataFields.valueYShow || dataFields.openValueXShow || dataFields.openValueXShow || dataFields.openValueYShow) {\r\n            this.usesShowFields = true;\r\n        }\r\n        else {\r\n            this.usesShowFields = false;\r\n        }\r\n        this.defineFields();\r\n        if (this.data.length > 0) {\r\n            this.dataChangeUpdate();\r\n        }\r\n        _super.prototype.validateData.call(this);\r\n        this.updateItemReaderText();\r\n        if (this.chart) {\r\n            if (!$type.hasValue(this.dataFields[this._xField]) || !$type.hasValue(this.dataFields[this._yField])) {\r\n                throw Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n            }\r\n        }\r\n        // 4.7.21 solves 51540\r\n        if (this.inited && this.isHidden) {\r\n            this.hide(0);\r\n        }\r\n        this.dataGrouped = false;\r\n    };\r\n    /**\r\n     * Processes data item.\r\n     *\r\n     * @param dataItem     Data item\r\n     * @param dataContext  Raw data\r\n     * @param index        Index of the data item\r\n     */\r\n    XYSeries.prototype.processDataItem = function (dataItem, dataContext) {\r\n        try {\r\n            _super.prototype.processDataItem.call(this, dataItem, dataContext);\r\n            this.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n            this.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n            this.setInitialWorkingValues(dataItem);\r\n        }\r\n        catch (e) {\r\n            if (this._chart) {\r\n                this._chart.raiseCriticalError(e);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * When validating raw data, instead of processing data item, we update it\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param item\r\n     */\r\n    XYSeries.prototype.updateDataItem = function (dataItem) {\r\n        _super.prototype.updateDataItem.call(this, dataItem);\r\n        //dataItem.events.disable();\r\n        this.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n        this.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n        //dataItem.events.enable();\t\t\r\n    };\r\n    /**\r\n     * Inits data item's working values.\r\n     *\r\n     * @param dataItem  Data item\r\n     * @param index     Data item's index\r\n     */\r\n    XYSeries.prototype.setInitialWorkingValues = function (dataItem) {\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYSeries.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        var xAxis = this.xAxis;\r\n        var yAxis = this.yAxis;\r\n        if (xAxis) {\r\n            var dataItemsX = this.dataItemsByAxis.getKey(xAxis.uid);\r\n            if (dataItemsX) {\r\n                dataItemsX.clear();\r\n            }\r\n            if (xAxis instanceof CategoryAxis) {\r\n                this.clearCatAxis(xAxis);\r\n            }\r\n        }\r\n        if (yAxis) {\r\n            var dataItemsY = this.dataItemsByAxis.getKey(yAxis.uid);\r\n            if (dataItemsY) {\r\n                dataItemsY.clear();\r\n            }\r\n            if (yAxis instanceof CategoryAxis) {\r\n                this.clearCatAxis(yAxis);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYSeries.prototype.clearCatAxis = function (axis) {\r\n        var uid = this.uid;\r\n        axis.dataItems.each(function (dataItem) {\r\n            if (dataItem.seriesDataItems[uid]) {\r\n                dataItem.seriesDataItems[uid] = [];\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Sets up which data fields to use for data access.\r\n     */\r\n    XYSeries.prototype.defineFields = function () {\r\n        var xAxis = this.xAxis;\r\n        var yAxis = this.yAxis;\r\n        if (xAxis && yAxis) {\r\n            var xAxisFieldName = xAxis.axisFieldName;\r\n            var xField = (xAxisFieldName + \"X\");\r\n            var xOpenField = (\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n            var yAxisFieldName = yAxis.axisFieldName;\r\n            var yField = (yAxisFieldName + \"Y\");\r\n            var yOpenField = (\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n            this._xField = xField;\r\n            this._yField = yField;\r\n            if (this.dataFields[xOpenField]) {\r\n                this._xOpenField = xOpenField;\r\n            }\r\n            if (this.dataFields[yOpenField]) {\r\n                this._yOpenField = yOpenField;\r\n            }\r\n            if (!this.dataFields[yOpenField] && this.baseAxis == yAxis) {\r\n                this._yOpenField = yField;\r\n            }\r\n            if (!this.dataFields[xOpenField] && this.baseAxis == xAxis) {\r\n                this._xOpenField = xField;\r\n            }\r\n            if (this.stacked && this.baseAxis == xAxis) {\r\n                this._xOpenField = xField;\r\n            }\r\n            if (this.stacked && this.baseAxis == yAxis) {\r\n                this._yOpenField = yField;\r\n            }\r\n            if ((xAxis instanceof CategoryAxis) && (yAxis instanceof CategoryAxis)) {\r\n                if (!this._yOpenField) {\r\n                    this._yOpenField = yField;\r\n                }\r\n            }\r\n            this._xValueFields = [];\r\n            this._yValueFields = [];\r\n            this.addValueField(xAxis, this._xValueFields, this._xField);\r\n            this.addValueField(xAxis, this._xValueFields, this._xOpenField);\r\n            this.addValueField(yAxis, this._yValueFields, this._yField);\r\n            this.addValueField(yAxis, this._yValueFields, this._yOpenField);\r\n        }\r\n    };\r\n    /**\r\n     * [axis description]\r\n     *\r\n     * @todo Description\r\n     * @param axis    Axis\r\n     * @param fields  Fields (?)\r\n     * @param field   Field\r\n     */\r\n    XYSeries.prototype.addValueField = function (axis, fields, field) {\r\n        if (axis instanceof ValueAxis) {\r\n            if ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n                fields.push(field);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets category field from the category axis.\r\n     *\r\n     * User might set field for category axis only, but not for series. In such\r\n     * case, we take field value from axis and set it for series.\r\n     *\r\n     * @param field  Field\r\n     * @param axis   Axis\r\n     */\r\n    XYSeries.prototype.setCategoryAxisField = function (field, axis) {\r\n        if (!$type.hasValue(this.dataFields[field])) {\r\n            this.dataFields[field] = axis.dataFields.category;\r\n        }\r\n    };\r\n    /**\r\n     * Sets date field from the date axis.\r\n     *\r\n     * User might set field for category axis only, but not for series. In such\r\n     * case, we take field value from axis and set it for series.\r\n     *\r\n     * @param field  Field\r\n     * @param axis   Axis\r\n     */\r\n    XYSeries.prototype.setDateAxisField = function (field, axis) {\r\n        if (!$type.hasValue(this.dataFields[field])) {\r\n            this.dataFields[field] = axis.dataFields.date;\r\n        }\r\n    };\r\n    /**\r\n     * Performs after-draw tasks, e.g. creates masks.\r\n     */\r\n    XYSeries.prototype.afterDraw = function () {\r\n        _super.prototype.afterDraw.call(this);\r\n        this.createMask();\r\n    };\r\n    /**\r\n     * Create a mask for the series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYSeries.prototype.createMask = function () {\r\n        // this mask from which we cut out ranges. does not work well if ranges overlap.\r\n        if (this.mainContainer.mask) {\r\n            var path_1 = this.getMaskPath();\r\n            // @todo: this approach won't work well on circluar or other non x/y axes\r\n            $iter.each(this.axisRanges.iterator(), function (range) {\r\n                if (range.axisFill.fillPath) {\r\n                    range.axisFill.validate();\r\n                    path_1 += range.axisFill.fillPath;\r\n                }\r\n            });\r\n            this.mainContainer.mask.path = path_1;\r\n        }\r\n    };\r\n    /**\r\n     * Returns an SVG path to use as series mask.\r\n     *\r\n     * @return SVG path\r\n     */\r\n    XYSeries.prototype.getMaskPath = function () {\r\n        if (this.xAxis && this.yAxis) {\r\n            return $path.rectToPath({\r\n                x: 0,\r\n                y: 0,\r\n                width: this.xAxis.axisLength,\r\n                height: this.yAxis.axisLength\r\n            });\r\n        }\r\n        return \"\";\r\n    };\r\n    /**\r\n     * Returns axis data field to use.\r\n     *\r\n     * @param axis  Axis\r\n     * @return Field name\r\n     */\r\n    XYSeries.prototype.getAxisField = function (axis) {\r\n        if (axis == this.xAxis) {\r\n            return this.xField;\r\n        }\r\n        if (axis == this.yAxis) {\r\n            return this.yField;\r\n        }\r\n    };\r\n    /**\r\n     * Validates data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYSeries.prototype.validateDataItems = function () {\r\n        var chart = this.chart;\r\n        if (chart) {\r\n            this._maxxX = $math.max(100000, chart.plotContainer.maxWidth * 2);\r\n            this._maxxY = $math.max(100000, chart.plotContainer.maxHeight * 2);\r\n        }\r\n        // this helps date axis to check which baseInterval we should use\r\n        var xAxis = this.xAxis;\r\n        var yAxis = this.yAxis;\r\n        if (xAxis && yAxis) {\r\n            xAxis.updateAxisBySeries();\r\n            yAxis.updateAxisBySeries();\r\n        }\r\n        _super.prototype.validateDataItems.call(this);\r\n        if (xAxis && yAxis) {\r\n            xAxis.postProcessSeriesDataItems(this);\r\n            yAxis.postProcessSeriesDataItems(this);\r\n        }\r\n    };\r\n    /**\r\n     * Validates data range.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYSeries.prototype.validateDataRange = function () {\r\n        var xAxis = this.xAxis;\r\n        var yAxis = this.yAxis;\r\n        if (xAxis && yAxis) {\r\n            if (xAxis.dataRangeInvalid) {\r\n                xAxis.validateDataRange();\r\n            }\r\n            if (yAxis.dataRangeInvalid) {\r\n                yAxis.validateDataRange();\r\n            }\r\n        }\r\n        _super.prototype.validateDataRange.call(this);\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYSeries.prototype.validate = function () {\r\n        var xAxis = this.xAxis;\r\n        var yAxis = this.yAxis;\r\n        if (xAxis && yAxis) {\r\n            if (xAxis.invalid) {\r\n                xAxis.validate();\r\n            }\r\n            if (yAxis.invalid) {\r\n                yAxis.validate();\r\n            }\r\n            this.y = yAxis.pixelY;\r\n            this.x = xAxis.pixelX;\r\n            this._showBullets = true;\r\n            var minBulletDistance = this.minBulletDistance;\r\n            if ($type.isNumber(minBulletDistance)) {\r\n                if (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n                    this._showBullets = false;\r\n                }\r\n            }\r\n        }\r\n        this.updateTooltip();\r\n        _super.prototype.validate.call(this);\r\n        var chart = this.chart;\r\n        var maskBullets = this.maskBullets;\r\n        if (chart && maskBullets) {\r\n            if (chart.className == \"XYChart\") {\r\n                if (chart.leftAxesContainer.layout == \"vertical\" || chart.rightAxesContainer.layout == \"vertical\") {\r\n                    if (this.yAxis) {\r\n                        this.bulletsContainer.mask = this.yAxis.renderer.gridContainer;\r\n                    }\r\n                    else {\r\n                        this.bulletsContainer.mask = undefined;\r\n                    }\r\n                }\r\n                if (chart.topAxesContainer.layout == \"horizontal\" || chart.bottomAxesContainer.layout == \"horizontal\") {\r\n                    if (this.xAxis) {\r\n                        this.bulletsContainer.mask = this.xAxis.renderer.gridContainer;\r\n                    }\r\n                    else {\r\n                        this.bulletsContainer.mask = undefined;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(XYSeries.prototype, \"xAxis\", {\r\n        /**\r\n         * @return Axis\r\n         */\r\n        get: function () {\r\n            if (this.chart) {\r\n                if (!this._xAxis.get()) {\r\n                    var axis = this.chart.xAxes.getIndex(0);\r\n                    if (!axis) {\r\n                        throw Error(\"There are no X axes on chart.\");\r\n                    }\r\n                    this.xAxis = axis;\r\n                }\r\n                return this._xAxis.get();\r\n            }\r\n        },\r\n        /**\r\n         * X axis the series is attached to.\r\n         *\r\n         * @param axis  Axis\r\n         */\r\n        set: function (axis) {\r\n            this.setXAxis(axis);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    XYSeries.prototype.setXAxis = function (axis) {\r\n        var oldAxis = this._xAxis.get();\r\n        if (oldAxis != axis) {\r\n            if (oldAxis) {\r\n                this.dataItemsByAxis.removeKey(oldAxis.uid);\r\n                // TODO why is this here ?\r\n                this._xAxis.dispose();\r\n                // temp @todo: why it is not disposed?\r\n                oldAxis.series.removeValue(this);\r\n            }\r\n            this._xAxis.set(axis, axis.registerSeries(this));\r\n            this.dataItemsByAxis.setKey(axis.uid, new Dictionary());\r\n            this.invalidateData();\r\n        }\r\n    };\r\n    Object.defineProperty(XYSeries.prototype, \"yAxis\", {\r\n        /**\r\n         * @return Axis\r\n         */\r\n        get: function () {\r\n            if (this.chart) {\r\n                if (!this._yAxis.get()) {\r\n                    var axis = this.chart.yAxes.getIndex(0);\r\n                    if (!axis) {\r\n                        throw Error(\"There are no Y axes on chart.\");\r\n                    }\r\n                    this.yAxis = axis;\r\n                }\r\n                return this._yAxis.get();\r\n            }\r\n        },\r\n        /**\r\n         * Y axis the series is attached to.\r\n         *\r\n         * @param axis  Axis\r\n         */\r\n        set: function (axis) {\r\n            this.setYAxis(axis);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    XYSeries.prototype.setYAxis = function (axis) {\r\n        var oldAxis = this._yAxis.get();\r\n        if (oldAxis != axis) {\r\n            if (oldAxis) {\r\n                this.dataItemsByAxis.removeKey(oldAxis.uid);\r\n                // TODO why is this here ?\r\n                this._yAxis.dispose();\r\n                // temp @todo: why it is not disposed?\r\n                oldAxis.series.removeValue(this);\r\n            }\r\n            this._yAxis.set(axis, axis.registerSeries(this));\r\n            if (axis.chart instanceof XYChart) {\r\n                axis.chart.handleYAxisSet(this);\r\n            }\r\n            this.dataItemsByAxis.setKey(axis.uid, new Dictionary());\r\n            this.invalidateData();\r\n        }\r\n    };\r\n    Object.defineProperty(XYSeries.prototype, \"baseAxis\", {\r\n        /**\r\n         * @return Axis\r\n         */\r\n        get: function () {\r\n            var xAxis = this.xAxis;\r\n            var yAxis = this.yAxis;\r\n            if (!this._baseAxis && xAxis && yAxis) {\r\n                if (yAxis instanceof DateAxis) {\r\n                    this._baseAxis = yAxis;\r\n                }\r\n                if (xAxis instanceof DateAxis) {\r\n                    this._baseAxis = xAxis;\r\n                }\r\n                if (yAxis instanceof CategoryAxis) {\r\n                    this._baseAxis = yAxis;\r\n                }\r\n                if (xAxis instanceof CategoryAxis) {\r\n                    this._baseAxis = xAxis;\r\n                }\r\n                if (!this._baseAxis) {\r\n                    this._baseAxis = xAxis;\r\n                }\r\n            }\r\n            return this._baseAxis;\r\n        },\r\n        /**\r\n         * The main (base) axis.\r\n         *\r\n         * This is the axis that series fills will go to, or grow animations will\r\n         * happen from.\r\n         *\r\n         * @param value  Axis\r\n         */\r\n        set: function (value) {\r\n            if (this._baseAxis != value) {\r\n                this._baseAxis = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds one or several (array) of data items to the existing data.\r\n     *\r\n     * @param rawDataItem One or many raw data item objects\r\n     */\r\n    XYSeries.prototype.addData = function (rawDataItem, removeCount, skipRaw) {\r\n        _super.prototype.addData.call(this, rawDataItem, removeCount, skipRaw);\r\n        var scrollbarSeries = this.scrollbarSeries;\r\n        if (scrollbarSeries) {\r\n            this.scrollbarSeries.addData(rawDataItem, removeCount, true);\r\n        }\r\n    };\r\n    XYSeries.prototype.setData = function (value) {\r\n        _super.prototype.setData.call(this, value);\r\n        if (this.scrollbarSeries) {\r\n            this.scrollbarSeries.setData(value);\r\n        }\r\n    };\r\n    /**\r\n     * Makes the chart use particular data set.\r\n     *\r\n     * If `id` is not provided or there is no such data set, main data will be\r\n     * used.\r\n     *\r\n     * @ignore\r\n     * @since 4.7.0\r\n     * @param  id  Data set id\r\n     */\r\n    XYSeries.prototype.setDataSet = function (id) {\r\n        var changed = _super.prototype.setDataSet.call(this, id);\r\n        if (changed) {\r\n            this._dataSetChanged = true;\r\n            var dataItems = this.dataItems;\r\n            this.resetExtremes();\r\n            var xAxis = this.xAxis;\r\n            var yAxis = this.yAxis;\r\n            this._prevStartIndex = undefined;\r\n            this._prevEndIndex = undefined;\r\n            this._startIndex = undefined;\r\n            this._endIndex = undefined;\r\n            if (!this.appeared) {\r\n                this.processValues(false); // this will slow down!\r\n            }\r\n            if (xAxis instanceof DateAxis && xAxis == this.baseAxis) {\r\n                this._tmin.setKey(xAxis.uid, dataItems.getIndex(0).dateX.getTime());\r\n                this._tmax.setKey(xAxis.uid, dataItems.getIndex(dataItems.length - 1).dateX.getTime());\r\n                this.dispatch(\"extremeschanged\");\r\n            }\r\n            if (yAxis instanceof DateAxis && yAxis == this.baseAxis) {\r\n                this._tmin.setKey(yAxis.uid, dataItems.getIndex(0).dateY.getTime());\r\n                this._tmax.setKey(yAxis.uid, dataItems.getIndex(dataItems.length - 1).dateY.getTime());\r\n                this.dispatch(\"extremeschanged\");\r\n            }\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * Processes values after data items' were added.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItems  Data items\r\n     */\r\n    XYSeries.prototype.processValues = function (working) {\r\n        _super.prototype.processValues.call(this, working);\r\n        var xAxis = this.xAxis;\r\n        var yAxis = this.yAxis;\r\n        if (!xAxis || !yAxis) {\r\n            return;\r\n        }\r\n        var dataItems = this.dataItems;\r\n        var minX = Infinity;\r\n        var maxX = -Infinity;\r\n        var minY = Infinity;\r\n        var maxY = -Infinity;\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        var workingStartIndex = startIndex;\r\n        var workingEndIndex = endIndex;\r\n        if (!working) {\r\n            startIndex = 0;\r\n            endIndex = this.dataItems.length;\r\n        }\r\n        for (var i = startIndex; i < endIndex; i++) {\r\n            var dataItem = dataItems.getIndex(i);\r\n            this.getStackValue(dataItem, working);\r\n            var stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n            var stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n            minX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n            minY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n            maxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n            maxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n            // if it's stacked, pay attention to stack value\r\n            if (this.stacked) {\r\n                if (this.baseAxis == xAxis) {\r\n                    if (stackY < minY) {\r\n                        minY = stackY;\r\n                    }\r\n                    if (stackY > maxY) {\r\n                        maxY = stackY;\r\n                    }\r\n                }\r\n                if (this.baseAxis == yAxis) {\r\n                    if (stackX < minX) {\r\n                        minX = stackX;\r\n                    }\r\n                    if (stackX > maxX) {\r\n                        maxX = stackX;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // this is mainly for value axis to calculate total and perecent.total of each series category\r\n        xAxis.processSeriesDataItems();\r\n        yAxis.processSeriesDataItems();\r\n        var xAxisId = xAxis.uid;\r\n        var yAxisId = yAxis.uid;\r\n        if (this.xAxis instanceof ValueAxis && (minX == Infinity || maxX == -Infinity)) {\r\n            return;\r\n        }\r\n        if (this.yAxis instanceof ValueAxis && (minY == Infinity || maxY == -Infinity)) {\r\n            return;\r\n        }\r\n        if (!working) {\r\n            if (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n                this._tmin.setKey(xAxisId, minX);\r\n                this._tmax.setKey(xAxisId, maxX);\r\n                this._tmin.setKey(yAxisId, minY);\r\n                this._tmax.setKey(yAxisId, maxY);\r\n                var stackedSeries = this.stackedSeries;\r\n                if (stackedSeries) {\r\n                    if (stackedSeries.isDisposed()) {\r\n                        this.stackedSeries = undefined;\r\n                    }\r\n                    else {\r\n                        stackedSeries.processValues(false);\r\n                    }\r\n                }\r\n                this.dispatchImmediately(\"extremeschanged\");\r\n            }\r\n        }\r\n        if (startIndex != workingStartIndex || endIndex != workingEndIndex) {\r\n            minX = Infinity;\r\n            maxX = -Infinity;\r\n            minY = Infinity;\r\n            maxY = -Infinity;\r\n            for (var i = workingStartIndex; i < workingEndIndex; i++) {\r\n                var dataItem = dataItems.getIndex(i);\r\n                this.getStackValue(dataItem, working);\r\n                var stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n                var stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n                minX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n                minY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n                maxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n                maxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n                // if it's stacked, pay attention to stack value\r\n                if (this.stacked) {\r\n                    if (this.baseAxis == xAxis) {\r\n                        if (stackY < minY) {\r\n                            minY = stackY;\r\n                        }\r\n                        if (stackY > maxY) {\r\n                            maxY = stackY;\r\n                        }\r\n                    }\r\n                    if (this.baseAxis == yAxis) {\r\n                        if (stackX < minX) {\r\n                            minX = stackX;\r\n                        }\r\n                        if (stackX > maxX) {\r\n                            maxX = stackX;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.xAxis instanceof ValueAxis && (minX == Infinity || maxX == -Infinity)) {\r\n            return;\r\n        }\r\n        if (this.yAxis instanceof ValueAxis && (minY == Infinity || maxY == -Infinity)) {\r\n            return;\r\n        }\r\n        if (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n            this._smin.setKey(xAxisId, minX);\r\n            this._smax.setKey(xAxisId, maxX);\r\n            this._smin.setKey(yAxisId, minY);\r\n            this._smax.setKey(yAxisId, maxY);\r\n            if (this.appeared || this.start != 0 || this.end != 1 || this.dataItems != this.mainDataSet) {\r\n                /// new, helps to handle issues with change percent\r\n                var changed = false;\r\n                if (yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n                    var tmin = this._tmin.getKey(yAxisId);\r\n                    if (!$type.isNumber(tmin) || ((this.usesShowFields || this._dataSetChanged) && minY < tmin) || (this.stackedSeries && !this.isHidden)) {\r\n                        this._tmin.setKey(yAxisId, minY);\r\n                        changed = true;\r\n                    }\r\n                    var tmax = this._tmax.getKey(yAxisId);\r\n                    if (!$type.isNumber(tmax) || ((this.usesShowFields || this._dataSetChanged) && maxY > tmax) || (this.stackedSeries && !this.isHidden)) {\r\n                        this._tmax.setKey(yAxisId, maxY);\r\n                        changed = true;\r\n                    }\r\n                }\r\n                if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis)) {\r\n                    var tmin = this._tmin.getKey(xAxisId);\r\n                    if (!$type.isNumber(tmin) || ((this.usesShowFields || this._dataSetChanged) && minX < tmin) || (this.stackedSeries && !this.isHidden)) {\r\n                        this._tmin.setKey(xAxisId, minX);\r\n                        changed = true;\r\n                    }\r\n                    var tmax = this._tmax.getKey(xAxisId);\r\n                    if (!$type.isNumber(tmax) || ((this.usesShowFields || this._dataSetChanged) && maxX > tmax) || (this.stackedSeries && !this.isHidden)) {\r\n                        this._tmax.setKey(xAxisId, maxX);\r\n                        changed = true;\r\n                    }\r\n                }\r\n                if (changed) {\r\n                    this.dispatchImmediately(\"extremeschanged\");\r\n                }\r\n                if (this.start == 0 && this.end == 1) {\r\n                    // yes, its ok. otherwise min/max won't be updated when zooming out\r\n                    this._dataSetChanged = false;\r\n                }\r\n                this.dispatchImmediately(\"selectionextremeschanged\");\r\n            }\r\n        }\r\n        if (!working && this.stacked) {\r\n            this.processValues(true);\r\n        }\r\n    };\r\n    /**\r\n     * Hides element's [[Tooltip]].\r\n     *\r\n     * @see {@link Tooltip}\r\n     */\r\n    XYSeries.prototype.hideTooltip = function () {\r\n        _super.prototype.hideTooltip.call(this);\r\n        this.returnBulletDefaultState();\r\n        this._prevTooltipDataItem = undefined;\r\n    };\r\n    /**\r\n     * Shows series tooltip at specific position.\r\n     *\r\n     * @param xPosition  X\r\n     * @param yPosition  Y\r\n     */\r\n    XYSeries.prototype.showTooltipAtPosition = function (xPosition, yPosition) {\r\n        var dataItem;\r\n        if (this.visible && !this.isHiding && !this.isShowing) {\r\n            var xAxis = this._xAxis.get();\r\n            var yAxis = this._yAxis.get();\r\n            if (xAxis == this.baseAxis) {\r\n                dataItem = xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition), this.snapTooltip);\r\n            }\r\n            if (yAxis == this.baseAxis) {\r\n                dataItem = yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition), this.snapTooltip);\r\n            }\r\n            var point = this.showTooltipAtDataItem(dataItem);\r\n            if (point) {\r\n                return point;\r\n            }\r\n            // so that if tooltip is shown on columns or bullets for it not to be hidden\r\n            if (!this.tooltipText) {\r\n                return;\r\n            }\r\n        }\r\n        this.hideTooltip();\r\n    };\r\n    XYSeries.prototype.getAdjustedXLocation = function (dataItem, field, bulletLocationX) {\r\n        return dataItem.locations[field];\r\n    };\r\n    XYSeries.prototype.getAdjustedYLocation = function (dataItem, field, bulletLocationY) {\r\n        return dataItem.locations[field];\r\n    };\r\n    /**\r\n     * Shows series tooltip at specific dataItem.\r\n     *\r\n     * @param dataItem\r\n     */\r\n    XYSeries.prototype.showTooltipAtDataItem = function (dataItem) {\r\n        var e_1, _a;\r\n        var cursor = this.chart.cursor;\r\n        if (cursor && cursor.hideSeriesTooltipsOnSelection && cursor.selection.visible && cursor.downPoint) {\r\n            this.hideTooltip();\r\n            return;\r\n        }\r\n        this.returnBulletDefaultState(dataItem);\r\n        if (dataItem && dataItem.visible) {\r\n            this.updateLegendValue(dataItem);\r\n            if (this.cursorTooltipEnabled) {\r\n                this.tooltipDataItem = dataItem;\r\n                // todo: add tooltipXField and tooltipYField.\r\n                var tooltipXField = this.tooltipXField;\r\n                var tooltipYField = this.tooltipYField;\r\n                if ($type.hasValue(dataItem[tooltipXField]) && $type.hasValue(dataItem[tooltipYField])) {\r\n                    var tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, this.getAdjustedXLocation(dataItem, tooltipXField), this.getAdjustedYLocation(dataItem, tooltipYField));\r\n                    if (tooltipPoint) {\r\n                        if (this.chart.className == \"XYChart\" && (tooltipPoint.y < -1 || tooltipPoint.y > this.yAxis.pixelHeight + 1 || tooltipPoint.x < -1 || tooltipPoint.x > this.xAxis.pixelWidth + 1)) {\r\n                            // void\r\n                        }\r\n                        else {\r\n                            this.tooltipX = tooltipPoint.x;\r\n                            this.tooltipY = tooltipPoint.y;\r\n                            if (this._prevTooltipDataItem != dataItem) {\r\n                                this.dispatchImmediately(\"tooltipshownat\", {\r\n                                    type: \"tooltipshownat\",\r\n                                    target: this,\r\n                                    dataItem: dataItem\r\n                                });\r\n                                this._prevTooltipDataItem = dataItem;\r\n                            }\r\n                            if (this.cursorHoverEnabled) {\r\n                                try {\r\n                                    for (var _b = __values(dataItem.sprites), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                                        var sprite = _c.value;\r\n                                        if (!sprite.parent.visible || sprite.isHidden || sprite.__disabled || sprite.disabled || sprite.isHiding) {\r\n                                        }\r\n                                        else {\r\n                                            if (!sprite.interactions.isRealHover) {\r\n                                                sprite.dispatchImmediately(\"over\");\r\n                                                sprite.interactions.isRealHover = true;\r\n                                            }\r\n                                            sprite.isHover = true;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n                                finally {\r\n                                    try {\r\n                                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                                    }\r\n                                    finally { if (e_1) throw e_1.error; }\r\n                                }\r\n                            }\r\n                            if (this.showTooltip()) {\r\n                                return $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.updateLegendValue(dataItem, true);\r\n        }\r\n    };\r\n    /**\r\n     * Returns default state to bullets when tooltip is shown at some other data\r\n     * item or hidden\r\n     */\r\n    XYSeries.prototype.returnBulletDefaultState = function (dataItem) {\r\n        var e_2, _a;\r\n        if (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n            try {\r\n                for (var _b = __values(this._prevTooltipDataItem.sprites), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var sprite = _c.value;\r\n                    if (!sprite.isDisposed()) {\r\n                        var fireEvent = sprite.interactions.isRealHover;\r\n                        sprite.isHover = false;\r\n                        if (fireEvent) {\r\n                            sprite.dispatchImmediately(\"out\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        this._prevTooltipDataItem = undefined;\r\n                    }\r\n                }\r\n            }\r\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_2) throw e_2.error; }\r\n            }\r\n        }\r\n    };\r\n    XYSeries.prototype.shouldCreateBullet = function (dataItem, bulletTemplate) {\r\n        // use series xField/yField if bullet doesn't have fields set\r\n        var xField = bulletTemplate.xField;\r\n        if (!$type.hasValue(xField)) {\r\n            xField = this.xField;\r\n        }\r\n        var yField = bulletTemplate.yField;\r\n        if (!$type.hasValue(yField)) {\r\n            yField = this.yField;\r\n        }\r\n        if ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n            return false;\r\n        }\r\n        if (bulletTemplate.disabled) {\r\n            var disabledField = bulletTemplate.propertyFields.disabled;\r\n            var dataContext = dataItem.dataContext;\r\n            if (dataContext && dataContext[disabledField] === false) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYSeries.prototype.updateTooltip = function () {\r\n        if (!this.hideTooltipWhileZooming && this.tooltip && !this.tooltip.isHidden && !this.isHiding && !this.isHidden && this.tooltipDataItem) {\r\n            this.showTooltipAtDataItem(this.tooltipDataItem);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYSeries.prototype.positionBullet = function (bullet) {\r\n        _super.prototype.positionBullet.call(this, bullet);\r\n        var dataItem = bullet.dataItem;\r\n        // use series xField/yField if bullet doesn't have fields set\r\n        var xField = bullet.xField;\r\n        if (!$type.hasValue(xField)) {\r\n            xField = this.xField;\r\n        }\r\n        var yField = bullet.yField;\r\n        if (!$type.hasValue(yField)) {\r\n            yField = this.yField;\r\n        }\r\n        var xAxis = this.xAxis;\r\n        var yAxis = this.yAxis;\r\n        if ((xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n            bullet.visible = false;\r\n        }\r\n        else {\r\n            var bulletLocationX = this.getBulletLocationX(bullet, xField);\r\n            var bulletLocationY = this.getBulletLocationY(bullet, yField);\r\n            var point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n            if (point) {\r\n                var xOpenField = this.xOpenField;\r\n                var yOpenField = this.yOpenField;\r\n                var positionX = void 0;\r\n                var positionY = void 0;\r\n                if (xAxis instanceof DateAxis) {\r\n                    if (!$type.isNumber(bulletLocationX)) {\r\n                        bulletLocationX = 0;\r\n                    }\r\n                    var openValue = void 0;\r\n                    var closeValue = dataItem.getWorkingValue(xField);\r\n                    if (!xOpenField) {\r\n                        if (xAxis == this.baseAxis) {\r\n                            openValue = xAxis.baseValue;\r\n                        }\r\n                    }\r\n                    else {\r\n                        openValue = dataItem.getWorkingValue(xOpenField);\r\n                    }\r\n                    if (!$type.isNumber(openValue)) {\r\n                        openValue = closeValue;\r\n                    }\r\n                    var stack = dataItem.getValue(\"valueX\", \"stack\");\r\n                    openValue += stack;\r\n                    closeValue += stack;\r\n                    if (openValue == closeValue) {\r\n                        var baseInterval = xAxis.baseInterval;\r\n                        var dateFormatter = xAxis.dateFormatter;\r\n                        openValue = $time.round(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.firstDayOfWeek, dateFormatter.utc).getTime();\r\n                        closeValue = $time.add(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.utc).getTime();\r\n                    }\r\n                    var middleValue = void 0;\r\n                    if (xAxis == this.baseAxis) {\r\n                        middleValue = openValue + (closeValue - openValue) * bulletLocationX;\r\n                    }\r\n                    else {\r\n                        middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n                    }\r\n                    positionX = xAxis.valueToPosition(middleValue);\r\n                }\r\n                else if (xAxis instanceof ValueAxis) {\r\n                    if (!$type.isNumber(bulletLocationX)) {\r\n                        bulletLocationX = 0;\r\n                    }\r\n                    var openValue = void 0;\r\n                    var closeValue = dataItem.getWorkingValue(xField);\r\n                    if (!xOpenField) {\r\n                        openValue = xAxis.baseValue;\r\n                    }\r\n                    else {\r\n                        openValue = dataItem.getWorkingValue(xOpenField);\r\n                    }\r\n                    var stack = dataItem.getValue(\"valueX\", \"stack\");\r\n                    openValue += stack;\r\n                    closeValue += stack;\r\n                    var middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n                    positionX = xAxis.valueToPosition(middleValue);\r\n                }\r\n                else if (xAxis instanceof CategoryAxis) {\r\n                    var rightLocation = this.getAdjustedXLocation(dataItem, xField, bullet.locationX);\r\n                    var leftLocation = this.getAdjustedXLocation(dataItem, xOpenField, bullet.locationX);\r\n                    positionX = xAxis.categoryToPosition(dataItem[xField], rightLocation);\r\n                    var openPositionX = void 0;\r\n                    if (xOpenField) {\r\n                        openPositionX = xAxis.categoryToPosition(dataItem[xOpenField], leftLocation);\r\n                    }\r\n                    if (!$type.isNumber(openPositionX)) {\r\n                        openPositionX = 1;\r\n                    }\r\n                    positionX = openPositionX + (positionX - openPositionX) * bulletLocationX;\r\n                }\r\n                if (yAxis instanceof DateAxis) {\r\n                    if (!$type.isNumber(bulletLocationY)) {\r\n                        bulletLocationY = 0;\r\n                    }\r\n                    var openValue = void 0;\r\n                    var closeValue = dataItem.getWorkingValue(yField);\r\n                    if (!yOpenField) {\r\n                        if (yAxis == this.baseAxis) {\r\n                            openValue = yAxis.baseValue;\r\n                        }\r\n                    }\r\n                    else {\r\n                        openValue = dataItem.getWorkingValue(yOpenField);\r\n                    }\r\n                    if (!$type.isNumber(openValue)) {\r\n                        openValue = closeValue;\r\n                    }\r\n                    var stack = dataItem.getValue(\"valueY\", \"stack\");\r\n                    openValue += stack;\r\n                    closeValue += stack;\r\n                    if (openValue == closeValue) {\r\n                        var baseInterval = yAxis.baseInterval;\r\n                        var dateFormatter = yAxis.dateFormatter;\r\n                        openValue = $time.round(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.firstDayOfWeek, dateFormatter.utc).getTime();\r\n                        closeValue = $time.add(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.utc).getTime();\r\n                    }\r\n                    var middleValue = void 0;\r\n                    if (yAxis == this.baseAxis) {\r\n                        middleValue = openValue + (closeValue - openValue) * bulletLocationY;\r\n                    }\r\n                    else {\r\n                        middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n                    }\r\n                    positionY = yAxis.valueToPosition(middleValue);\r\n                }\r\n                else if (yAxis instanceof ValueAxis) {\r\n                    if (!$type.isNumber(bulletLocationY)) {\r\n                        bulletLocationY = 0;\r\n                    }\r\n                    var openValue = void 0;\r\n                    var closeValue = dataItem.getWorkingValue(yField);\r\n                    if (!yOpenField) {\r\n                        openValue = yAxis.baseValue;\r\n                    }\r\n                    else {\r\n                        openValue = dataItem.getWorkingValue(yOpenField);\r\n                    }\r\n                    var stack = dataItem.getValue(\"valueY\", \"stack\");\r\n                    openValue += stack;\r\n                    closeValue += stack;\r\n                    var middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n                    positionY = yAxis.valueToPosition(middleValue);\r\n                }\r\n                else if (yAxis instanceof CategoryAxis) {\r\n                    positionY = yAxis.categoryToPosition(dataItem[yField], bulletLocationY);\r\n                    var topLocation = this.getAdjustedYLocation(dataItem, yField, bullet.locationY);\r\n                    var bottomLocation = this.getAdjustedYLocation(dataItem, yOpenField, bullet.locationY);\r\n                    positionY = yAxis.categoryToPosition(dataItem[yField], topLocation);\r\n                    var openPositionY = void 0;\r\n                    if (yOpenField) {\r\n                        openPositionY = yAxis.categoryToPosition(dataItem[yOpenField], bottomLocation);\r\n                    }\r\n                    if (!$type.isNumber(openPositionY)) {\r\n                        openPositionY = 1;\r\n                    }\r\n                    positionY = openPositionY + (positionY - openPositionY) * bulletLocationY;\r\n                }\r\n                bullet.visible = true;\r\n                this.positionBulletReal(bullet, positionX, positionY);\r\n            }\r\n            else {\r\n                bullet.visible = false;\r\n            }\r\n        }\r\n    };\r\n    XYSeries.prototype.positionBulletReal = function (bullet, positionX, positionY) {\r\n        bullet.x = this.xAxis.renderer.positionToPoint(positionX, positionY).x;\r\n        bullet.y = this.yAxis.renderer.positionToPoint(positionY, positionX).y;\r\n    };\r\n    /**\r\n     * returns bullet x location\r\n     * @ignore\r\n     */\r\n    XYSeries.prototype.getBulletLocationX = function (bullet, field) {\r\n        var bulletLocation = bullet.locationX;\r\n        var dataItem = bullet.dataItem;\r\n        if (!$type.isNumber(bulletLocation)) {\r\n            bulletLocation = dataItem.workingLocations[field];\r\n        }\r\n        return bulletLocation;\r\n    };\r\n    /**\r\n     * Returns bullet x location\r\n     * @ignore\r\n     */\r\n    XYSeries.prototype.getBulletLocationY = function (bullet, field) {\r\n        var bulletLocation = bullet.locationY;\r\n        var dataItem = bullet.dataItem;\r\n        if (!$type.isNumber(bulletLocation)) {\r\n            bulletLocation = dataItem.workingLocations[field];\r\n        }\r\n        return bulletLocation;\r\n    };\r\n    /**\r\n     * This method must be called if you update Series' data fields that might\r\n     * affect stacking of the series.\r\n     *\r\n     * Since individual `dataField` changes are not being monitored, you need\r\n     * todo it manually for changes to take affect.\r\n     *\r\n     * @since 4.7.21\r\n     */\r\n    XYSeries.prototype.updateStacking = function () {\r\n        var _this = this;\r\n        this.invalidateDataItems();\r\n        if (this.chart) {\r\n            this.chart.series.each(function (series) {\r\n                if (series.baseAxis == _this.baseAxis) {\r\n                    series.stackedSeries = undefined;\r\n                    series.invalidateDataItems();\r\n                    series.invalidateProcessedData();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(XYSeries.prototype, \"stacked\", {\r\n        /**\r\n         * @return Can be stacked?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"stacked\");\r\n        },\r\n        /**\r\n         * Can items from this series be included into stacks?\r\n         *\r\n         * Note: proper stacking is only possible if series have the same number\r\n         * of data items. To ensure this, don't set data directly on series\r\n         * but do this on chart instead.\r\n         *\r\n         * @default false\r\n         * @param stacked  Can be stacked?\r\n         */\r\n        set: function (stacked) {\r\n            if (this.setPropertyValue(\"stacked\", stacked, true)) {\r\n                this.updateStacking();\r\n                var xAxis = this.xAxis;\r\n                var yAxis = this.yAxis;\r\n                if (!stacked) {\r\n                    var field_1;\r\n                    if (xAxis != this.baseAxis && xAxis instanceof ValueAxis) {\r\n                        field_1 = this.xField;\r\n                    }\r\n                    if (yAxis != this.baseAxis && yAxis instanceof ValueAxis) {\r\n                        field_1 = this.yField;\r\n                    }\r\n                    if (field_1) {\r\n                        this.dataItems.each(function (dataItem) {\r\n                            dataItem.setCalculatedValue(field_1, 0, \"stack\");\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"snapTooltip\", {\r\n        /**\r\n         * @return Should snap?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"snapTooltip\");\r\n        },\r\n        /**\r\n         * Should the nearest tooltip be shown if no data item is found on the\r\n         * current cursor position? In order this to work, you should set snapTooltip = false on the series baseAxis.\r\n         *\r\n         * @default false\r\n         * @param value  Should snap?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"snapTooltip\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Shows hidden series.\r\n     *\r\n     * @param duration  Duration of reveal animation (ms)\r\n     * @return Animation\r\n     */\r\n    XYSeries.prototype.show = function (duration) {\r\n        var _this = this;\r\n        var fields;\r\n        if (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n            fields = this._xValueFields;\r\n        }\r\n        if (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n            fields = this._yValueFields;\r\n        }\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        var delay = 0;\r\n        var interpolationDuration = this.defaultState.transitionDuration;\r\n        if ($type.isNumber(duration)) {\r\n            interpolationDuration = duration;\r\n        }\r\n        if (!options.animationsEnabled) {\r\n            interpolationDuration = 0;\r\n        }\r\n        var anim;\r\n        $iter.each($iter.indexed(this.dataItems.iterator()), function (a) {\r\n            var i = a[0];\r\n            var dataItem = a[1];\r\n            var realDuration = interpolationDuration;\r\n            if (i < _this.startIndex - 10 || i > _this.endIndex + 10) {\r\n                realDuration = 0;\r\n                delay = 0;\r\n            }\r\n            if (_this.sequencedInterpolation && realDuration > 0) {\r\n                delay = _this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n            }\r\n            anim = dataItem.show(realDuration, delay, fields);\r\n        });\r\n        // other data sets\r\n        this.dataSets.each(function (key, dataSet) {\r\n            if (dataSet != _this.dataItems) {\r\n                dataSet.each(function (dataItem) {\r\n                    dataItem.events.disable();\r\n                    dataItem.show(0, 0, fields);\r\n                    dataItem.events.enable();\r\n                });\r\n            }\r\n        });\r\n        if (this.mainDataSet != this.dataItems) {\r\n            this.mainDataSet.each(function (dataItem) {\r\n                dataItem.events.disable();\r\n                dataItem.show(0, 0, fields);\r\n                dataItem.events.enable();\r\n            });\r\n        }\r\n        var animation = _super.prototype.show.call(this, duration);\r\n        if (anim && !anim.isFinished()) {\r\n            animation = anim;\r\n        }\r\n        if (this.hidden) {\r\n            this.dispatchImmediately(\"selectionextremeschanged\");\r\n            this.hidden = false;\r\n        }\r\n        return animation;\r\n    };\r\n    /**\r\n     * Hides series.\r\n     *\r\n     * @param duration  Duration of hiding animation (ms)\r\n     * @return Animation\r\n     */\r\n    XYSeries.prototype.hide = function (duration) {\r\n        var _this = this;\r\n        var fields;\r\n        var value;\r\n        var xAxis = this.xAxis;\r\n        if (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n            fields = this._xValueFields;\r\n            // animate to zero if 0 is within zoomMin/zoomMax\r\n            if (this.stacked || (xAxis.minZoomed < xAxis.baseValue && xAxis.maxZoomed > xAxis.baseValue) || this.stackedSeries) {\r\n                value = xAxis.baseValue;\r\n            }\r\n            else {\r\n                value = xAxis.min;\r\n            }\r\n        }\r\n        var yAxis = this.yAxis;\r\n        if (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n            fields = this._yValueFields;\r\n            // animate to zero if 0 is within zoomMin/zoomMax\r\n            if (this.stacked || (yAxis.minZoomed < yAxis.baseValue && yAxis.maxZoomed > yAxis.baseValue) || this.stackedSeries) {\r\n                value = yAxis.baseValue;\r\n            }\r\n            else {\r\n                value = yAxis.min;\r\n            }\r\n        }\r\n        //if ($type.hasValue(fields)) {\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        var interpolationDuration = this.hiddenState.transitionDuration;\r\n        if ($type.isNumber(duration)) {\r\n            interpolationDuration = duration;\r\n        }\r\n        if (!options.animationsEnabled) {\r\n            interpolationDuration = 0;\r\n        }\r\n        var delay = 0;\r\n        var anim;\r\n        $iter.each($iter.indexed(this.dataItems.iterator()), function (a) {\r\n            var i = a[0];\r\n            var dataItem = a[1];\r\n            var realDuration = interpolationDuration;\r\n            if (i < _this.startIndex - 10 || i > _this.endIndex + 10) {\r\n                realDuration = 0;\r\n            }\r\n            if (realDuration == 0) {\r\n                dataItem.hide(0, 0, value, fields);\r\n            }\r\n            else {\r\n                if (_this.sequencedInterpolation && realDuration > 0) {\r\n                    delay = _this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n                }\r\n                anim = dataItem.hide(realDuration, delay, value, fields);\r\n            }\r\n        });\r\n        var animation = _super.prototype.hide.call(this, interpolationDuration);\r\n        if (animation && !animation.isFinished()) {\r\n            animation.delay(delay);\r\n        }\r\n        if (anim && !anim.isFinished()) {\r\n            animation = anim;\r\n        }\r\n        // helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n        this.validateDataElements();\r\n        //}\r\n        return animation;\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYSeries.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n        _super.prototype.handleDataItemWorkingValueChange.call(this, dataItem, name);\r\n        // to calculate stack values\r\n        var axisSeries = this.baseAxis.series;\r\n        $iter.each(axisSeries.iterator(), function (series) {\r\n            if (series.stacked || series.stackedSeries) {\r\n                series.invalidateProcessedData();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * [getStackValue description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param dataItem  Data item\r\n     */\r\n    XYSeries.prototype.getStackValue = function (dataItem, working) {\r\n        // todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n        // if this series is not stacked or new stack begins, return.\r\n        var _this = this;\r\n        var xAxis = this.xAxis;\r\n        var yAxis = this.yAxis;\r\n        if (!this.stacked || !xAxis || !yAxis) {\r\n            return;\r\n        }\r\n        else {\r\n            // it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n            var chart = this.chart;\r\n            var index = chart.series.indexOf(this);\r\n            var field_2;\r\n            if (xAxis != this.baseAxis && xAxis instanceof ValueAxis) {\r\n                field_2 = this.xField;\r\n            }\r\n            if (yAxis != this.baseAxis && yAxis instanceof ValueAxis) {\r\n                field_2 = this.yField;\r\n            }\r\n            if (!field_2) {\r\n                return;\r\n            }\r\n            //this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\t\t\t\r\n            dataItem.setCalculatedValue(field_2, 0, \"stack\");\r\n            $iter.eachContinue(chart.series.range(0, index).backwards().iterator(), function (prevSeries) {\r\n                // stacking is only possible if both axes are the same\r\n                if (prevSeries.xAxis == xAxis && prevSeries.yAxis == yAxis) {\r\n                    // saving value\r\n                    prevSeries.stackedSeries = _this;\r\n                    var prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n                    if (prevDataItem && prevDataItem.hasValue(_this._xValueFields) && prevDataItem.hasValue(_this._yValueFields)) {\r\n                        var value = dataItem.getValue(field_2);\r\n                        var prevValue = void 0;\r\n                        var prevRealValue = prevDataItem.getValue(field_2) + prevDataItem.getValue(field_2, \"stack\");\r\n                        if (working) {\r\n                            prevValue = prevDataItem.getWorkingValue(field_2) + prevDataItem.getValue(field_2, \"stack\");\r\n                        }\r\n                        else {\r\n                            prevValue = prevDataItem.getValue(field_2) + prevDataItem.getValue(field_2, \"stack\");\r\n                        }\r\n                        if ((value >= 0 && prevRealValue >= 0) || (value < 0 && prevRealValue < 0)) {\r\n                            //dataItem.events.disable();\r\n                            dataItem.setCalculatedValue(field_2, prevValue, \"stack\");\r\n                            //dataItem.events.enable();\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (!prevSeries.stacked) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(XYSeries.prototype, \"xField\", {\r\n        /**\r\n         * [xField description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._xField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"yField\", {\r\n        /**\r\n         * [yField description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._yField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"xOpenField\", {\r\n        /**\r\n         * [xOpenField description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._xOpenField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"yOpenField\", {\r\n        /**\r\n         * [yOpenField description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._yOpenField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"tooltipXField\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            if (this._tooltipXField) {\r\n                return this._tooltipXField;\r\n            }\r\n            return this._xField;\r\n        },\r\n        /**\r\n         * [tooltipXField description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @param value [description]\r\n         */\r\n        set: function (value) {\r\n            this._tooltipXField = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"tooltipYField\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            if (this._tooltipYField) {\r\n                return this._tooltipYField;\r\n            }\r\n            return this._yField;\r\n        },\r\n        /**\r\n         * [tooltipYField description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @param value [description]\r\n         */\r\n        set: function (value) {\r\n            this._tooltipYField = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns lowest value in the series for the specific axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axis  Axis\r\n     * @return value\r\n     */\r\n    XYSeries.prototype.min = function (axis) {\r\n        return this._tmin.getKey(axis.uid);\r\n    };\r\n    /**\r\n     * Returns highest value in the series for the specific axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axis  Axis\r\n     * @return value\r\n     */\r\n    XYSeries.prototype.max = function (axis) {\r\n        return this._tmax.getKey(axis.uid);\r\n    };\r\n    /**\r\n     * Returns lowest value in the series for the specific axis within current\r\n     * selection.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axis  Axis\r\n     * @return value\r\n     */\r\n    XYSeries.prototype.selectionMin = function (axis) {\r\n        var value = this._smin.getKey(axis.uid);\r\n        if (!$type.isNumber(value)) {\r\n            value = this.min(axis);\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Returns highest value in the series for the specific axis within current\r\n     * selection.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axis  Axis\r\n     * @return value\r\n     */\r\n    XYSeries.prototype.selectionMax = function (axis) {\r\n        var value = this._smax.getKey(axis.uid);\r\n        if (!$type.isNumber(value)) {\r\n            value = this.max(axis);\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    XYSeries.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up base axes\r\n            if ($type.hasValue(config.baseAxis) && $type.isString(config.baseAxis)) {\r\n                if (this.map.hasKey(config.baseAxis)) {\r\n                    config.baseAxis = this.map.getKey(config.baseAxis);\r\n                }\r\n                else {\r\n                    this.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.baseAxis + \"\\\" found for `baseAxis`.\");\r\n                    delete config.baseAxis;\r\n                }\r\n            }\r\n            // Set up axes\r\n            if ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n                if (this.map.hasKey(config.xAxis)) {\r\n                    config.xAxis = this.map.getKey(config.xAxis);\r\n                }\r\n                else {\r\n                    this.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`.\");\r\n                    delete config.xAxis;\r\n                }\r\n            }\r\n            if ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n                if (this.map.hasKey(config.yAxis)) {\r\n                    config.yAxis = this.map.getKey(config.yAxis);\r\n                }\r\n                else {\r\n                    this.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`.\");\r\n                    delete config.yAxis;\r\n                }\r\n            }\r\n            // Set up axis ranges\r\n            if ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n                for (var i = 0, len = config.axisRanges.length; i < len; i++) {\r\n                    var range = config.axisRanges[i];\r\n                    if (!$type.hasValue(range.type)) {\r\n                        range.type = \"AxisDataItem\";\r\n                    }\r\n                    if ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n                        range.component = this.map.getKey(range.axis);\r\n                    }\r\n                    else if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n                        range.component = this.map.getKey(range.component);\r\n                    }\r\n                }\r\n            }\r\n            // Parse date fields based on the series fields\r\n            if (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n                this.processingErrors.push(\"`dataFields` is not set for series [\" + (this.name || \"unnamed\") + \"]\");\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    /**\r\n     * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n     *\r\n     * @param    dataItem   Data item\r\n     * @param    xKey       Name of X data field\r\n     * @param    yKey       Name of Y data field\r\n     * @param    locationX  X location\r\n     * @param    locationY  Y location\r\n     * @param    stackKeyX  ?\r\n     * @param    stackKeyY  ?\r\n     * @returns             Coordinates\r\n     */\r\n    XYSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {\r\n        if (this.xAxis && this.yAxis) {\r\n            var x = this.xAxis.getX(dataItem, xKey, locationX);\r\n            var y = this.yAxis.getY(dataItem, yKey, locationY);\r\n            x = $math.fitToRange(x, -this._maxxX, this._maxxX); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n            y = $math.fitToRange(y, -this._maxxY, this._maxxY); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n            return { x: x, y: y };\r\n        }\r\n    };\r\n    /**\r\n     * Updates item reader text based on the type and set up of axis.\r\n     */\r\n    XYSeries.prototype.updateItemReaderText = function () {\r\n        // We do not want to overwrite this if `itemReaderText` was changed by\r\n        // user code.\r\n        if (this._itemReaderTextChanged) {\r\n            return;\r\n        }\r\n        var text = \"\";\r\n        $object.each(this.dataFields, function (key, val) {\r\n            text += \"{\" + key + \"} \";\r\n        });\r\n        this.itemReaderText = text;\r\n        this._itemReaderTextChanged = false;\r\n    };\r\n    Object.defineProperty(XYSeries.prototype, \"cursorTooltipEnabled\", {\r\n        /**\r\n         * @return Display tooltip?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cursorTooltipEnabled\");\r\n        },\r\n        /**\r\n         * Indicates if series should display a tooltip for chart's cursor.\r\n         *\r\n         * If set to `true` (default), the tooltips set for all series item's\r\n         * elements like columns and bullets will be automatically shown\r\n         * when [[XYCursor]] passes over category/date, even if its not hovered\r\n         * directly over the item.\r\n         *\r\n         * Set this to `false` to disable such behavior and display item-specific\r\n         * tooltips only when hovered directly over them\r\n         *\r\n         * @default true\r\n         * @param value Display tooltip?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cursorTooltipEnabled\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"cursorHoverEnabled\", {\r\n        /**\r\n         * @return Hover enabled?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cursorHoverEnabled\");\r\n        },\r\n        /**\r\n         * Indicates if series should apply hover state on bullets/columns/etc when\r\n         * cursor is over the data item.\r\n         *\r\n         * If set to `true` (default) and chart cursor is enabled on th chart,\r\n         * hovering over date/category will trigger hover states on related Series\r\n         * items like bullets and columns.\r\n         *\r\n         * @default true\r\n         * @since 4.2.2\r\n         * @param  value  Hover enabled?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cursorHoverEnabled\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"excludeFromTotal\", {\r\n        /**\r\n         * @return Exclude from totals?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"excludeFromTotal\");\r\n        },\r\n        /**\r\n         * Indicates if series' values should be excluded when calculating totals.\r\n         *\r\n         * @default false\r\n         * @since 4.4.9\r\n         * @param  value  Exclude from totals?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"excludeFromTotal\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"hideTooltipWhileZooming\", {\r\n        /**\r\n         * @return Hide tooltip while zooming?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hideTooltipWhileZooming\");\r\n        },\r\n        /**\r\n         * Indicates if series' tooltip should be hidden while series axis range is\r\n         * animating (zooming).\r\n         *\r\n         * @default true\r\n         * @since 4.7.16\r\n         * @param  value  Hide tooltip while zooming?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"hideTooltipWhileZooming\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"maskBullets\", {\r\n        /**\r\n         * @return Mask bullets?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maskBullets\");\r\n        },\r\n        /**\r\n         * Indicates if series' bullets should be masked.\r\n         *\r\n         * @default true\r\n         * @since 4.7.17\r\n         * @param  value  Mask bullets?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maskBullets\", value);\r\n            var chart = this.chart;\r\n            if (chart) {\r\n                if (value) {\r\n                    this.bulletsContainer.parent = chart.bulletsContainer;\r\n                }\r\n                else {\r\n                    this.bulletsContainer.parent = chart.axisBulletsContainer;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all properties from another instance of [[Series]].\r\n     *\r\n     * @param source  Source series\r\n     */\r\n    XYSeries.prototype.copyFrom = function (source) {\r\n        this.groupFields = $utils.copyProperties(source.groupFields, {});\r\n        _super.prototype.copyFrom.call(this, source);\r\n    };\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    XYSeries.prototype.dispose = function () {\r\n        if (this.scrollbarSeries) {\r\n            this.scrollbarSeries.dispose();\r\n        }\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    return XYSeries;\r\n}(Series));\r\nexport { XYSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n//# sourceMappingURL=XYSeries.js.map","/**\r\n * Chord diagram module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo rearange notes after dragged\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar ChordDiagramDataItem = /** @class */ (function (_super) {\r\n    __extends(ChordDiagramDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordDiagramDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ChordDiagramDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return ChordDiagramDataItem;\r\n}(FlowDiagramDataItem));\r\nexport { ChordDiagramDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nvar ChordDiagram = /** @class */ (function (_super) {\r\n    __extends(ChordDiagram, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordDiagram() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * [valueAngle description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.valueAngle = 0;\r\n        _this.className = \"ChordDiagram\";\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        _this.radius = percent(80);\r\n        _this.innerRadius = -15;\r\n        _this.nodePadding = 5;\r\n        var chordContainer = _this.chartContainer.createChild(Container);\r\n        chordContainer.align = \"center\";\r\n        chordContainer.valign = \"middle\";\r\n        chordContainer.shouldClone = false;\r\n        chordContainer.layout = \"absolute\";\r\n        _this.chordContainer = chordContainer;\r\n        _this.nodesContainer.parent = chordContainer;\r\n        _this.linksContainer.parent = chordContainer;\r\n        _this.chartContainer.events.on(\"maxsizechanged\", _this.invalidate, _this, false);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Redraws the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ChordDiagram.prototype.validate = function () {\r\n        var _this = this;\r\n        var chartContainer = this.chartContainer;\r\n        var endAngle = this.endAngle;\r\n        var startAngle = this.startAngle + this.nodePadding / 2;\r\n        var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n        var innerRect = { x: 0, y: 0, width: 0, height: 0 };\r\n        rect = $math.getCommonRectangle([rect, innerRect]);\r\n        var maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n        if (!$type.isNumber(maxRadius)) {\r\n            maxRadius = 0;\r\n        }\r\n        var radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n        var pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n        var total = this.dataItem.values.value.sum;\r\n        var count = 0;\r\n        var newTotal = 0;\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            _this.getNodeValue(node);\r\n            count++;\r\n            var value = node.total;\r\n            if (node.total / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            newTotal += value;\r\n        });\r\n        this.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            var slice = node.slice;\r\n            slice.radius = radius;\r\n            slice.innerRadius = pixelInnerRadius;\r\n            var value = node.total;\r\n            if (node.total / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            node.adjustedTotal = value;\r\n            var arc;\r\n            if (_this.nonRibbon) {\r\n                arc = (endAngle - _this.startAngle) / count - _this.nodePadding;\r\n            }\r\n            else {\r\n                arc = _this.valueAngle * value;\r\n            }\r\n            slice.arc = arc;\r\n            slice.startAngle = startAngle;\r\n            node.trueStartAngle = startAngle;\r\n            node.parent = _this.nodesContainer;\r\n            node.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n            startAngle += arc + _this.nodePadding;\r\n        });\r\n        this.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n        this.chordContainer.invalidateLayout();\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    ChordDiagram.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Chord diagram\");\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new data item.\r\n     *\r\n     * @return Data item\r\n     */\r\n    ChordDiagram.prototype.createDataItem = function () {\r\n        return new ChordDiagramDataItem();\r\n    };\r\n    Object.defineProperty(ChordDiagram.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Radar face. (degrees)\r\n         *\r\n         * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n         * top center. (at -90 degrees)\r\n         *\r\n         * You can use `startAngle` to change this setting.\r\n         *\r\n         * E.g. setting this to 0 will make the radial axis start horizontally to\r\n         * the right, as opposed to vertical.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set those to lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * @default -90\r\n         * @param value  Start angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Radar face. (degrees)\r\n         *\r\n         * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n         * where it has started, forming a full 360 circle. (at 270 degrees)\r\n         *\r\n         * You can use `endAngle` to end the circle somewhere else.\r\n         *\r\n         * E.g. setting this to 180 will make the radar face end at horizontal line\r\n         * to the left off the center.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set those to lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * @default -90\r\n         * @param value  End angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the Radar face.\r\n         *\r\n         * This can either be in absolute pixel value, or relative [[Percent]].\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the Chord nodes.\r\n         *\r\n         * This can either be in absolute pixel value, or relative [[Percent]].\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"nonRibbon\", {\r\n        /**\r\n         * @return Non-ribbon\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nonRibbon\");\r\n        },\r\n        /**\r\n         *\r\n         * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n         *\r\n         * @param value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"nonRibbon\", value, true);\r\n            this.links.template.middleLine.strokeOpacity = 1;\r\n            this.links.template.link.fillOpacity = 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    ChordDiagram.prototype.createNode = function () {\r\n        var node = new ChordNode();\r\n        this._disposers.push(node);\r\n        return node;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    ChordDiagram.prototype.createLink = function () {\r\n        var link = new ChordLink();\r\n        this._disposers.push(link);\r\n        return link;\r\n    };\r\n    return ChordDiagram;\r\n}(FlowDiagram));\r\nexport { ChordDiagram };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n//# sourceMappingURL=ChordDiagram.js.map","/**\r\n * FlowDiagram module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\r\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo rearange notes after dragged\r\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar FlowDiagramDataItem = /** @class */ (function (_super) {\r\n    __extends(FlowDiagramDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FlowDiagramDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"FlowDiagramDataItem\";\r\n        _this.values.value = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"fromName\", {\r\n        /**\r\n         * @return name\r\n         */\r\n        get: function () {\r\n            return this.properties.fromName;\r\n        },\r\n        /**\r\n         * Source node's name.\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"fromName\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"toName\", {\r\n        /**\r\n         * @return name\r\n         */\r\n        get: function () {\r\n            return this.properties.toName;\r\n        },\r\n        /**\r\n         * Destination node's name.\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"toName\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"color\", {\r\n        /**\r\n         * @return color\r\n         */\r\n        get: function () {\r\n            return this.properties.color;\r\n        },\r\n        /**\r\n         * Node color\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"color\", toColor(value));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.value.value;\r\n        },\r\n        /**\r\n         * Link's value.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"link\", {\r\n        /**\r\n         * A visual element, representing link between the source and target nodes.\r\n         *\r\n         * Link's actual thickness will be determined by `value` of this link and\r\n         * `value` of the source node.\r\n         *\r\n         * @readonly\r\n         * @return Link element\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._link) {\r\n                var link_1 = this.component.links.create();\r\n                this._link = link_1;\r\n                this.addSprite(link_1);\r\n                this._disposers.push(new Disposer(function () {\r\n                    if (_this.component) {\r\n                        _this.component.links.removeValue(link_1);\r\n                    }\r\n                }));\r\n            }\r\n            return this._link;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FlowDiagramDataItem;\r\n}(ChartDataItem));\r\nexport { FlowDiagramDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar FlowDiagram = /** @class */ (function (_super) {\r\n    __extends(FlowDiagram, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FlowDiagram() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A Color Set to use when applying/generating colors for each subsequent\r\n         * node.\r\n         */\r\n        _this.colors = new ColorSet();\r\n        _this.className = \"FlowDiagram\";\r\n        _this.nodePadding = 20;\r\n        _this.sortBy = \"none\";\r\n        _this.sequencedInterpolation = true;\r\n        _this.colors.step = 2;\r\n        _this.minNodeSize = 0.02;\r\n        var linksContainer = _this.chartContainer.createChild(Container);\r\n        linksContainer.shouldClone = false;\r\n        linksContainer.layout = \"none\";\r\n        linksContainer.isMeasured = false;\r\n        _this.linksContainer = linksContainer;\r\n        var nodesContainer = _this.chartContainer.createChild(Container);\r\n        nodesContainer.shouldClone = false;\r\n        nodesContainer.layout = \"none\";\r\n        nodesContainer.isMeasured = false;\r\n        _this.nodesContainer = nodesContainer;\r\n        // this data item holds sums, averages, etc\r\n        _this.dataItem = _this.createDataItem();\r\n        _this.dataItem.component = _this;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    FlowDiagram.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        this.dataItem.dispose();\r\n    };\r\n    /**\r\n     * (Re)validates chart's data, effectively causing the chart to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagram.prototype.validateData = function () {\r\n        var _this = this;\r\n        if (this._parseDataFrom == 0) {\r\n            this.nodes.clear();\r\n        }\r\n        this.sortNodes();\r\n        this.colors.reset();\r\n        _super.prototype.validateData.call(this);\r\n        var sum = 0;\r\n        var count = 0;\r\n        var low;\r\n        var high;\r\n        // build blocks\r\n        $iter.each(this.dataItems.iterator(), function (dataItem) {\r\n            var fromName = dataItem.fromName;\r\n            if (fromName) {\r\n                var node = _this.nodes.getKey(fromName);\r\n                if (!node) {\r\n                    node = _this.nodes.create(fromName);\r\n                    node.name = fromName;\r\n                    node.chart = _this;\r\n                    node.dataItem = dataItem;\r\n                }\r\n                dataItem.fromNode = node;\r\n                dataItem.fromNode.outgoingDataItems.push(dataItem);\r\n            }\r\n            var toName = dataItem.toName;\r\n            if (toName) {\r\n                var node = _this.nodes.getKey(toName);\r\n                if (!node) {\r\n                    node = _this.nodes.create(toName);\r\n                    node.name = toName;\r\n                    node.chart = _this;\r\n                    node.dataItem = dataItem;\r\n                }\r\n                dataItem.toNode = node;\r\n                dataItem.toNode.incomingDataItems.push(dataItem);\r\n            }\r\n            if (!dataItem.fromNode) {\r\n                var strokeModifier = new LinearGradientModifier();\r\n                strokeModifier.opacities = [0, 1];\r\n                dataItem.link.strokeModifier = strokeModifier;\r\n            }\r\n            if (!dataItem.toNode) {\r\n                var fillModifier = new LinearGradientModifier();\r\n                fillModifier.opacities = [1, 0];\r\n                dataItem.link.strokeModifier = fillModifier;\r\n            }\r\n            var value = dataItem.value;\r\n            if ($type.isNumber(value)) {\r\n                sum += value;\r\n                count++;\r\n                if (low > value || !$type.isNumber(low)) {\r\n                    low = value;\r\n                }\r\n                if (high < value || !$type.isNumber(high)) {\r\n                    high = value;\r\n                }\r\n            }\r\n        });\r\n        var key = \"value\";\r\n        this.dataItem.setCalculatedValue(key, high, \"high\");\r\n        this.dataItem.setCalculatedValue(key, low, \"low\");\r\n        this.dataItem.setCalculatedValue(key, sum, \"sum\");\r\n        this.dataItem.setCalculatedValue(key, sum / count, \"average\");\r\n        this.dataItem.setCalculatedValue(key, count, \"count\");\r\n        $iter.each(this.nodes.iterator(), function (strNode) {\r\n            var node = strNode[1];\r\n            if (node.fill instanceof Color) {\r\n                node.color = node.fill;\r\n            }\r\n            if (node.color == undefined) {\r\n                node.color = _this.colors.next();\r\n            }\r\n            if (node.dataItem.color != undefined) {\r\n                node.color = node.dataItem.color;\r\n            }\r\n            if (!node.dataItem.visible) {\r\n                node.hide(0);\r\n            }\r\n            _this.getNodeValue(node);\r\n        });\r\n        this.sortNodes();\r\n        this.feedLegend();\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagram.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n     */\r\n    FlowDiagram.prototype.sortNodes = function () {\r\n        if (this.sortBy == \"name\") {\r\n            this._sorted = this.nodes.sortedIterator();\r\n        }\r\n        else if (this.sortBy == \"value\") {\r\n            this._sorted = $iter.sort(this.nodes.iterator(), function (x, y) { return $order.reverse($number.order(x[1].total, y[1].total)); });\r\n        }\r\n        else {\r\n            this._sorted = this.nodes.iterator();\r\n        }\r\n    };\r\n    /**\r\n     * Updates a cummulative value of the node.\r\n     *\r\n     * A node's value is determined by summing values of all of the incoming\r\n     * links or all of the outgoing links, whichever results in bigger number.\r\n     *\r\n     * @param node  Node value\r\n     */\r\n    FlowDiagram.prototype.getNodeValue = function (node) {\r\n        // todo: totalIncomming totalOutgoing, total\r\n        var incomingTotal = 0;\r\n        var outgoingTotal = 0;\r\n        $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\r\n            var value = dataItem.getWorkingValue(\"value\");\r\n            if ($type.isNumber(value)) {\r\n                incomingTotal += value;\r\n            }\r\n        });\r\n        $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\r\n            var value = dataItem.getWorkingValue(\"value\");\r\n            if ($type.isNumber(value)) {\r\n                outgoingTotal += value;\r\n            }\r\n        });\r\n        node.total = incomingTotal + outgoingTotal;\r\n        node.totalIncoming = incomingTotal;\r\n        node.totalOutgoing = outgoingTotal;\r\n    };\r\n    ;\r\n    /**\r\n     * Changes the sort type of the nodes.\r\n     *\r\n     * This will actually reshuffle nodes using nice animation.\r\n     */\r\n    FlowDiagram.prototype.changeSorting = function () {\r\n        this.sortNodes();\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    FlowDiagram.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Flow diagram\");\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new data item.\r\n     *\r\n     * @return Data item\r\n     */\r\n    FlowDiagram.prototype.createDataItem = function () {\r\n        return new FlowDiagramDataItem();\r\n    };\r\n    Object.defineProperty(FlowDiagram.prototype, \"nodePadding\", {\r\n        /**\r\n         * @return Padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nodePadding\");\r\n        },\r\n        /**\r\n         * Padding for node square in pixels.\r\n         *\r\n         * Padding will add extra space around node's name label.\r\n         *\r\n         * @param value Padding (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"nodePadding\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagram.prototype, \"sortBy\", {\r\n        /**\r\n         * @returns Node sorting\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"sortBy\");\r\n        },\r\n        /**\r\n         * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n         * @default \"none\"\r\n         * @param value  Node sorting\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"sortBy\", value);\r\n            this.changeSorting();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagram.prototype, \"minNodeSize\", {\r\n        /**\r\n         * @returns min node size\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minNodeSize\");\r\n        },\r\n        /**\r\n         * Sometimes nodes can get very small if their value is little. With this setting you\r\n         * can set min size of a node (this is relative value from the total size of all nodes)\r\n         * @default 0.02\r\n         * @param value  Node sorting\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minNodeSize\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagram.prototype, \"nodes\", {\r\n        /**\r\n         * A list of chart's nodes.\r\n         *\r\n         * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n         */\r\n        get: function () {\r\n            if (!this._nodes) {\r\n                var template = this.createNode();\r\n                template.events.on(\"hit\", function (event) {\r\n                    event.target.handleHit(event);\r\n                });\r\n                this._nodes = new DictionaryTemplate(template);\r\n                this._disposers.push(new DictionaryDisposer(this._nodes));\r\n            }\r\n            return this._nodes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.createNode = function () {\r\n        var node = new FlowDiagramNode();\r\n        this._disposers.push(node);\r\n        return node;\r\n    };\r\n    Object.defineProperty(FlowDiagram.prototype, \"links\", {\r\n        /**\r\n         * A list of chart's links.\r\n         *\r\n         * @param {ListTemplate<this[\"_link\"]>}\r\n         */\r\n        get: function () {\r\n            if (!this._links) {\r\n                this._links = new ListTemplate(this.createLink());\r\n                this._disposers.push(new ListDisposer(this._links));\r\n            }\r\n            return this._links;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.createLink = function () {\r\n        var link = new FlowDiagramLink();\r\n        this._disposers.push(link);\r\n        return link;\r\n    };\r\n    /**\r\n     * Setups the legend to use the chart's data.\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.feedLegend = function () {\r\n        var legend = this.legend;\r\n        if (legend) {\r\n            var legendData_1 = [];\r\n            this.nodes.each(function (key, node) {\r\n                legendData_1.push(node);\r\n            });\r\n            legend.data = legendData_1;\r\n            legend.dataFields.name = \"name\";\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this.nodes.clear();\r\n    };\r\n    return FlowDiagram;\r\n}(Chart));\r\nexport { FlowDiagram };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;\r\n//# sourceMappingURL=FlowDiagram.js.map","/**\r\n * Module for building Gauge charts.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, RadarChartDataItem } from \"./RadarChart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar GaugeChartDataItem = /** @class */ (function (_super) {\r\n    __extends(GaugeChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function GaugeChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"GaugeChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return GaugeChartDataItem;\r\n}(RadarChartDataItem));\r\nexport { GaugeChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nvar GaugeChart = /** @class */ (function (_super) {\r\n    __extends(GaugeChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function GaugeChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"GaugeChart\";\r\n        _this.startAngle = 180;\r\n        _this.endAngle = 360;\r\n        _this.hands = new ListTemplate(new ClockHand());\r\n        _this.hands.events.on(\"inserted\", _this.processHand, _this, false);\r\n        _this._disposers.push(new ListDisposer(_this.hands));\r\n        _this._disposers.push(_this.hands.template);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    GaugeChart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Gauge chart\");\r\n        }\r\n    };\r\n    /**\r\n     * Decorates a [[ClockHand]] when it is added to the chart.\r\n     *\r\n     * @param event  Event\r\n     */\r\n    GaugeChart.prototype.processHand = function (event) {\r\n        var hand = event.newValue;\r\n        if (!hand.axis) {\r\n            hand.axis = this.xAxes.getIndex(0);\r\n        }\r\n    };\r\n    /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param a  Element 1\r\n     * @param b  Element 2\r\n     * @return Sorting number\r\n     */\r\n    GaugeChart.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        // Must come last\r\n        else if (a == \"hands\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"hands\") {\r\n            return -1;\r\n        }\r\n        else {\r\n            return _super.prototype.configOrder.call(this, a, b);\r\n        }\r\n    };\r\n    return GaugeChart;\r\n}(RadarChart));\r\nexport { GaugeChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n//# sourceMappingURL=GaugeChart.js.map","/**\r\n * Percent chart module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\r\nimport { PercentSeries } from \"../series/PercentSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PercentChartDataItem = /** @class */ (function (_super) {\r\n    __extends(PercentChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PercentChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PercentChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PercentChartDataItem;\r\n}(SerialChartDataItem));\r\nexport { PercentChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nvar PercentChart = /** @class */ (function (_super) {\r\n    __extends(PercentChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PercentChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"PercentChart\";\r\n        _this.align = \"none\";\r\n        _this.valign = \"none\";\r\n        // so that the chart is always drawn, even the legend wants all the space\r\n        _this.chartContainer.minHeight = 50;\r\n        _this.chartContainer.minWidth = 50;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates chart data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PercentChart.prototype.validateData = function () {\r\n        _super.prototype.validateData.call(this);\r\n        this.feedLegend();\r\n    };\r\n    /**\r\n     * Setups the legend to use the chart's data.\r\n     * @ignore\r\n     */\r\n    PercentChart.prototype.feedLegend = function () {\r\n        var legend = this.legend;\r\n        if (legend) {\r\n            var legendData_1 = [];\r\n            $iter.each(this.series.iterator(), function (series) {\r\n                if (!series.hiddenInLegend) {\r\n                    $iter.each(series.dataItems.iterator(), function (dataItem) {\r\n                        if (!dataItem.hiddenInLegend) {\r\n                            legendData_1.push(dataItem);\r\n                            if (!dataItem.legendSettings) {\r\n                                dataItem.legendSettings = series.legendSettings;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            legend.data = legendData_1;\r\n            legend.dataFields.name = \"category\";\r\n        }\r\n    };\r\n    /**\r\n     * Creates a new [[PercentSeries]].\r\n     *\r\n     * @return New series\r\n     */\r\n    PercentChart.prototype.createSeries = function () {\r\n        return new PercentSeries();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    PercentChart.prototype.setLegend = function (legend) {\r\n        _super.prototype.setLegend.call(this, legend);\r\n        if (legend) {\r\n            legend.labels.template.text = \"{category}\";\r\n            legend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n            legend.itemContainers.template.events.on(\"over\", function (event) {\r\n                var percentSeriesDataItem = event.target.dataItem.dataContext;\r\n                if (percentSeriesDataItem.visible && !percentSeriesDataItem.isHiding) {\r\n                    var slice = percentSeriesDataItem.slice;\r\n                    slice.dispatchImmediately(\"over\");\r\n                    slice.isHover = true;\r\n                    slice.interactions.isRealHover = true;\r\n                }\r\n            });\r\n            legend.itemContainers.template.events.on(\"out\", function (event) {\r\n                var percentSeriesDataItem = event.target.dataItem.dataContext;\r\n                var slice = percentSeriesDataItem.slice;\r\n                slice.dispatchImmediately(\"out\");\r\n                slice.isHover = false;\r\n            });\r\n        }\r\n    };\r\n    return PercentChart;\r\n}(SerialChart));\r\nexport { PercentChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\r\n//# sourceMappingURL=PercentChart.js.map","/**\r\n * Pie chart module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, PercentChartDataItem } from \"./PercentChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries } from \"../series/PieSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PieChartDataItem = /** @class */ (function (_super) {\r\n    __extends(PieChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PieChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PieChartDataItem;\r\n}(PercentChartDataItem));\r\nexport { PieChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nvar PieChart = /** @class */ (function (_super) {\r\n    __extends(PieChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"PieChart\";\r\n        // Set defaults\r\n        _this.innerRadius = 0;\r\n        _this.radius = percent(80);\r\n        _this.align = \"none\";\r\n        _this.valign = \"none\";\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        var seriesContainer = _this.seriesContainer;\r\n        seriesContainer.isMeasured = true;\r\n        seriesContainer.valign = \"middle\";\r\n        seriesContainer.align = \"center\";\r\n        seriesContainer.layout = \"absolute\";\r\n        seriesContainer.width = undefined;\r\n        seriesContainer.height = undefined;\r\n        // so that the pie is always drawn, even the legend wants all the space\r\n        _this.chartContainer.minHeight = 50;\r\n        _this.chartContainer.minWidth = 50;\r\n        _this.chartContainer.events.on(\"maxsizechanged\", _this.updateRadius, _this, false); // need this for the chart to change radius if legend is removed/disabled\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    PieChart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Pie chart\");\r\n        }\r\n    };\r\n    /**\r\n     * (Re)validates the chart, causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PieChart.prototype.validateLayout = function () {\r\n        _super.prototype.validateLayout.call(this);\r\n        this.updateRadius();\r\n    };\r\n    /**\r\n     * Decorates a new [[Series]] object with required parameters when it is\r\n     * added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Event\r\n     */\r\n    PieChart.prototype.handleSeriesAdded = function (event) {\r\n        _super.prototype.handleSeriesAdded.call(this, event);\r\n        this._chartPixelRadius = undefined;\r\n        this.updateSeriesAngles();\r\n    };\r\n    PieChart.prototype.updateSeriesAngles = function () {\r\n        var _this = this;\r\n        this.series.each(function (series) {\r\n            series._startAngleInternal = _this.startAngle;\r\n            series._endAngleInternal = _this.endAngle;\r\n            //series.defaultState.properties.startAngle = this.startAngle;\r\n            //series.defaultState.properties.endAngle = this.endAngle;\r\n        });\r\n    };\r\n    /**\r\n     * Recalculates pie's radius, based on a number of criteria.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PieChart.prototype.updateRadius = function () {\r\n        var chartCont = this.chartContainer;\r\n        var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n        var innerRect = { x: 0, y: 0, width: 0, height: 0 };\r\n        var innerRadius = this.innerRadius;\r\n        if (innerRadius instanceof Percent) {\r\n            innerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n        }\r\n        // @todo handle this when innerRadius set in pixels (do it for radar also)\r\n        rect = $math.getCommonRectangle([rect, innerRect]);\r\n        var maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n        if (!$type.isNumber(maxRadius)) {\r\n            maxRadius = 0;\r\n        }\r\n        var chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n        var chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n        var seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n        if (chartRadius != this._chartPixelRadius || chartPixelInnerRadius != this._chartPixelInnerRadius) {\r\n            this._chartPixelRadius = chartRadius;\r\n            this._chartPixelInnerRadius = chartPixelInnerRadius;\r\n            //@todo: make it possible to set series radius in percent\r\n            $iter.each($iter.indexed(this.series.iterator()), function (a) {\r\n                var i = a[0];\r\n                var series = a[1];\r\n                var radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n                var innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n                if (!$type.isNumber(radius)) {\r\n                    radius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n                }\r\n                if (!$type.isNumber(innerRadius)) {\r\n                    innerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n                }\r\n                series.pixelRadius = radius;\r\n                series.pixelInnerRadius = innerRadius;\r\n            });\r\n            this.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n            this.seriesContainer.invalidateLayout();\r\n            this.bulletsContainer.x = this.seriesContainer.x;\r\n            this.bulletsContainer.y = this.seriesContainer.y;\r\n        }\r\n    };\r\n    Object.defineProperty(PieChart.prototype, \"radius\", {\r\n        /**\r\n         * @return Radius (px or relative)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Sets radius of the pie chart.\r\n         *\r\n         * Setting to a number will mean a fixed pixel radius.\r\n         *\r\n         * Setting to an instance of [[Percent]] will mean a relative radius to\r\n         * available space.\r\n         *\r\n         * E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * // Set pie chart to be at 50% of the available space\r\n         * pieChart.radius = am4core.percent.percent(50);\r\n         * ```\r\n         * ```JavaScript\r\n         * // Set pie chart to be at 50% of the available space\r\n         * pieChart.radius = am4core.percent.percent(50);\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // Set pie chart to be at 50% of the available space\r\n         *   \"radius\": \"50%\"\r\n         * }\r\n         * ```\r\n         *\r\n         * @default 80%\r\n         * @param value  Radius (px or relative)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n                this.invalidateLayout();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieChart.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Relative inner radius (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Sets relative inner radius (to create a donut chart).\r\n         *\r\n         * Setting to a number will mean a fixed pixel radius.\r\n         *\r\n         * Setting to an instance of [[Percent]] will mean a relative radius to\r\n         * available space.\r\n         *\r\n         * NOTE: it's not related to `radius`.\r\n         *\r\n         * E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * // Set pie chart to be at 50% of the available space\r\n         * pieChart.innerRadius = am4core.percent.percent(50);\r\n         * ```\r\n         * ```JavaScript\r\n         * // Set pie chart to be at 50% of the available space\r\n         * pieChart.innerRadius = am4core.percent.percent(50);\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // Set pie chart to be at 50% of the available space\r\n         *   \"innerRadius\": \"50%\"\r\n         * }\r\n         * ```\r\n         *\r\n         * @default 0\r\n         * @param value  Relative inner radius (0-1)\r\n         * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a new [[PieSeries]].\r\n     *\r\n     * @return New series\r\n     */\r\n    PieChart.prototype.createSeries = function () {\r\n        return new PieSeries();\r\n    };\r\n    Object.defineProperty(PieChart.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Pie circle. (degrees)\r\n         *\r\n         * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n         * at the top center. (at -90 degrees)\r\n         *\r\n         * You can use `startAngle` to change this setting.\r\n         *\r\n         * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set to those lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * NOTE: This setting is not supported in a 3D pie chart.\r\n         *\r\n         * @default -90\r\n         * @param value  Start angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startAngle\", value)) {\r\n                this.updateRadius();\r\n                this.updateSeriesAngles();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieChart.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle of the Pie circle. (degrees)\r\n         *\r\n         * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n         * at the top center. (at 270 degrees)\r\n         *\r\n         * You can use `endAngle` to change this setting.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set to those lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * NOTE: This setting is not supported in a 3D pie chart.\r\n         *\r\n         * @default 270\r\n         * @param value  End angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endAngle\", value)) {\r\n                this.updateRadius();\r\n                this.updateSeriesAngles();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PieChart;\r\n}(PercentChart));\r\nexport { PieChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n//# sourceMappingURL=PieChart.js.map","/**\r\n * 3D Pie chart module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PieChart, PieChartDataItem } from \"./PieChart\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PieChart3DDataItem = /** @class */ (function (_super) {\r\n    __extends(PieChart3DDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieChart3DDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PieChart3DDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PieChart3DDataItem;\r\n}(PieChartDataItem));\r\nexport { PieChart3DDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nvar PieChart3D = /** @class */ (function (_super) {\r\n    __extends(PieChart3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieChart3D() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"PieChart3D\";\r\n        _this.depth = 20;\r\n        _this.angle = 10;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(PieChart3D.prototype, \"depth\", {\r\n        /**\r\n         * @return Depth (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"depth\");\r\n        },\r\n        /**\r\n         * Depth of the 3D pie in pixels.\r\n         *\r\n         * This will determine \"height\" of the pie.\r\n         *\r\n         * @default 20\r\n         * @param value  Depth (px)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"depth\", value)) {\r\n                this.invalidateDataUsers();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieChart3D.prototype, \"angle\", {\r\n        /**\r\n         * @return Angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"angle\");\r\n        },\r\n        /**\r\n         * An angle of a \"point of view\" in degrees. Possible range 0 - 90.\r\n         *\r\n         * @default 10\r\n         * @param value  Angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            value = $math.fitToRange(value, 0, 90);\r\n            if (this.setPropertyValue(\"angle\", value)) {\r\n                this.invalidateDataUsers();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and returns a new Series.\r\n     *\r\n     * @return New series\r\n     */\r\n    PieChart3D.prototype.createSeries = function () {\r\n        return new PieSeries3D();\r\n    };\r\n    return PieChart3D;\r\n}(PieChart));\r\nexport { PieChart3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n//# sourceMappingURL=PieChart3D.js.map","/**\r\n * Radar chart module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar RadarChartDataItem = /** @class */ (function (_super) {\r\n    __extends(RadarChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"RadarChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return RadarChartDataItem;\r\n}(XYChartDataItem));\r\nexport { RadarChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nvar RadarChart = /** @class */ (function (_super) {\r\n    __extends(RadarChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Defines X axis renderer type.\r\n         */\r\n        _this._axisRendererX = AxisRendererCircular;\r\n        /**\r\n         * Defines Y axis renderer type.\r\n         */\r\n        _this._axisRendererY = AxisRendererRadial;\r\n        /**\r\n         * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.innerRadiusModifyer = 1;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.mr = 1;\r\n        _this.className = \"RadarChart\";\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        _this.radius = percent(80);\r\n        _this.innerRadius = 0;\r\n        var radarContainer = _this.plotContainer.createChild(Container);\r\n        radarContainer.shouldClone = false;\r\n        radarContainer.layout = \"absolute\";\r\n        radarContainer.align = \"center\";\r\n        radarContainer.valign = \"middle\";\r\n        _this.seriesContainer.parent = radarContainer;\r\n        _this.radarContainer = radarContainer;\r\n        _this.bulletsContainer.parent = radarContainer;\r\n        _this.axisBulletsContainer = radarContainer;\r\n        _this._cursorContainer = radarContainer;\r\n        _this.chartContainer.events.on(\"maxsizechanged\", _this.invalidate, _this, false); // need this for the chart to change radius if legend is removed/disabled\r\n        _this._bulletMask = radarContainer.createChild(Circle);\r\n        _this._bulletMask.shouldClone = false;\r\n        _this._bulletMask.element = _this.paper.add(\"path\");\r\n        _this._bulletMask.opacity = 0;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    RadarChart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Radar chart\");\r\n        }\r\n    };\r\n    /**\r\n     * Decorates Axis with required properties for this chart.\r\n     *\r\n     * @param axis  Axis\r\n     */\r\n    RadarChart.prototype.processAxis = function (axis) {\r\n        _super.prototype.processAxis.call(this, axis);\r\n        var renderer = axis.renderer;\r\n        renderer.gridContainer.parent = renderer;\r\n        renderer.breakContainer.parent = renderer;\r\n        axis.parent = this.radarContainer;\r\n        renderer.toBack();\r\n    };\r\n    /**\r\n     * Updates all X axes after range change event.\r\n     */\r\n    RadarChart.prototype.handleXAxisRangeChange = function () {\r\n        _super.prototype.handleXAxisRangeChange.call(this);\r\n        $iter.each(this.yAxes.iterator(), function (axis) {\r\n            axis.invalidate();\r\n        });\r\n    };\r\n    /**\r\n     * Updates all Y axes after range change event.\r\n     */\r\n    RadarChart.prototype.handleYAxisRangeChange = function () {\r\n        _super.prototype.handleYAxisRangeChange.call(this);\r\n        $iter.each(this.xAxes.iterator(), function (axis) {\r\n            axis.invalidate();\r\n        });\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    RadarChart.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up cursor\r\n            if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n                config.cursor.type = \"RadarCursor\";\r\n            }\r\n            // Set up series\r\n            if ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n                for (var i = 0, len = config.series.length; i < len; i++) {\r\n                    config.series[i].type = config.series[i].type || \"RadarSeries\";\r\n                }\r\n            }\r\n            // Set up axes\r\n            /*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n                for (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n                    config.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n                }\r\n            }\r\n            if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n                for (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n                    config.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n                }\r\n            }*/\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    /**\r\n     * Does calculations before drawing the chart.\r\n     */\r\n    RadarChart.prototype.beforeDraw = function () {\r\n        _super.prototype.beforeDraw.call(this);\r\n        var plotContainer = this.plotContainer;\r\n        var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n        var innerRect = { x: 0, y: 0, width: 0, height: 0 };\r\n        var wr = plotContainer.innerWidth / rect.width;\r\n        var hr = plotContainer.innerHeight / rect.height;\r\n        var innerRadius = this.innerRadius;\r\n        if (innerRadius instanceof Percent) {\r\n            var value = innerRadius.value;\r\n            var mr = Math.min(wr, hr);\r\n            this.mr = mr;\r\n            value = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n            innerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n            this.innerRadiusModifyer = value / innerRadius.value;\r\n            innerRadius = percent(value * 100);\r\n        }\r\n        // @todo handle this when innerRadius set in pixels (do it for pie also)\r\n        rect = $math.getCommonRectangle([rect, innerRect]);\r\n        var maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n        var diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n        var radius = diameter / 2;\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        this._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n        this._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n        $iter.each(this.xAxes.iterator(), function (axis) {\r\n            if (axis.renderer.useChartAngles) {\r\n                axis.renderer.startAngle = startAngle;\r\n                axis.renderer.endAngle = endAngle;\r\n            }\r\n            axis.width = diameter;\r\n            axis.height = diameter;\r\n            //axis.renderer.width = diameter;\r\n            //axis.renderer.height = diameter;\r\n            axis.renderer.pixelRadiusReal = radius;\r\n            //axis.renderer.innerRadius = innerRadius;\r\n        });\r\n        $iter.each(this.yAxes.iterator(), function (axis) {\r\n            axis.renderer.startAngle = startAngle;\r\n            axis.renderer.endAngle = endAngle;\r\n            axis.width = diameter;\r\n            axis.height = diameter;\r\n            //axis.renderer.width = diameter;\r\n            //axis.renderer.height = diameter;\r\n            axis.renderer.pixelRadiusReal = radius;\r\n            //axis.renderer.innerRadius = innerRadius;\r\n        });\r\n        var cursor = this.cursor;\r\n        if (cursor) {\r\n            cursor.width = diameter;\r\n            cursor.height = diameter;\r\n            cursor.startAngle = startAngle;\r\n            cursor.endAngle = endAngle;\r\n        }\r\n        this.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n        this.radarContainer.validatePosition();\r\n    };\r\n    /**\r\n     * Creates and returns a new Series, suitable for RadarChart.\r\n     *\r\n     * @return New Series\r\n     */\r\n    RadarChart.prototype.createSeries = function () {\r\n        return new RadarSeries();\r\n    };\r\n    Object.defineProperty(RadarChart.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Radar face. (degrees)\r\n         *\r\n         * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n         * top center. (at -90 degrees)\r\n         *\r\n         * You can use `startAngle` to change this setting.\r\n         *\r\n         * E.g. setting this to 0 will make the radial axis start horizontally to\r\n         * the right, as opposed to vertical.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set those to lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * @default -90\r\n         * @param value  Start angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarChart.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Radar face. (degrees)\r\n         *\r\n         * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n         * where it has started, forming a full 360 circle. (at 270 degrees)\r\n         *\r\n         * You can use `endAngle` to end the circle somewhere else.\r\n         *\r\n         * E.g. setting this to 180 will make the radar face end at horizontal line\r\n         * to the left off the center.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set those to lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * @default -90\r\n         * @param value  End angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarChart.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the Radar face.\r\n         *\r\n         * This can either be in absolute pixel value, or relative [[Percent]].\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarChart.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * @return Inner radius in pixels\r\n         */\r\n        get: function () {\r\n            return this._pixelInnerRadius;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarChart.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the radar face.\r\n         *\r\n         * This can either be in absolute pixel value, or relative [[Percent]].\r\n         *\r\n         * If set in Percent, it will be relative to `radius`. (outer radius)\r\n         *\r\n         * @param value Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Triggers (re)rendering of the horizontal (X) axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axis Axis\r\n     */\r\n    RadarChart.prototype.updateXAxis = function (renderer) {\r\n        //do not call super!\r\n        if (renderer) {\r\n            renderer.processRenderer();\r\n        }\r\n    };\r\n    /**\r\n     * Triggers (re)rendering of the vertical (Y) axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axis Axis\r\n     */\r\n    RadarChart.prototype.updateYAxis = function (renderer) {\r\n        // do not call super!\r\n        if (renderer) {\r\n            renderer.processRenderer();\r\n        }\r\n    };\r\n    return RadarChart;\r\n}(XYChart));\r\nexport { RadarChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n//# sourceMappingURL=RadarChart.js.map","/**\r\n * Sankey diagram module.\r\n */\r\nimport { __extends, __read, __spread } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo rearange notes after dragged\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar SankeyDiagramDataItem = /** @class */ (function (_super) {\r\n    __extends(SankeyDiagramDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SankeyDiagramDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"SankeyDiagramDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return SankeyDiagramDataItem;\r\n}(FlowDiagramDataItem));\r\nexport { SankeyDiagramDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nvar SankeyDiagram = /** @class */ (function (_super) {\r\n    __extends(SankeyDiagram, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SankeyDiagram() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"SankeyDiagram\";\r\n        _this.orientation = \"horizontal\";\r\n        _this.nodeAlign = \"middle\";\r\n        _this.nodesContainer.width = percent(100);\r\n        _this.nodesContainer.height = percent(100);\r\n        _this.linksContainer.width = percent(100);\r\n        _this.linksContainer.height = percent(100);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates chart's data, effectively causing the chart to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SankeyDiagram.prototype.validateData = function () {\r\n        var _this = this;\r\n        _super.prototype.validateData.call(this);\r\n        this._levelCount = 0;\r\n        this.nodes.each(function (key, node) {\r\n            node.level = undefined;\r\n        });\r\n        this.nodes.each(function (key, node) {\r\n            node.level = _this.getNodeLevel(node, 0);\r\n            _this._levelCount = $math.max(_this._levelCount, node.level);\r\n        });\r\n    };\r\n    /**\r\n     * Returns node's highest level.\r\n     *\r\n     * @param node   Node\r\n     * @param level  Current level\r\n     * @return New level\r\n     */\r\n    SankeyDiagram.prototype.getNodeLevel = function (node, level) {\r\n        var _this = this;\r\n        //@todo solve circular so\r\n        var levels = [level];\r\n        $iter.each(node.incomingDataItems.iterator(), function (link) {\r\n            if (link.fromNode) {\r\n                if ($type.isNumber(link.fromNode.level)) {\r\n                    levels.push(link.fromNode.level + 1);\r\n                }\r\n                else {\r\n                    levels.push(_this.getNodeLevel(link.fromNode, level + 1));\r\n                }\r\n            }\r\n        });\r\n        return Math.max.apply(Math, __spread(levels));\r\n    };\r\n    /**\r\n     * Calculates relation between pixel height and total value.\r\n     *\r\n     * In Sankey the actual thickness of links and height of nodes will depend\r\n     * on their values.\r\n     */\r\n    SankeyDiagram.prototype.calculateValueHeight = function () {\r\n        var _this = this;\r\n        // calculate sums of each level\r\n        this._levelSum = {};\r\n        this._levelNodesCount = {};\r\n        this.maxSum = 0;\r\n        var total = this.dataItem.values.value.sum;\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            _this.getNodeValue(node);\r\n        });\r\n        this.nodes.each(function (key, node) {\r\n            var level = node.level;\r\n            var value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n            if (value / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            if ($type.isNumber(_this._levelSum[level])) {\r\n                _this._levelSum[level] += value;\r\n            }\r\n            else {\r\n                _this._levelSum[level] = value;\r\n            }\r\n            if ($type.isNumber(_this._levelNodesCount[level])) {\r\n                _this._levelNodesCount[level]++;\r\n            }\r\n            else {\r\n                _this._levelNodesCount[level] = 1;\r\n            }\r\n        });\r\n        var availableHeight;\r\n        if (this.orientation == \"horizontal\") {\r\n            availableHeight = this.chartContainer.maxHeight - 1;\r\n        }\r\n        else {\r\n            availableHeight = this.chartContainer.maxWidth - 1;\r\n        }\r\n        var maxSumLevel;\r\n        var minHeight;\r\n        $object.each(this._levelSum, function (key, value) {\r\n            var realValue = value;\r\n            var levelNodeCount = _this._levelNodesCount[key];\r\n            var valueHeight = (availableHeight - (levelNodeCount - 1) * _this.nodePadding) / realValue;\r\n            if (valueHeight == Infinity) {\r\n                valueHeight = 0;\r\n            }\r\n            if (minHeight > valueHeight || !$type.isNumber(minHeight)) {\r\n                minHeight = valueHeight;\r\n                _this.maxSum = realValue;\r\n                maxSumLevel = $type.toNumber(key);\r\n            }\r\n        });\r\n        this._maxSumLevel = maxSumLevel;\r\n        var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n        var valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n        if (valueHeight == Infinity) {\r\n            valueHeight = 0;\r\n        }\r\n        if (!$type.isNumber(this.valueHeight)) {\r\n            this.valueHeight = valueHeight;\r\n        }\r\n        else {\r\n            var finalHeight = void 0;\r\n            try {\r\n                finalHeight = this._heightAnimation.animationOptions[0].to;\r\n            }\r\n            catch (err) {\r\n            }\r\n            // without animations it will be non-smooth as maxValue jumps from one column to another\r\n            if (finalHeight != valueHeight) {\r\n                var duration = this.interpolationDuration;\r\n                try {\r\n                    duration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n                }\r\n                catch (err) {\r\n                }\r\n                this._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration, this.interpolationEasing).start();\r\n                this._disposers.push(this._heightAnimation);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Redraws the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SankeyDiagram.prototype.validate = function () {\r\n        var _this = this;\r\n        _super.prototype.validate.call(this);\r\n        this.calculateValueHeight();\r\n        var container = this.nodesContainer;\r\n        var nextCoordinate = {};\r\n        var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n        var total = this.dataItem.values.value.sum;\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            var level = node.level;\r\n            var levelCoordinate = 0;\r\n            var nodeCount = _this._levelNodesCount[level];\r\n            switch (_this.nodeAlign) {\r\n                case \"bottom\":\r\n                    levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding;\r\n                    break;\r\n                case \"middle\":\r\n                    levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding / 2;\r\n                    break;\r\n            }\r\n            node.parent = container;\r\n            var delta;\r\n            var x;\r\n            var y;\r\n            var value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n            if (value / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            if (_this.orientation == \"horizontal\") {\r\n                delta = (_this.innerWidth - node.pixelWidth) / _this._levelCount;\r\n                x = delta * node.level;\r\n                y = nextCoordinate[level] || levelCoordinate;\r\n                var h = value * _this.valueHeight;\r\n                node.height = h;\r\n                node.minX = x;\r\n                node.maxX = x;\r\n                nextCoordinate[level] = y + h + _this.nodePadding;\r\n            }\r\n            else {\r\n                delta = (_this.innerHeight - node.pixelHeight) / _this._levelCount;\r\n                x = nextCoordinate[level] || levelCoordinate;\r\n                y = delta * node.level;\r\n                var w = value * _this.valueHeight;\r\n                node.width = w;\r\n                node.minY = y;\r\n                node.maxY = y;\r\n                nextCoordinate[level] = x + w + _this.nodePadding;\r\n            }\r\n            node.x = x;\r\n            node.y = y;\r\n        });\r\n    };\r\n    /**\r\n     * Performs actual operations to reveal this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param duration Fade in duration (ms)\r\n     * @return Fade in duration (ms)\r\n     */\r\n    SankeyDiagram.prototype.showReal = function (duration) {\r\n        var _this = this;\r\n        if (this.preventShow) {\r\n            return;\r\n        }\r\n        if (this.interpolationDuration > 0) {\r\n            var container_1 = this.nodesContainer;\r\n            var i_1 = 0;\r\n            $iter.each(this.links.iterator(), function (link) {\r\n                link.hide(0);\r\n            });\r\n            $iter.each(this._sorted, function (strNode) {\r\n                var node = strNode[1];\r\n                var property;\r\n                if (_this.orientation == \"horizontal\") {\r\n                    node.dx = -(container_1.pixelWidth - node.pixelWidth) / Math.max(_this._levelCount, 1);\r\n                    property = \"dx\";\r\n                }\r\n                else {\r\n                    node.dy = -(container_1.pixelHeight - node.pixelHeight) / Math.max(_this._levelCount, 1);\r\n                    property = \"dy\";\r\n                }\r\n                var delay = 0;\r\n                var duration = _this.interpolationDuration;\r\n                if (_this.sequencedInterpolation) {\r\n                    delay = _this.sequencedInterpolationDelay * i_1 + duration * i_1 / $iter.length(_this.nodes.iterator());\r\n                }\r\n                node.opacity = 0;\r\n                node.invalidateLinks();\r\n                node.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], _this.interpolationDuration, _this.interpolationEasing).delay(delay);\r\n                $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\r\n                    var animation = dataItem.link.show(_this.interpolationDuration);\r\n                    if (animation && !animation.isFinished()) {\r\n                        animation.delay(delay);\r\n                    }\r\n                });\r\n                $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\r\n                    if (!dataItem.fromNode) {\r\n                        var animation = dataItem.link.show(_this.interpolationDuration);\r\n                        if (animation && !animation.isFinished()) {\r\n                            animation.delay(delay);\r\n                        }\r\n                    }\r\n                });\r\n                i_1++;\r\n            });\r\n        }\r\n        return _super.prototype.showReal.call(this);\r\n    };\r\n    /**\r\n     * Changes the sort type of the nodes.\r\n     *\r\n     * This will actually reshuffle nodes using nice animation.\r\n     */\r\n    SankeyDiagram.prototype.changeSorting = function () {\r\n        var _this = this;\r\n        this.sortNodes();\r\n        var nextCoordinate = {};\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            var level = node.level;\r\n            var levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2;\r\n            var property;\r\n            var nodeHeight;\r\n            if (_this.orientation == \"horizontal\") {\r\n                property = \"y\";\r\n                nodeHeight = node.pixelHeight;\r\n            }\r\n            else {\r\n                property = \"x\";\r\n                nodeHeight = node.pixelWidth;\r\n            }\r\n            node.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, _this.interpolationDuration, _this.interpolationEasing);\r\n            nextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + _this.nodePadding;\r\n            node.invalidateLinks();\r\n        });\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    SankeyDiagram.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Sankey diagram\");\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new data item.\r\n     *\r\n     * @return Data item\r\n     */\r\n    SankeyDiagram.prototype.createDataItem = function () {\r\n        return new SankeyDiagramDataItem();\r\n    };\r\n    Object.defineProperty(SankeyDiagram.prototype, \"nodeAlign\", {\r\n        /**\r\n         * @returns Returns nodeAlign value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nodeAlign\");\r\n        },\r\n        /**\r\n         * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n         *\r\n         * @param value  Node sorting\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"nodeAlign\", value);\r\n            this.changeSorting();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyDiagram.prototype, \"orientation\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n         *\r\n         * @param value Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n            var nameLabel = this.nodes.template.nameLabel;\r\n            if (value == \"vertical\") {\r\n                this.nodes.template.width = undefined;\r\n                nameLabel.label.horizontalCenter = \"middle\";\r\n                nameLabel.locationX = 0.5;\r\n            }\r\n            else {\r\n                this.nodes.template.height = undefined;\r\n                nameLabel.label.horizontalCenter = \"left\";\r\n                nameLabel.locationX = 1;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    SankeyDiagram.prototype.createNode = function () {\r\n        var node = new SankeyNode();\r\n        this._disposers.push(node);\r\n        return node;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    SankeyDiagram.prototype.createLink = function () {\r\n        var link = new SankeyLink();\r\n        this._disposers.push(link);\r\n        return link;\r\n    };\r\n    Object.defineProperty(SankeyDiagram.prototype, \"valueHeight\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._valueHeight;\r\n        },\r\n        /**\r\n         * @ignore\r\n         */\r\n        set: function (value) {\r\n            if (value != this._valueHeight) {\r\n                this._valueHeight = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    SankeyDiagram.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this._sorted = this.nodes.iterator();\r\n    };\r\n    return SankeyDiagram;\r\n}(FlowDiagram));\r\nexport { SankeyDiagram };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n//# sourceMappingURL=SankeyDiagram.js.map","/**\r\n * Sliced chart module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, PercentChartDataItem } from \"./PercentChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar SlicedChartDataItem = /** @class */ (function (_super) {\r\n    __extends(SlicedChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SlicedChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"SlicedChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return SlicedChartDataItem;\r\n}(PercentChartDataItem));\r\nexport { SlicedChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nvar SlicedChart = /** @class */ (function (_super) {\r\n    __extends(SlicedChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SlicedChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"SlicedChart\";\r\n        _this.seriesContainer.layout = \"horizontal\";\r\n        _this.padding(15, 15, 15, 15);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    SlicedChart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Sliced chart\");\r\n        }\r\n    };\r\n    /**\r\n     * (Re)validates the chart, causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SlicedChart.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    return SlicedChart;\r\n}(PercentChart));\r\nexport { SlicedChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n//# sourceMappingURL=SlicedChart.js.map","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar TreeMapDataItem = /** @class */ (function (_super) {\r\n    __extends(TreeMapDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TreeMapDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Required for squarify functionality.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.rows = [];\r\n        _this.className = \"TreeMapDataItem\";\r\n        _this.values.value = {};\r\n        _this.values.x0 = {};\r\n        _this.values.y0 = {};\r\n        _this.values.x1 = {};\r\n        _this.values.y1 = {};\r\n        _this.hasChildren.children = true;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"legendDataItem\", {\r\n        /**\r\n         * @return Legend data item\r\n         */\r\n        get: function () {\r\n            return this._legendDataItem;\r\n        },\r\n        /**\r\n         * A legend's data item, that corresponds to this data item.\r\n         *\r\n         * @param value  Legend data item\r\n         */\r\n        set: function (value) {\r\n            this._legendDataItem = value;\r\n            if (value.label) {\r\n                value.label.dataItem = this;\r\n            }\r\n            if (value.valueLabel) {\r\n                value.valueLabel.dataItem = this;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a duration (ms) the Data Item should take to animate from one\r\n     * value to another.\r\n     *\r\n     * If the duration is not specified via parameter, this method will try to\r\n     * request a default duration from the related `Component`.\r\n     *\r\n     * @param duration  Default duration (ms)\r\n     * @return Duration (ms)\r\n     */\r\n    TreeMapDataItem.prototype.getDuration = function () {\r\n        return 0;\r\n    };\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            var value = 0;\r\n            if (!this.children || this.children.length == 0) {\r\n                value = this.values[\"value\"].workingValue;\r\n            }\r\n            else {\r\n                $iter.each(this.children.iterator(), function (child) {\r\n                    var childValue = child.value;\r\n                    if ($type.isNumber(childValue)) {\r\n                        value += childValue;\r\n                    }\r\n                });\r\n            }\r\n            return value;\r\n            /*\r\n            let value = this.values[\"value\"].workingValue;\r\n    \r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n                if (this.children) {\r\n                    $iter.each(this.children.iterator(), (child) => {\r\n                        if ($type.isNumber(child.value)) {\r\n                            value += child.value;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            return value;*/\r\n        },\r\n        /**\r\n         * Numeric value of the item.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"percent\", {\r\n        /**\r\n         * Percent value of a node\r\n         */\r\n        get: function () {\r\n            if (this.parent) {\r\n                return this.value / this.parent.value * 100;\r\n            }\r\n            return 100;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"x0\", {\r\n        /**\r\n         * @return X\r\n         */\r\n        get: function () {\r\n            return this.values.x0.value;\r\n        },\r\n        /**\r\n         * Item's X position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param value  X\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"x0\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"x1\", {\r\n        /**\r\n         * @return X\r\n         */\r\n        get: function () {\r\n            return this.values.x1.value;\r\n        },\r\n        /**\r\n         * Item's X position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param value  X\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"x1\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"y0\", {\r\n        /**\r\n         * @return Y\r\n         */\r\n        get: function () {\r\n            return this.values.y0.value;\r\n        },\r\n        /**\r\n         * Item's Y position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param value  Y\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"y0\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"y1\", {\r\n        /**\r\n         * @return Y\r\n         */\r\n        get: function () {\r\n            return this.values.y1.value;\r\n        },\r\n        /**\r\n         * Item's Y position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param value  Y\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"y1\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"name\", {\r\n        /**\r\n         * @return Name\r\n         */\r\n        get: function () {\r\n            return this.properties.name;\r\n        },\r\n        /**\r\n         * Item's name.\r\n         *\r\n         * @param name  Name\r\n         */\r\n        set: function (name) {\r\n            this.setProperty(\"name\", name);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"children\", {\r\n        /**\r\n         * @return Item's children\r\n         */\r\n        get: function () {\r\n            return this.properties.children;\r\n        },\r\n        /**\r\n         * A list of item's sub-children.\r\n         *\r\n         * Having children means that the TreeMap chat will automatically be\r\n         * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n         * display its children.\r\n         *\r\n         * Treemap can have any level of nesting.\r\n         *\r\n         * @param children  Item's children\r\n         */\r\n        set: function (children) {\r\n            this.setProperty(\"children\", children);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"level\", {\r\n        /**\r\n         * Depth level in the treemap hierarchy.\r\n         *\r\n         * The top-level item will have level set at 0. Its children will have\r\n         * level 1, and so on.\r\n         *\r\n         * @readonly\r\n         * @return Level\r\n         */\r\n        get: function () {\r\n            if (!this.parent) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return this.parent.level + 1;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"color\", {\r\n        /**\r\n         * @return Color\r\n         */\r\n        get: function () {\r\n            var color = this.properties.color;\r\n            if (color == undefined) {\r\n                if (this.parent) {\r\n                    color = this.parent.color;\r\n                }\r\n            }\r\n            if (color == undefined) {\r\n                if (this.component) {\r\n                    color = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n                }\r\n            }\r\n            return color;\r\n        },\r\n        /**\r\n         * Item's color.\r\n         *\r\n         * If not set, will use parent's color, or, if that is not set either,\r\n         * automatically assigned color from chart's color set. (`chart.colors`)\r\n         *\r\n         * @param value  Color\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"color\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"fill\", {\r\n        /**\r\n         * @ignore\r\n         * For the legend to work properly\r\n         */\r\n        get: function () {\r\n            return this.color;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"series\", {\r\n        get: function () {\r\n            return this._series;\r\n        },\r\n        /**\r\n         * Series of children data items\r\n         * @todo: proper descrition\r\n         */\r\n        set: function (series) {\r\n            if (series != this._series) {\r\n                if (this._series) {\r\n                    this.component.series.removeValue(this._series);\r\n                    this._series.dispose();\r\n                }\r\n                this._series = series;\r\n                this._disposers.push(series);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Hides the Data Item and related visual elements.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     * @param delay     Delay animation (ms)\r\n     * @param toValue   A value to set to `fields` when hiding\r\n     * @param fields    A list of data fields to set value to `toValue`\r\n     */\r\n    TreeMapDataItem.prototype.hide = function (duration, delay, toValue, fields) {\r\n        this.setWorkingValue(\"value\", 0);\r\n        if (this.children) {\r\n            this.children.each(function (child) {\r\n                child.hide(duration, delay, toValue, fields);\r\n            });\r\n        }\r\n        var seriesDataItem = this.seriesDataItem;\r\n        if (seriesDataItem) {\r\n            seriesDataItem.bullets.each(function (key, value) {\r\n                value.hide();\r\n                value.preventShow = true;\r\n            });\r\n        }\r\n        return _super.prototype.hide.call(this, duration, delay, toValue, fields);\r\n    };\r\n    /**\r\n     * Shows the Data Item and related visual elements.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     * @param delay     Delay animation (ms)\r\n     * @param fields    A list of fields to set values of\r\n     */\r\n    TreeMapDataItem.prototype.show = function (duration, delay, fields) {\r\n        this.setWorkingValue(\"value\", this.values.value.value);\r\n        if (this.children) {\r\n            this.children.each(function (child) {\r\n                child.show(duration, delay, fields);\r\n            });\r\n        }\r\n        var seriesDataItem = this.seriesDataItem;\r\n        if (seriesDataItem) {\r\n            seriesDataItem.bullets.each(function (key, value) {\r\n                value.preventShow = false;\r\n            });\r\n        }\r\n        return _super.prototype.show.call(this, duration, delay, fields);\r\n    };\r\n    return TreeMapDataItem;\r\n}(XYChartDataItem));\r\nexport { TreeMapDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nvar TreeMap = /** @class */ (function (_super) {\r\n    __extends(TreeMap, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TreeMap() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * An algorithm used to divide area into squares based on their value.\r\n         *\r\n         * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n         *\r\n         * ```TypeScript\r\n         * chart.layoutAlgorithm = chart.sliceDice;\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.layoutAlgorithm = chart.sliceDice;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"layoutAlgorithm\": \"sliceDice\",\r\n         *   // ...\r\n         * }\r\n         * ```\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n         * @default squarify\r\n         */\r\n        _this.layoutAlgorithm = _this.squarify;\r\n        /**\r\n         * Is the chart zoomable?\r\n         *\r\n         * If the chart is `zoomable`, and items have sub-items, the chart will\r\n         * drill-down to sub-items when click on their parent item.\r\n         *\r\n         * @default true\r\n         */\r\n        _this.zoomable = true;\r\n        _this.className = \"TreeMap\";\r\n        _this._usesData = true;\r\n        _this.maxLevels = 2;\r\n        _this.currentLevel = 0;\r\n        _this.hideParentColumns = false;\r\n        _this.colors = new ColorSet();\r\n        _this.sorting = \"descending\";\r\n        // create two value axes for the chart\r\n        var xAxis = _this.xAxes.push(new ValueAxis());\r\n        xAxis.title.disabled = true;\r\n        xAxis.strictMinMax = true;\r\n        var xRenderer = xAxis.renderer;\r\n        xRenderer.inside = true;\r\n        xRenderer.labels.template.disabled = true;\r\n        xRenderer.ticks.template.disabled = true;\r\n        xRenderer.grid.template.disabled = true;\r\n        xRenderer.axisFills.template.disabled = true;\r\n        xRenderer.minGridDistance = 100;\r\n        xRenderer.line.disabled = true;\r\n        xRenderer.baseGrid.disabled = true;\r\n        //xRenderer.inversed = true;\r\n        var yAxis = _this.yAxes.push(new ValueAxis());\r\n        yAxis.title.disabled = true;\r\n        yAxis.strictMinMax = true;\r\n        var yRenderer = yAxis.renderer;\r\n        yRenderer.inside = true;\r\n        yRenderer.labels.template.disabled = true;\r\n        yRenderer.ticks.template.disabled = true;\r\n        yRenderer.grid.template.disabled = true;\r\n        yRenderer.axisFills.template.disabled = true;\r\n        yRenderer.minGridDistance = 100;\r\n        yRenderer.line.disabled = true;\r\n        yRenderer.baseGrid.disabled = true;\r\n        yRenderer.inversed = true;\r\n        // shortcuts\r\n        _this.xAxis = xAxis;\r\n        _this.yAxis = yAxis;\r\n        var template = new TreeMapSeries();\r\n        _this.seriesTemplates = new DictionaryTemplate(template);\r\n        template.virtualParent = _this;\r\n        _this._disposers.push(new DictionaryDisposer(_this.seriesTemplates));\r\n        _this._disposers.push(template);\r\n        _this.zoomOutButton.events.on(\"hit\", function () {\r\n            _this.zoomToChartDataItem(_this._homeDataItem);\r\n        }, undefined, false);\r\n        _this.seriesTemplates.events.on(\"insertKey\", function (event) {\r\n            event.newValue.isTemplate = true;\r\n        }, undefined, false);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TreeMap.prototype, \"navigationBar\", {\r\n        /**\r\n         * Returns navigationBar if it is added to a chart\r\n         */\r\n        get: function () {\r\n            return this._navigationBar;\r\n        },\r\n        /**\r\n         * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n         * drill-down path.\r\n         */\r\n        set: function (navigationBar) {\r\n            var _this = this;\r\n            if (this._navigationBar != navigationBar) {\r\n                this._navigationBar = navigationBar;\r\n                navigationBar.parent = this;\r\n                navigationBar.toBack();\r\n                navigationBar.links.template.events.on(\"hit\", function (event) {\r\n                    var dataItem = event.target.dataItem.dataContext;\r\n                    if (!dataItem.isDisposed()) {\r\n                        _this.zoomToChartDataItem(dataItem);\r\n                        _this.createTreeSeries(dataItem);\r\n                    }\r\n                }, undefined, true);\r\n                this._disposers.push(navigationBar);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * (Re)validates chart's data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMap.prototype.validateData = function () {\r\n        this.series.clear();\r\n        this._tempSeries = [];\r\n        _super.prototype.validateData.call(this);\r\n        if (this._homeDataItem) {\r\n            this._homeDataItem.dispose();\r\n        }\r\n        var homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n        this._homeDataItem = homeDataItem;\r\n        $iter.each(this.dataItems.iterator(), function (dataItem) {\r\n            dataItem.parent = homeDataItem;\r\n        });\r\n        homeDataItem.children = this.dataItems;\r\n        homeDataItem.x0 = 0;\r\n        homeDataItem.y0 = 0;\r\n        homeDataItem.name = this._homeText;\r\n        var maxX = 1000;\r\n        var maxY = Math.round((maxX * this.pixelHeight / this.pixelWidth) / 10) * 10 || 1000;\r\n        homeDataItem.x1 = maxX;\r\n        homeDataItem.y1 = maxY;\r\n        this.xAxis.min = 0;\r\n        this.xAxis.max = maxX;\r\n        this.xAxis.getMinMax();\r\n        this.yAxis.min = 0;\r\n        this.yAxis.max = maxY;\r\n        this.yAxis.getMinMax();\r\n        this.layoutItems(homeDataItem);\r\n        this.createTreeSeries(homeDataItem);\r\n        this.feedLegend();\r\n    };\r\n    /**\r\n     * Layouts and sizes all items according to their value and\r\n     * `layoutAlgorithm`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Parent data item\r\n     */\r\n    TreeMap.prototype.layoutItems = function (parent, sorting) {\r\n        if (parent) {\r\n            var children = parent.children;\r\n            if (!sorting) {\r\n                sorting = this.sorting;\r\n            }\r\n            if (sorting == \"ascending\") {\r\n                children.values.sort(function (a, b) {\r\n                    return a.value - b.value;\r\n                });\r\n            }\r\n            if (sorting == \"descending\") {\r\n                children.values.sort(function (a, b) {\r\n                    return b.value - a.value;\r\n                });\r\n            }\r\n            this._updateDataItemIndexes(0);\r\n            this.layoutAlgorithm(parent);\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                var node = children.getIndex(i);\r\n                if (node.children) {\r\n                    this.layoutItems(node);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new treemap series.\r\n     *\r\n     * @todo Description\r\n     * @param dataItem  Data item to create series out of\r\n     */\r\n    TreeMap.prototype.createTreeSeries = function (dataItem) {\r\n        var _this = this;\r\n        this._tempSeries = [];\r\n        var navigationData = [dataItem];\r\n        // create parent series and navigation data\r\n        var parentDataItem = dataItem.parent;\r\n        while (parentDataItem != undefined) {\r\n            this.initSeries(parentDataItem);\r\n            navigationData.push(parentDataItem);\r\n            parentDataItem = parentDataItem.parent;\r\n        }\r\n        navigationData.reverse();\r\n        if (this.navigationBar) {\r\n            this.navigationBar.data = navigationData;\r\n        }\r\n        // create series and children series\r\n        this.createTreeSeriesReal(dataItem);\r\n        // add those which are not in the list\r\n        $array.each(this._tempSeries, function (series) {\r\n            if (_this.series.indexOf(series) == -1) {\r\n                _this.series.push(series);\r\n            }\r\n            series.zIndex = series.level;\r\n        });\r\n    };\r\n    /**\r\n     * [createTreeSeriesReal description]\r\n     *\r\n     * @todo Description\r\n     * @param dataItem [description]\r\n     */\r\n    TreeMap.prototype.createTreeSeriesReal = function (dataItem) {\r\n        if (dataItem.children) {\r\n            var level = dataItem.level;\r\n            if (level < this.currentLevel + this.maxLevels) {\r\n                this.initSeries(dataItem);\r\n                for (var i = 0; i < dataItem.children.length; i++) {\r\n                    var child = dataItem.children.getIndex(i);\r\n                    if (child.children) {\r\n                        this.createTreeSeriesReal(child);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    TreeMap.prototype.setData = function (value) {\r\n        this.currentLevel = 0;\r\n        this.currentlyZoomed = undefined;\r\n        this.xAxis.start = 0;\r\n        this.xAxis.end = 1;\r\n        this.yAxis.start = 0;\r\n        this.yAxis.end = 1;\r\n        _super.prototype.setData.call(this, value);\r\n    };\r\n    /**\r\n     * @ignore\r\n     * Overriding, as tree map series are created on the fly all the time\r\n     */\r\n    TreeMap.prototype.seriesAppeared = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Initializes the treemap series.\r\n     *\r\n     * @todo Description\r\n     * @param dataItem  Chart data item\r\n     */\r\n    TreeMap.prototype.initSeries = function (dataItem) {\r\n        var _this = this;\r\n        if (!dataItem.series) {\r\n            var series = void 0;\r\n            var template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n            if (template) {\r\n                series = template.clone();\r\n            }\r\n            else {\r\n                series = this.series.create();\r\n            }\r\n            // for the legend to get {value}\r\n            series.dataItem.dataContext = dataItem;\r\n            series.name = dataItem.name;\r\n            series.parentDataItem = dataItem;\r\n            dataItem.series = series;\r\n            var level = dataItem.level;\r\n            series.level = level;\r\n            var dataContext = dataItem.dataContext;\r\n            if (dataContext) {\r\n                series.config = dataContext.config;\r\n            }\r\n            this.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n            series.data = dataItem.children.values;\r\n            series.fill = dataItem.color;\r\n            series.columnsContainer.hide(0);\r\n            series.bulletsContainer.hide(0);\r\n            series.columns.template.adapter.add(\"fill\", function (fill, target) {\r\n                var dataItem = target.dataItem;\r\n                if (dataItem) {\r\n                    var treeMapDataItem = dataItem.treeMapDataItem;\r\n                    if (treeMapDataItem) {\r\n                        target.fill = treeMapDataItem.color;\r\n                        target.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n                        return treeMapDataItem.color;\r\n                    }\r\n                }\r\n            });\r\n            if (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n                series.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n                if (this.zoomable) {\r\n                    series.columns.template.events.on(\"hit\", function (event) {\r\n                        var seriesDataItem = event.target.dataItem;\r\n                        if (dataItem.level > _this.currentLevel) {\r\n                            _this.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n                        }\r\n                        else {\r\n                            _this.zoomToSeriesDataItem(seriesDataItem);\r\n                        }\r\n                    }, this, undefined);\r\n                }\r\n            }\r\n        }\r\n        this._tempSeries.push(dataItem.series);\r\n    };\r\n    /**\r\n     * Toggles bullets so that labels that belong to current drill level are\r\n     * shown.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     */\r\n    TreeMap.prototype.toggleBullets = function (duration) {\r\n        var _this = this;\r\n        // hide all series which are not in tempSeries\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (_this._tempSeries.indexOf(series) == -1) {\r\n                //series.hideReal(duration);\r\n                series.columnsContainer.hide();\r\n                series.bulletsContainer.hide(duration);\r\n            }\r\n            else {\r\n                //series.showReal(duration);\r\n                series.columnsContainer.show();\r\n                series.bulletsContainer.show(duration);\r\n                series.dataItems.each(function (dataItem) {\r\n                    dataItem.bullets.each(function (key, bullet) {\r\n                        bullet.show();\r\n                    });\r\n                });\r\n                if (series.level < _this.currentLevel) {\r\n                    if (_this.hideParentColumns) {\r\n                        series.columnsContainer.hide();\r\n                    }\r\n                    series.bulletsContainer.hide(duration);\r\n                }\r\n                else if (series.level == _this.currentLevel) {\r\n                    if (_this.maxLevels > 1) {\r\n                        series.dataItems.each(function (dataItem) {\r\n                            if (dataItem.treeMapDataItem.children) {\r\n                                dataItem.bullets.each(function (key, bullet) {\r\n                                    bullet.hide();\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Zooms to particular item in series.\r\n     *\r\n     * @param dataItem  Data item\r\n     */\r\n    TreeMap.prototype.zoomToSeriesDataItem = function (dataItem) {\r\n        this.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n    };\r\n    /**\r\n     * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    TreeMap.prototype.zoomToChartDataItem = function (dataItem) {\r\n        var _this = this;\r\n        if (!dataItem) {\r\n            dataItem = this._homeDataItem;\r\n        }\r\n        var zoomOutButton = this.zoomOutButton;\r\n        // this is needed because if there is only one fist level, it wont' be shown\r\n        if (zoomOutButton) {\r\n            if (dataItem != this._homeDataItem) {\r\n                zoomOutButton.show();\r\n            }\r\n            else {\r\n                zoomOutButton.hide();\r\n            }\r\n        }\r\n        if (dataItem && dataItem.children) {\r\n            this.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n            this.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n            this.currentLevel = dataItem.level;\r\n            this.currentlyZoomed = dataItem;\r\n            this.createTreeSeries(dataItem);\r\n            var rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n            if (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\r\n                this._dataDisposers.push(rangeChangeAnimation);\r\n                rangeChangeAnimation.events.once(\"animationended\", function () {\r\n                    _this.toggleBullets();\r\n                });\r\n            }\r\n            else {\r\n                this.toggleBullets();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    TreeMap.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"TreeMap chart\");\r\n        }\r\n        //this.homeText = this.language.translate(\"Home\");\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    TreeMap.prototype.createDataItem = function () {\r\n        return new TreeMapDataItem();\r\n    };\r\n    Object.defineProperty(TreeMap.prototype, \"maxLevels\", {\r\n        /**\r\n         * @return Maximum drill-down level\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxLevels\");\r\n        },\r\n        /**\r\n         * Maximum number of levels the chart will display initially.\r\n         *\r\n         * @default 2\r\n         * @param value  Maximum drill-down level\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxLevels\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMap.prototype, \"currentLevel\", {\r\n        /**\r\n         * @return Current level\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"currentLevel\");\r\n        },\r\n        /**\r\n         * Current drill-down level the chart is at.\r\n         *\r\n         * @param value  Current level\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"currentLevel\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMap.prototype, \"hideParentColumns\", {\r\n        /**\r\n         * @return Hide?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hideParentColumns\");\r\n        },\r\n        /**\r\n         * If set to `true`, columns of parent nodes will be hidden when user\r\n         * drills-down into deeper levels.\r\n         *\r\n         * @sice 4.7.4\r\n         * @default false\r\n         * @param  value  Hide?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"hideParentColumns\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMap.prototype, \"sorting\", {\r\n        get: function () {\r\n            return this.getPropertyValue(\"sorting\");\r\n        },\r\n        /**\r\n         * Sorting direction of treemap items.\r\n         *\r\n         * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n         *\r\n         * @default \"descending\"\r\n         * @param value [description]\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"sorting\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and returns a new series of the suitable type.\r\n     *\r\n     * @return new series\r\n     */\r\n    TreeMap.prototype.createSeries = function () {\r\n        return new TreeMapSeries();\r\n    };\r\n    Object.defineProperty(TreeMap.prototype, \"homeText\", {\r\n        /**\r\n         * @return Home text\r\n         */\r\n        get: function () {\r\n            return this._homeText;\r\n        },\r\n        /**\r\n         * A text displayed on the \"home\" button which is used to go back to level 0\r\n         * after drill into sub-items.\r\n         *\r\n         * @param value  Home text\r\n         */\r\n        set: function (value) {\r\n            this._homeText = value;\r\n            if (this._homeDataItem) {\r\n                this._homeDataItem.name = this._homeText;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    TreeMap.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Instantiate layout algorithm\r\n            if ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n                switch (config[\"layoutAlgorithm\"]) {\r\n                    case \"squarify\":\r\n                        config[\"layoutAlgorithm\"] = this.squarify;\r\n                        break;\r\n                    case \"binaryTree\":\r\n                        config[\"layoutAlgorithm\"] = this.binaryTree;\r\n                        break;\r\n                    case \"slice\":\r\n                        config[\"layoutAlgorithm\"] = this.slice;\r\n                        break;\r\n                    case \"dice\":\r\n                        config[\"layoutAlgorithm\"] = this.dice;\r\n                        break;\r\n                    case \"sliceDice\":\r\n                        config[\"layoutAlgorithm\"] = this.sliceDice;\r\n                        break;\r\n                    default:\r\n                        delete config[\"layoutAlgorithm\"];\r\n                        break;\r\n                }\r\n            }\r\n            // Set type for navigation bar\r\n            if ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n                config.navigationBar.type = \"NavigationBar\";\r\n            }\r\n            _super.prototype.processConfig.call(this, config);\r\n        }\r\n    };\r\n    /**\r\n     * Measures the size of container and informs its children of how much size\r\n     * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n     * properties.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMap.prototype.validateLayout = function () {\r\n        _super.prototype.validateLayout.call(this);\r\n        this.layoutItems(this.currentlyZoomed);\r\n    };\r\n    /**\r\n     * Validates (processes) data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMap.prototype.validateDataItems = function () {\r\n        _super.prototype.validateDataItems.call(this);\r\n        this.layoutItems(this._homeDataItem);\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            series.validateRawData();\r\n        });\r\n        this.zoomToChartDataItem(this._homeDataItem);\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * TREEMAP LAYOUT FUNCTIONS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * The functions below are from D3.js library (https://d3js.org/)\r\n     *\r\n     * --------------------------------------------------------------------------\r\n     * Copyright 2017 Mike Bostock\r\n     *\r\n     * Redistribution and use in source and binary forms, with or without\r\n     * modification, are permitted provided that the following conditions are met:\r\n     *\r\n     * 1. Redistributions of source code must retain the above copyright notice,\r\n     *    this list of conditions and the following disclaimer.\r\n     *\r\n     * 2. Redistributions in binary form must reproduce the above copyright\r\n     *    notice,this list of conditions and the following disclaimer in the\r\n     *    documentation and/or other materials provided with the distribution.\r\n     *\r\n     * 3. Neither the name of the copyright holder nor the names of its\r\n     *    contributors may be used to endorse or promote products derived from\r\n     *    this software without specific prior written permission.\r\n     *\r\n     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n     * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n     * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n     * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n     * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n     * POSSIBILITY OF SUCH DAMAGE.\r\n     * --------------------------------------------------------------------------\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Treemap layout algorithm: binaryTree.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.binaryTree = function (parent) {\r\n        var nodes = parent.children, i, n = nodes.length, sum, sums = new Array(n + 1);\r\n        for (sums[0] = sum = i = 0; i < n; ++i) {\r\n            sums[i + 1] = sum += nodes.getIndex(i).value;\r\n        }\r\n        partition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n        function partition(i, j, value, x0, y0, x1, y1) {\r\n            if (i >= j - 1) {\r\n                var node = nodes.getIndex(i);\r\n                node.x0 = x0;\r\n                node.y0 = y0;\r\n                node.x1 = x1;\r\n                node.y1 = y1;\r\n                return;\r\n            }\r\n            var valueOffset = sums[i], valueTarget = (value / 2) + valueOffset, k = i + 1, hi = j - 1;\r\n            while (k < hi) {\r\n                var mid = k + hi >>> 1;\r\n                if (sums[mid] < valueTarget) {\r\n                    k = mid + 1;\r\n                }\r\n                else {\r\n                    hi = mid;\r\n                }\r\n            }\r\n            if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) {\r\n                --k;\r\n            }\r\n            var valueLeft = sums[k] - valueOffset, valueRight = value - valueLeft;\r\n            if ((x1 - x0) > (y1 - y0)) {\r\n                var xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n                partition(i, k, valueLeft, x0, y0, xk, y1);\r\n                partition(k, j, valueRight, xk, y0, x1, y1);\r\n            }\r\n            else {\r\n                var yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n                partition(i, k, valueLeft, x0, y0, x1, yk);\r\n                partition(k, j, valueRight, x0, yk, x1, y1);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: slice.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.slice = function (parent) {\r\n        var x0 = parent.x0;\r\n        var x1 = parent.x1;\r\n        var y0 = parent.y0;\r\n        var y1 = parent.y1;\r\n        var nodes = parent.children;\r\n        var node;\r\n        var i = -1;\r\n        var n = nodes.length;\r\n        var k = parent.value && (y1 - y0) / parent.value;\r\n        while (++i < n) {\r\n            node = nodes.getIndex(i);\r\n            node.x0 = x0;\r\n            node.x1 = x1;\r\n            node.y0 = y0;\r\n            y0 += node.value * k;\r\n            node.y1 = y0;\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: dice.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.dice = function (parent) {\r\n        var x0 = parent.x0;\r\n        var x1 = parent.x1;\r\n        var y0 = parent.y0;\r\n        var y1 = parent.y1;\r\n        var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x1 - x0) / parent.value;\r\n        while (++i < n) {\r\n            node = nodes.getIndex(i);\r\n            node.y0 = y0;\r\n            node.y1 = y1;\r\n            node.x0 = x0;\r\n            x0 += node.value * k;\r\n            node.x1 = x0;\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: slideDice.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.sliceDice = function (parent) {\r\n        if (parent.level & 1) {\r\n            this.slice(parent);\r\n        }\r\n        else {\r\n            this.dice(parent);\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: squarify.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.squarify = function (parent) {\r\n        var ratio = (1 + Math.sqrt(5)) / 2;\r\n        var x0 = parent.x0;\r\n        var x1 = parent.x1;\r\n        var y0 = parent.y0;\r\n        var y1 = parent.y1;\r\n        var nodes = parent.children;\r\n        var nodeValue;\r\n        var i0 = 0;\r\n        var i1 = 0;\r\n        var n = nodes.length;\r\n        var dx;\r\n        var dy;\r\n        var value = parent.value;\r\n        var sumValue;\r\n        var minValue;\r\n        var maxValue;\r\n        var newRatio;\r\n        var minRatio;\r\n        var alpha;\r\n        var beta;\r\n        while (i0 < n) {\r\n            dx = x1 - x0;\r\n            dy = y1 - y0;\r\n            // Find the next non-empty node.\r\n            do {\r\n                sumValue = nodes.getIndex(i1++).value;\r\n            } while (!sumValue && i1 < n);\r\n            minValue = maxValue = sumValue;\r\n            alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n            beta = sumValue * sumValue * alpha;\r\n            minRatio = Math.max(maxValue / beta, beta / minValue);\r\n            // Keep adding nodes while the aspect ratio maintains or improves.\r\n            for (; i1 < n; ++i1) {\r\n                sumValue += nodeValue = nodes.getIndex(i1).value;\r\n                if (nodeValue < minValue) {\r\n                    minValue = nodeValue;\r\n                }\r\n                if (nodeValue > maxValue) {\r\n                    maxValue = nodeValue;\r\n                }\r\n                beta = sumValue * sumValue * alpha;\r\n                newRatio = Math.max(maxValue / beta, beta / minValue);\r\n                if (newRatio > minRatio) {\r\n                    sumValue -= nodeValue;\r\n                    break;\r\n                }\r\n                minRatio = newRatio;\r\n            }\r\n            // Position and record the row orientation.\r\n            var row = this.dataItems.template.clone();\r\n            row.value = sumValue;\r\n            row.dice = dx < dy;\r\n            row.children = nodes.slice(i0, i1);\r\n            row.x0 = x0;\r\n            row.y0 = y0;\r\n            row.x1 = x1;\r\n            row.y1 = y1;\r\n            if (row.dice) {\r\n                row.y1 = value ? (y0 += (dy * sumValue) / value) : y1;\r\n                this.dice(row);\r\n            }\r\n            else {\r\n                row.x1 = value ? (x0 += (dx * sumValue) / value) : x1;\r\n                this.slice(row);\r\n            }\r\n            value -= sumValue;\r\n            i0 = i1;\r\n        }\r\n    };\r\n    TreeMap.prototype.handleSeriesAdded2 = function () {\r\n        // void\r\n    };\r\n    /**\r\n     * [handleDataItemValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    TreeMap.prototype.handleDataItemValueChange = function (dataItem, name) {\r\n        if (name == \"value\") {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    TreeMap.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n        if (name == \"value\") {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    TreeMap.prototype.getLegendLevel = function (dataItem) {\r\n        if (!dataItem) {\r\n            return;\r\n        }\r\n        if (!dataItem.children) {\r\n            return;\r\n        }\r\n        if (dataItem.children.length > 1) {\r\n            return dataItem;\r\n        }\r\n        else if (dataItem.children.length == 1) {\r\n            return this.getLegendLevel(dataItem.children.getIndex(0));\r\n        }\r\n        else {\r\n            return dataItem;\r\n        }\r\n    };\r\n    Object.defineProperty(TreeMap.prototype, \"homeDataItem\", {\r\n        /**\r\n         * A data item associated with top node.\r\n         *\r\n         * @since 4.8.2\r\n         */\r\n        get: function () {\r\n            return this._homeDataItem;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Setups the legend to use the chart's data.\r\n     * @ignore\r\n     */\r\n    TreeMap.prototype.feedLegend = function () {\r\n        var legend = this.legend;\r\n        if (legend) {\r\n            legend.dataFields.name = \"name\";\r\n            var legendParent = this.getLegendLevel(this._homeDataItem);\r\n            if (legendParent) {\r\n                var legendData_1 = [];\r\n                legendParent.children.each(function (dataItem) {\r\n                    //if (!dataItem.hiddenInLegend) {\r\n                    legendData_1.push(dataItem);\r\n                    //}\r\n                });\r\n                legend.data = legendData_1;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    TreeMap.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this._homeDataItem = undefined;\r\n        this.series.clear();\r\n        if (this.navigationBar) {\r\n            this.navigationBar.disposeData();\r\n        }\r\n        this.xAxis.disposeData();\r\n        this.yAxis.disposeData();\r\n    };\r\n    /**\r\n     * Since this chart uses hierarchical data, we need to remove childrent\r\n     * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n     *\r\n     * @return Export\r\n     */\r\n    TreeMap.prototype.getExporting = function () {\r\n        var _this = this;\r\n        var exporting = _super.prototype.getExporting.call(this);\r\n        exporting.adapter.add(\"formatDataFields\", function (info) {\r\n            if (info.format == \"csv\" || info.format == \"xlsx\") {\r\n                if ($type.hasValue(_this.dataFields.children)) {\r\n                    delete info.dataFields[_this.dataFields.children];\r\n                }\r\n            }\r\n            return info;\r\n        });\r\n        return exporting;\r\n    };\r\n    return TreeMap;\r\n}(XYChart));\r\nexport { TreeMap };\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n//# sourceMappingURL=TreeMap.js.map","/**\r\n * XY Chart module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, ListDisposer } from \"../../core/utils/List\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar XYChartDataItem = /** @class */ (function (_super) {\r\n    __extends(XYChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"XYChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return XYChartDataItem;\r\n}(SerialChartDataItem));\r\nexport { XYChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nvar XYChart = /** @class */ (function (_super) {\r\n    __extends(XYChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Defines the type of horizontal axis rederer.\r\n         */\r\n        _this._axisRendererX = AxisRendererX;\r\n        /**\r\n         * Defines the type of vertical axis rederer.\r\n         */\r\n        _this._axisRendererY = AxisRendererY;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this._seriesPoints = [];\r\n        _this.className = \"XYChart\";\r\n        // Set defaults\r\n        //this.margin(10, 10, 10, 10);\r\n        _this.maskBullets = true;\r\n        _this.arrangeTooltips = true;\r\n        // Create main chart container\r\n        var chartContainer = _this.chartContainer;\r\n        chartContainer.layout = \"vertical\";\r\n        _this.padding(15, 15, 15, 15);\r\n        // Create top axes container\r\n        var topAxesCont = chartContainer.createChild(Container);\r\n        topAxesCont.shouldClone = false;\r\n        topAxesCont.layout = \"vertical\";\r\n        topAxesCont.width = percent(100);\r\n        topAxesCont.zIndex = 1;\r\n        _this.topAxesContainer = topAxesCont;\r\n        // Create vertical axes and plot area container\r\n        // Plot area and vertical axes share the whole width of the chart,\r\n        // so we need to put then into a separate container so that layouting\r\n        // engine takes care of the positioning\r\n        var yAxesAndPlotCont = chartContainer.createChild(Container);\r\n        yAxesAndPlotCont.shouldClone = false;\r\n        yAxesAndPlotCont.layout = \"horizontal\";\r\n        yAxesAndPlotCont.width = percent(100);\r\n        yAxesAndPlotCont.height = percent(100);\r\n        yAxesAndPlotCont.zIndex = 0;\r\n        _this.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n        // Create a container for bottom axes\r\n        var bottomAxesCont = chartContainer.createChild(Container);\r\n        bottomAxesCont.shouldClone = false;\r\n        bottomAxesCont.width = percent(100);\r\n        bottomAxesCont.layout = \"vertical\";\r\n        bottomAxesCont.zIndex = 1;\r\n        _this.bottomAxesContainer = bottomAxesCont;\r\n        // Create a container for left-side axes\r\n        var leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n        leftAxesCont.shouldClone = false;\r\n        leftAxesCont.layout = \"horizontal\";\r\n        leftAxesCont.height = percent(100);\r\n        leftAxesCont.contentAlign = \"right\";\r\n        leftAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\r\n        leftAxesCont.zIndex = 1;\r\n        _this.leftAxesContainer = leftAxesCont;\r\n        // Create a container for plot area\r\n        var plotCont = yAxesAndPlotCont.createChild(Container);\r\n        plotCont.shouldClone = false;\r\n        plotCont.height = percent(100);\r\n        plotCont.width = percent(100);\r\n        // Create transparend background for plot container so that hover works\r\n        // on all of it\r\n        plotCont.background.fillOpacity = 0;\r\n        _this.plotContainer = plotCont;\r\n        // must go below plot container\r\n        _this.mouseWheelBehavior = \"none\";\r\n        _this._cursorContainer = plotCont;\r\n        // Create a container for right-side axes\r\n        var rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n        rightAxesCont.shouldClone = false;\r\n        rightAxesCont.layout = \"horizontal\";\r\n        rightAxesCont.height = percent(100);\r\n        rightAxesCont.zIndex = 1;\r\n        rightAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\r\n        _this.rightAxesContainer = rightAxesCont;\r\n        _this.seriesContainer.parent = plotCont;\r\n        _this.bulletsContainer.parent = plotCont;\r\n        var zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n        zoomOutButton.shouldClone = false;\r\n        zoomOutButton.align = \"right\";\r\n        zoomOutButton.valign = \"top\";\r\n        zoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n        zoomOutButton.marginTop = 5;\r\n        zoomOutButton.marginRight = 5;\r\n        zoomOutButton.hide(0);\r\n        _this.zoomOutButton = zoomOutButton;\r\n        // Create a container for bullets\r\n        var axisBulletsContainer = _this.plotContainer.createChild(Container);\r\n        axisBulletsContainer.shouldClone = false;\r\n        axisBulletsContainer.width = percent(100);\r\n        axisBulletsContainer.height = percent(100);\r\n        axisBulletsContainer.isMeasured = false;\r\n        axisBulletsContainer.zIndex = 4;\r\n        axisBulletsContainer.layout = \"none\";\r\n        _this.axisBulletsContainer = axisBulletsContainer;\r\n        _this._bulletMask = _this.plotContainer;\r\n        _this.events.on(\"beforedatavalidated\", function () {\r\n            _this.series.each(function (series) {\r\n                series.dataGrouped = false;\r\n                series._baseInterval = {};\r\n            });\r\n        }, _this, false);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    XYChart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        this.zoomOutButton.exportable = false;\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"X/Y chart\");\r\n        }\r\n    };\r\n    /**\r\n     * Draws the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        this.seriesContainer.toFront();\r\n        this.bulletsContainer.toFront();\r\n        if (this.maskBullets) {\r\n            this.bulletsContainer.mask = this._bulletMask;\r\n        }\r\n        this.updateSeriesLegend();\r\n    };\r\n    /**\r\n     * Triggers a redrawing of all chart's series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.updatePlotElements = function () {\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            series.invalidate();\r\n        });\r\n    };\r\n    /**\r\n     * Triggers data (re)validation which in turn can cause a redraw of the\r\n     * whole chart or just aprticular series / elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.validateData = function () {\r\n        // tell axes that data changed\r\n        if (this._parseDataFrom == 0) {\r\n            $iter.each(this.xAxes.iterator(), function (axis) {\r\n                axis.dataChangeUpdate();\r\n            });\r\n            $iter.each(this.yAxes.iterator(), function (axis) {\r\n                axis.dataChangeUpdate();\r\n            });\r\n            $iter.each(this.series.iterator(), function (series) {\r\n                series.dataChangeUpdate();\r\n            });\r\n        }\r\n        _super.prototype.validateData.call(this);\r\n    };\r\n    /**\r\n     * Updates margins for horizontal axes based on settings and available space.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.updateXAxesMargins = function () {\r\n        var leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n        var rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n        var bottomAxesCont = this.bottomAxesContainer;\r\n        if (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n            bottomAxesCont.paddingLeft = leftAxesWidth;\r\n            bottomAxesCont.paddingRight = rightAxesWidth;\r\n        }\r\n        var topAxesCont = this.topAxesContainer;\r\n        if (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n            topAxesCont.paddingLeft = leftAxesWidth;\r\n            topAxesCont.paddingRight = rightAxesWidth;\r\n        }\r\n    };\r\n    /**\r\n     * Triggers a re-initialization of this element.\r\n     *\r\n     * Will result in complete redrawing of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.reinit = function () {\r\n        _super.prototype.reinit.call(this);\r\n        this.series.each(function (series) {\r\n            series.appeared = false;\r\n        });\r\n    };\r\n    /**\r\n     * Triggers an update on the horizontal axis when one of its properties\r\n     * change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event An event object\r\n     */\r\n    XYChart.prototype.handleXAxisChange = function (event) {\r\n        this.updateXAxis(event.target);\r\n    };\r\n    /**\r\n     * Triggers an update on the vertical axis when one of its properties\r\n     * change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event An event object\r\n     */\r\n    XYChart.prototype.handleYAxisChange = function (event) {\r\n        this.updateYAxis(event.target);\r\n    };\r\n    /**\r\n     * Sets up a new horizontal (X) axis when it is added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Axis insert event\r\n     */\r\n    XYChart.prototype.processXAxis = function (event) {\r\n        var axis = event.newValue;\r\n        axis.chart = this;\r\n        if (!axis.renderer) {\r\n            axis.renderer = new this._axisRendererX();\r\n            axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n        }\r\n        axis.axisLetter = \"X\";\r\n        axis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\r\n        //axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n        // Although axis does not use data directly, we set dataProvider here\r\n        // (but not add to chart data users) to hold up rendering before data\r\n        // is parsed (system handles this)\r\n        axis.dataProvider = this;\r\n        this.updateXAxis(axis.renderer);\r\n        this.processAxis(axis);\r\n    };\r\n    /**\r\n     * Sets up a new vertical (Y) axis when it is added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Axis insert event\r\n     */\r\n    XYChart.prototype.processYAxis = function (event) {\r\n        var axis = event.newValue;\r\n        axis.chart = this;\r\n        if (!axis.renderer) {\r\n            axis.renderer = new this._axisRendererY();\r\n            axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n        }\r\n        axis.axisLetter = \"Y\";\r\n        axis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\r\n        //axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n        // Although axis does not use data directly, we set dataProvider here\r\n        // (but not add to chart data users) to hold up rendering before data\r\n        // is parsed (system handles this)\r\n        axis.dataProvider = this;\r\n        this.updateYAxis(axis.renderer);\r\n        this.processAxis(axis);\r\n    };\r\n    /**\r\n     * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n     * value range changes.\r\n     */\r\n    XYChart.prototype.handleXAxisRangeChange = function () {\r\n        var range = this.getCommonAxisRange(this.xAxes);\r\n        if (this.scrollbarX) {\r\n            this.zoomAxes(this.xAxes, range, true);\r\n        }\r\n        this.toggleZoomOutButton();\r\n        this.updateScrollbar(this.scrollbarX, range);\r\n    };\r\n    /**\r\n     * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n     * zoomed out or not.\r\n     */\r\n    XYChart.prototype.toggleZoomOutButton = function () {\r\n        if (this.zoomOutButton) {\r\n            var show_1 = false;\r\n            $iter.eachContinue(this.xAxes.iterator(), function (axis) {\r\n                if (axis.toggleZoomOutButton) {\r\n                    if (axis.maxZoomCount > 0) {\r\n                        var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\r\n                        if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n                            show_1 = true;\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n                            show_1 = true;\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n            $iter.eachContinue(this.yAxes.iterator(), function (axis) {\r\n                if (axis.toggleZoomOutButton) {\r\n                    if (axis.maxZoomCount > 0) {\r\n                        var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\r\n                        if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n                            show_1 = true;\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n                            show_1 = true;\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n            });\r\n            if (!this.seriesAppeared) {\r\n                show_1 = false;\r\n            }\r\n            if (show_1) {\r\n                this.zoomOutButton.show();\r\n            }\r\n            else {\r\n                this.zoomOutButton.hide();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     * moved this check to a separate method so that we could override it in TreeMapSeries\r\n     */\r\n    XYChart.prototype.seriesAppeared = function () {\r\n        var appeared = false;\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (!series.appeared) {\r\n                appeared = false;\r\n                return false;\r\n            }\r\n        });\r\n        return appeared;\r\n    };\r\n    /**\r\n     * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n     * value range changes.\r\n     */\r\n    XYChart.prototype.handleYAxisRangeChange = function () {\r\n        var range = this.getCommonAxisRange(this.yAxes);\r\n        if (this.scrollbarY) {\r\n            this.zoomAxes(this.yAxes, range, true);\r\n        }\r\n        this.toggleZoomOutButton();\r\n        this.updateScrollbar(this.scrollbarY, range);\r\n    };\r\n    /**\r\n     * Updates a relative scrollbar whenever data range of the axis changes.\r\n     *\r\n     * @param scrollbar  Scrollbar instance\r\n     * @param range      New data (values) range of the axis\r\n     */\r\n    XYChart.prototype.updateScrollbar = function (scrollbar, range) {\r\n        if (scrollbar) {\r\n            scrollbar.skipRangeEvents();\r\n            scrollbar.start = range.start;\r\n            scrollbar.end = range.end;\r\n        }\r\n    };\r\n    /**\r\n     * Returns a common range of values between a list of axes.\r\n     *\r\n     * This is used to synchronize the zoom between multiple axes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axes  A list of axes\r\n     * @return Common value range\r\n     */\r\n    XYChart.prototype.getCommonAxisRange = function (axes) {\r\n        var start;\r\n        var end;\r\n        axes.each(function (axis) {\r\n            if (axis instanceof ValueAxis && axis.syncWithAxis) {\r\n            }\r\n            else {\r\n                var axisStart = axis.start;\r\n                var axisEnd = axis.end;\r\n                if (axis.renderer.inversed) {\r\n                    axisStart = 1 - axis.end;\r\n                    axisEnd = 1 - axis.start;\r\n                }\r\n                if (!$type.isNumber(start) || (axisStart < start)) {\r\n                    start = axisStart;\r\n                }\r\n                if (!$type.isNumber(end) || (axisEnd > end)) {\r\n                    end = axisEnd;\r\n                }\r\n            }\r\n        });\r\n        return { start: start, end: end };\r\n    };\r\n    /**\r\n     * Triggers (re)rendering of the horizontal (X) axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axis  Axis\r\n     */\r\n    XYChart.prototype.updateXAxis = function (renderer) {\r\n        var axis = renderer.axis;\r\n        if (renderer.opposite) {\r\n            axis.parent = this.topAxesContainer;\r\n            axis.toFront();\r\n        }\r\n        else {\r\n            axis.parent = this.bottomAxesContainer;\r\n            axis.toBack();\r\n        }\r\n        if (axis.renderer) {\r\n            axis.renderer.processRenderer();\r\n        }\r\n    };\r\n    /**\r\n     * Triggers (re)rendering of the vertical (Y) axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axis  Axis\r\n     */\r\n    XYChart.prototype.updateYAxis = function (renderer) {\r\n        var axis = renderer.axis;\r\n        if (renderer.opposite) {\r\n            axis.parent = this.rightAxesContainer;\r\n            axis.toBack();\r\n        }\r\n        else {\r\n            axis.parent = this.leftAxesContainer;\r\n            axis.toFront();\r\n        }\r\n        if (axis.renderer) {\r\n            axis.renderer.processRenderer();\r\n        }\r\n    };\r\n    /**\r\n     * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n     * and containers for placement.\r\n     *\r\n     * @param axis  Axis\r\n     */\r\n    XYChart.prototype.processAxis = function (axis) {\r\n        var _this = this;\r\n        // Value axis does not use data directly, only category axis does\r\n        if (axis instanceof CategoryAxis) {\r\n            this._dataUsers.moveValue(axis);\r\n        }\r\n        var renderer = axis.renderer;\r\n        renderer.gridContainer.parent = this.plotContainer;\r\n        renderer.gridContainer.toBack();\r\n        renderer.breakContainer.parent = this.plotContainer;\r\n        renderer.breakContainer.toFront();\r\n        renderer.breakContainer.zIndex = 10;\r\n        axis.addDisposer(new Disposer(function () {\r\n            _this.dataUsers.removeValue(axis);\r\n        }));\r\n        renderer.bulletsContainer.parent = this.axisBulletsContainer;\r\n        this._disposers.push(axis.events.on(\"positionchanged\", function () {\r\n            var point = $utils.spritePointToSprite({ x: 0, y: 0 }, axis, _this.axisBulletsContainer);\r\n            if (axis.renderer instanceof AxisRendererY) {\r\n                renderer.bulletsContainer.y = point.y;\r\n            }\r\n            if (axis.renderer instanceof AxisRendererX) {\r\n                renderer.bulletsContainer.x = point.x;\r\n            }\r\n        }, undefined, false));\r\n        this.plotContainer.events.on(\"maxsizechanged\", function () {\r\n            if (_this.inited) {\r\n                axis.invalidateDataItems();\r\n                _this.updateSeriesMasks();\r\n            }\r\n        }, axis, false);\r\n    };\r\n    /**\r\n     * This is done because for some reason IE doesn't change mask if path of a\r\n     * mask changes.\r\n     */\r\n    XYChart.prototype.updateSeriesMasks = function () {\r\n        if ($utils.isIE()) {\r\n            this.series.each(function (series) {\r\n                var mask = series.mainContainer.mask;\r\n                series.mainContainer.mask = undefined;\r\n                series.mainContainer.mask = mask;\r\n            });\r\n        }\r\n    };\r\n    XYChart.prototype.handleSeriesRemoved = function (event) {\r\n        var series = event.oldValue;\r\n        if (series) {\r\n            if (series.xAxis) {\r\n                series.xAxis.series.removeValue(series);\r\n                series.xAxis.invalidateProcessedData();\r\n            }\r\n            if (series.yAxis) {\r\n                series.yAxis.series.removeValue(series);\r\n                series.yAxis.invalidateProcessedData();\r\n            }\r\n            // otherwise extremes won't change\r\n            this.series.each(function (series) {\r\n                series.resetExtremes();\r\n            });\r\n        }\r\n        _super.prototype.handleSeriesRemoved.call(this, event);\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"xAxes\", {\r\n        /**\r\n         * A list of horizontal (X) axes.\r\n         *\r\n         * @return List of axes\r\n         */\r\n        get: function () {\r\n            if (!this._xAxes) {\r\n                this._xAxes = new List();\r\n                this._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n                this._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n                this._disposers.push(new ListDisposer(this._xAxes, false));\r\n            }\r\n            return this._xAxes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.handleAxisRemoval = function (event) {\r\n        var axis = event.oldValue;\r\n        this.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n        if (axis.autoDispose) {\r\n            axis.dispose();\r\n        }\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"yAxes\", {\r\n        /**\r\n         * A list of vertical (Y) axes.\r\n         *\r\n         * @return List of axes\r\n         */\r\n        get: function () {\r\n            if (!this._yAxes) {\r\n                this._yAxes = new List();\r\n                this._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n                this._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n                this._disposers.push(new ListDisposer(this._yAxes, false));\r\n            }\r\n            return this._yAxes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Decorates a new [[XYSeries]] object with required parameters when it is\r\n     * added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Event\r\n     */\r\n    XYChart.prototype.handleSeriesAdded = function (event) {\r\n        try {\r\n            _super.prototype.handleSeriesAdded.call(this, event);\r\n            var series = event.newValue;\r\n            if (this.xAxes.length == 0 || this.yAxes.length == 0) {\r\n                registry.removeFromInvalidComponents(series);\r\n                series.dataInvalid = false;\r\n            }\r\n            $utils.used(series.xAxis); // this is enough to get axis, handled in getter\r\n            $utils.used(series.yAxis); // this is enough to get axis, handled in getter\r\n            series.maskBullets = series.maskBullets;\r\n            if (series.fill == undefined) {\r\n                if (this.patterns) {\r\n                    if (!$type.hasValue(series.stroke)) {\r\n                        series.stroke = this.colors.next();\r\n                    }\r\n                    series.fill = this.patterns.next();\r\n                    if ($type.hasValue(series.fillOpacity)) {\r\n                        series.fill.backgroundOpacity = series.fillOpacity;\r\n                    }\r\n                    if (series.stroke instanceof Color) {\r\n                        series.fill.stroke = series.stroke;\r\n                        series.fill.fill = series.stroke;\r\n                    }\r\n                }\r\n                else {\r\n                    series.fill = this.colors.next();\r\n                }\r\n            }\r\n            if (!$type.hasValue(series.stroke)) {\r\n                series.stroke = series.fill;\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.raiseCriticalError(e);\r\n        }\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"cursor\", {\r\n        /**\r\n         * @return Cursor\r\n         */\r\n        get: function () {\r\n            return this._cursor;\r\n        },\r\n        /**\r\n         * Chart's [[Cursor]].\r\n         *\r\n         * @param cursor  Cursor\r\n         */\r\n        set: function (cursor) {\r\n            if (this._cursor != cursor) {\r\n                if (this._cursor) {\r\n                    this.removeDispose(this._cursor);\r\n                }\r\n                this._cursor = cursor;\r\n                if (cursor) {\r\n                    // TODO this is wrong, fix it\r\n                    this._disposers.push(cursor);\r\n                    cursor.chart = this;\r\n                    cursor.shouldClone = false;\r\n                    cursor.parent = this._cursorContainer;\r\n                    cursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n                    cursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n                    cursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n                    cursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n                    cursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n                    cursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n                    cursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n                    cursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n                    cursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n                    if (this.tapToActivate) {\r\n                        // We need this in order to setup cursor properly\r\n                        this.setTapToActivate(this.tapToActivate);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Performs tasks when the cursor's position changes, e.g. shows proper\r\n     * tooltips on axes and series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.handleCursorPositionChange = function () {\r\n        var cursor = this.cursor;\r\n        if (cursor.visible && !cursor.isHiding) {\r\n            var xPosition_1 = this.cursor.xPosition;\r\n            var yPosition_1 = this.cursor.yPosition;\r\n            this.showSeriesTooltip({\r\n                x: xPosition_1,\r\n                y: yPosition_1\r\n            });\r\n            var exceptAxes_1 = [];\r\n            var snapToSeries = cursor.snapToSeries;\r\n            if (snapToSeries && !cursor.downPoint) {\r\n                if (snapToSeries instanceof XYSeries) {\r\n                    snapToSeries = [snapToSeries];\r\n                }\r\n                var dataItems_1 = [];\r\n                $array.each(snapToSeries, function (snpSeries) {\r\n                    var xAxis = snpSeries.xAxis;\r\n                    var yAxis = snpSeries.yAxis;\r\n                    if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n                        snpSeries.dataItems.each(function (dataItem) {\r\n                            dataItems_1.push(dataItem);\r\n                        });\r\n                        $array.move(exceptAxes_1, snpSeries.yAxis);\r\n                        $array.move(exceptAxes_1, snpSeries.xAxis);\r\n                    }\r\n                    else {\r\n                        if (snpSeries.baseAxis == snpSeries.xAxis) {\r\n                            $array.move(exceptAxes_1, snpSeries.yAxis);\r\n                            dataItems_1.push(xAxis.getSeriesDataItem(snpSeries, xAxis.toAxisPosition(xPosition_1), true));\r\n                        }\r\n                        if (snpSeries.baseAxis == snpSeries.yAxis) {\r\n                            $array.move(exceptAxes_1, snpSeries.xAxis);\r\n                            dataItems_1.push(yAxis.getSeriesDataItem(snpSeries, yAxis.toAxisPosition(yPosition_1), true));\r\n                        }\r\n                    }\r\n                });\r\n                var closestDataItem_1 = this.getClosest(dataItems_1, xPosition_1, yPosition_1);\r\n                if (closestDataItem_1) {\r\n                    this.series.each(function (series) {\r\n                        var closestSeries = closestDataItem_1.component;\r\n                        if (series != closestSeries) {\r\n                            series.hideTooltip();\r\n                            if (series.xAxis != closestSeries.xAxis) {\r\n                                series.xAxis.hideTooltip();\r\n                            }\r\n                            if (series.yAxis != closestSeries.yAxis) {\r\n                                series.yAxis.hideTooltip();\r\n                            }\r\n                        }\r\n                    });\r\n                    closestDataItem_1.component.showTooltipAtDataItem(closestDataItem_1);\r\n                    cursor.handleSnap(closestDataItem_1.component);\r\n                }\r\n            }\r\n            //}\r\n            this._seriesPoints = [];\r\n            if (this._cursorXPosition != xPosition_1) {\r\n                this.showAxisTooltip(this.xAxes, xPosition_1, exceptAxes_1);\r\n            }\r\n            if (this._cursorYPosition != yPosition_1) {\r\n                this.showAxisTooltip(this.yAxes, yPosition_1, exceptAxes_1);\r\n            }\r\n            if (this.arrangeTooltips) {\r\n                this.sortSeriesTooltips(this._seriesPoints);\r\n            }\r\n            if (this.legend) {\r\n                this.legend.afterDraw();\r\n            }\r\n        }\r\n    };\r\n    XYChart.prototype.getClosest = function (dataItems, xPosition, yPosition) {\r\n        var minDistance = Infinity;\r\n        var closestDataItem;\r\n        $array.eachContinue(dataItems, function (dataItem) {\r\n            if (dataItem) {\r\n                var xAxis = dataItem.component.xAxis;\r\n                var yAxis = dataItem.component.yAxis;\r\n                var xPos = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.toAxisPosition(xPosition)));\r\n                var yPos = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.toAxisPosition(yPosition)));\r\n                var xField = dataItem.component.xField;\r\n                var yField = dataItem.component.yField;\r\n                if (xAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(xField))) {\r\n                    return true;\r\n                }\r\n                if (yAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(yField))) {\r\n                    return true;\r\n                }\r\n                var dxPosition = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\")));\r\n                var dyPosition = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.getPositionY(dataItem, yField, dataItem.locations[yField], \"valueY\")));\r\n                var distance = Math.sqrt(Math.pow(xPos - dxPosition, 2) + Math.pow(yPos - dyPosition, 2));\r\n                if (distance < minDistance) {\r\n                    minDistance = distance;\r\n                    closestDataItem = dataItem;\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n        return closestDataItem;\r\n    };\r\n    /**\r\n     * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.handleHideCursor = function () {\r\n        this.hideObjectTooltip(this.xAxes);\r\n        this.hideObjectTooltip(this.yAxes);\r\n        this.hideObjectTooltip(this.series);\r\n        this._cursorXPosition = undefined;\r\n        this._cursorYPosition = undefined;\r\n        this.updateSeriesLegend();\r\n    };\r\n    /**\r\n     * Updates values for each series' legend item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.updateSeriesLegend = function () {\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            series.updateLegendValue();\r\n        });\r\n    };\r\n    /**\r\n     * Hides a tooltip for a list of objects.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param sprites  A list of sprites to hide tooltip for\r\n     */\r\n    XYChart.prototype.hideObjectTooltip = function (sprites) {\r\n        $iter.each(sprites.iterator(), function (sprite) {\r\n            sprite.hideTooltip(0);\r\n        });\r\n    };\r\n    /**\r\n     * Shows a tooltip for all chart's series, using specific coordinates as a\r\n     * reference point.\r\n     *\r\n     * The tooltip might be shown at different coordinates depending on the\r\n     * actual data point's position, overlapping with other tooltips, etc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position  Reference point\r\n     */\r\n    XYChart.prototype.showSeriesTooltip = function (position) {\r\n        var _this = this;\r\n        if (!position) {\r\n            this.series.each(function (series) {\r\n                series.hideTooltip();\r\n            });\r\n            return;\r\n        }\r\n        var seriesPoints = [];\r\n        this.series.each(function (series) {\r\n            //if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n            if ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n                // void\r\n            }\r\n            else {\r\n                var point = series.showTooltipAtPosition(position.x, position.y);\r\n                if (point) {\r\n                    series.tooltip.setBounds($utils.spriteRectToSvg({ x: 0, y: 0, width: _this.pixelWidth, height: _this.pixelHeight }, _this));\r\n                    seriesPoints.push({ series: series, point: point });\r\n                }\r\n            }\r\n            //}\r\n        });\r\n        if (this.arrangeTooltips) {\r\n            this.sortSeriesTooltips(seriesPoints);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.sortSeriesTooltips = function (seriesPoints) {\r\n        if (seriesPoints.length > 0) {\r\n            var cursor_1 = this.cursor;\r\n            if (cursor_1 && $type.isNumber(cursor_1.maxTooltipDistance)) {\r\n                var cursorPoint_1 = $utils.spritePointToSvg({ x: cursor_1.point.x, y: cursor_1.point.y }, cursor_1);\r\n                var nearestSeries_1;\r\n                var nearestPoint_1;\r\n                var smallestDistance_1 = Infinity;\r\n                $array.each(seriesPoints, function (seriesPoint) {\r\n                    var series = seriesPoint.series;\r\n                    var fixedPoint = seriesPoint.point;\r\n                    if (fixedPoint) {\r\n                        var point = { x: fixedPoint.x, y: fixedPoint.y };\r\n                        var distance = Math.abs($math.getDistance(point, cursorPoint_1));\r\n                        if (distance < smallestDistance_1) {\r\n                            nearestPoint_1 = point;\r\n                            smallestDistance_1 = distance;\r\n                            nearestSeries_1 = series;\r\n                        }\r\n                    }\r\n                });\r\n                var newSeriesPoints_1 = [];\r\n                if (nearestSeries_1) {\r\n                    $array.each(seriesPoints, function (seriesPoint) {\r\n                        if (Math.abs($math.getDistance(seriesPoint.point, nearestPoint_1)) <= Math.abs(cursor_1.maxTooltipDistance)) {\r\n                            newSeriesPoints_1.push({ series: seriesPoint.series, point: seriesPoint.point });\r\n                        }\r\n                        else {\r\n                            var tooltipDataItem = seriesPoint.series.tooltipDataItem;\r\n                            if (tooltipDataItem) {\r\n                                $array.each(tooltipDataItem.sprites, function (sprite) {\r\n                                    sprite.isHover = false;\r\n                                    sprite.handleOutReal(); // to avoid flicker\r\n                                });\r\n                            }\r\n                            seriesPoint.series.tooltip.hide(0);\r\n                        }\r\n                    });\r\n                    if (cursor_1.maxTooltipDistance < 0) {\r\n                        if (newSeriesPoints_1.length > 0) {\r\n                            $array.each(newSeriesPoints_1, function (np) {\r\n                                if (nearestSeries_1 != np.series) {\r\n                                    np.series.tooltip.hide(0);\r\n                                }\r\n                            });\r\n                        }\r\n                        newSeriesPoints_1 = [{ series: nearestSeries_1, point: nearestPoint_1 }];\r\n                    }\r\n                }\r\n                seriesPoints = newSeriesPoints_1;\r\n            }\r\n            var topLeft_1 = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n            var bottomRight_1 = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n            var sum_1 = 0;\r\n            var filteredSeriesPoints_1 = [];\r\n            $array.each(seriesPoints, function (seriesPoint) {\r\n                var point = seriesPoint.point;\r\n                if (point && $math.isInRectangle(point, { x: topLeft_1.x, y: topLeft_1.y, width: bottomRight_1.x - topLeft_1.x, height: bottomRight_1.y - topLeft_1.y })) {\r\n                    filteredSeriesPoints_1.push({ point: point, series: seriesPoint.series });\r\n                    sum_1 += point.y;\r\n                }\r\n            });\r\n            seriesPoints = filteredSeriesPoints_1;\r\n            var firstSeries = this.series.getIndex(0);\r\n            var inversed = false;\r\n            if (firstSeries && firstSeries.yAxis && firstSeries.yAxis.renderer.inversed) {\r\n                inversed = true;\r\n            }\r\n            if (inversed) {\r\n                seriesPoints.sort(function (a, b) { return $number.order(a.point.y, b.point.y); });\r\n            }\r\n            else {\r\n                seriesPoints.sort(function (a, b) { return $number.order(b.point.y, a.point.y); });\r\n                seriesPoints.reverse();\r\n            }\r\n            var averageY = sum_1 / seriesPoints.length;\r\n            var maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n            if (seriesPoints.length > 0) {\r\n                var top_1 = topLeft_1.y;\r\n                var bottom = bottomRight_1.y;\r\n                // TODO is this needed ?\r\n                $utils.spritePointToDocument({ x: 0, y: top_1 }, this);\r\n                var dropped = false;\r\n                if (averageY > top_1 + (bottom - top_1) / 2) {\r\n                    var nextHeight = bottom;\r\n                    for (var i = seriesPoints.length - 1; i >= 0; i--) {\r\n                        var series = seriesPoints[i].series;\r\n                        var tooltip = series.tooltip;\r\n                        var pointY = seriesPoints[i].point.y;\r\n                        tooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n                        if (tooltip.invalid) {\r\n                            tooltip.validate();\r\n                        }\r\n                        tooltip.toBack();\r\n                        nextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n                        if (nextHeight < -maxY) {\r\n                            dropped = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (averageY <= top_1 + (bottom - top_1) / 2 || dropped) {\r\n                    var nextY = top_1;\r\n                    for (var i = 0, len = seriesPoints.length; i < len; i++) {\r\n                        var series = seriesPoints[i].series;\r\n                        var pointY = seriesPoints[i].point.y;\r\n                        var tooltip = series.tooltip;\r\n                        tooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n                        if (tooltip.invalid) {\r\n                            tooltip.validate();\r\n                        }\r\n                        tooltip.toBack();\r\n                        nextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Shows tooltips for a list of axes at specific position.\r\n     *\r\n     * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n     * vertical axes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axes      List of axes to show tooltip on\r\n     * @param position  Position (px)\r\n     */\r\n    XYChart.prototype.showAxisTooltip = function (axes, position, except) {\r\n        var _this = this;\r\n        $iter.each(axes.iterator(), function (axis) {\r\n            if (!except || except.indexOf(axis) == -1) {\r\n                if (_this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n                    axis.showTooltipAtPosition(position);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n     *\r\n     * @param axis   Axis\r\n     * @param range  Range\r\n     * @return Modified range\r\n     */\r\n    XYChart.prototype.getUpdatedRange = function (axis, range) {\r\n        if (!axis) {\r\n            return;\r\n        }\r\n        var start;\r\n        var end;\r\n        var inversed = axis.renderer.inversed;\r\n        if (inversed) {\r\n            $math.invertRange(range);\r\n            start = 1 - axis.end;\r\n            end = 1 - axis.start;\r\n        }\r\n        else {\r\n            start = axis.start;\r\n            end = axis.end;\r\n        }\r\n        var difference = end - start;\r\n        return {\r\n            start: start + range.start * difference,\r\n            end: start + range.end * difference\r\n        };\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user finishes zooming using chart\r\n     * cursor, e.g. zooms axes.\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorZoomEnd = function (event) {\r\n        var cursor = this.cursor;\r\n        var behavior = cursor.behavior;\r\n        if (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n            var xRange = cursor.xRange;\r\n            if (xRange && this.xAxes.length > 0) {\r\n                xRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n                xRange.priority = \"start\";\r\n                this.zoomAxes(this.xAxes, xRange);\r\n            }\r\n        }\r\n        if (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n            var yRange = cursor.yRange;\r\n            if (yRange && this.yAxes.length > 0) {\r\n                yRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n                yRange.priority = \"start\";\r\n                this.zoomAxes(this.yAxes, yRange);\r\n            }\r\n        }\r\n        this.handleHideCursor();\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorPanStart = function (event) {\r\n        var xAxis = this.xAxes.getIndex(0);\r\n        if (xAxis) {\r\n            this._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n        }\r\n        var yAxis = this.yAxes.getIndex(0);\r\n        if (yAxis) {\r\n            this._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n        }\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user ends panning\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorPanEnd = function (event) {\r\n        var cursor = this.cursor;\r\n        var behavior = cursor.behavior;\r\n        if (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n            var panEndRange = this._panEndXRange;\r\n            var delta = 0;\r\n            if (panEndRange.start < 0) {\r\n                delta = panEndRange.start;\r\n            }\r\n            if (panEndRange.end > 1) {\r\n                delta = panEndRange.end - 1;\r\n            }\r\n            this.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n            this._panEndXRange = undefined;\r\n            this._panStartXRange = undefined;\r\n        }\r\n        if (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n            var panEndRange = this._panEndYRange;\r\n            var delta = 0;\r\n            if (panEndRange.start < 0) {\r\n                delta = panEndRange.start;\r\n            }\r\n            if (panEndRange.end > 1) {\r\n                delta = panEndRange.end - 1;\r\n            }\r\n            this.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n            this._panEndYRange = undefined;\r\n            this._panStartYRange = undefined;\r\n        }\r\n    };\r\n    XYChart.prototype.handleCursorCanceled = function () {\r\n        this._panEndXRange = undefined;\r\n        this._panStartXRange = undefined;\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorPanning = function (event) {\r\n        var cursor = this.cursor;\r\n        var behavior = cursor.behavior;\r\n        var maxPanOut = cursor.maxPanOut;\r\n        if (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n            var panStartRange = this._panStartXRange;\r\n            var range = cursor.xRange;\r\n            var axisRange = this.getCommonAxisRange(this.xAxes);\r\n            var difference = (panStartRange.end - panStartRange.start);\r\n            var delta = range.start * (axisRange.end - axisRange.start);\r\n            var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n            var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n            if (newStart <= 0) {\r\n                newEnd = newStart + difference;\r\n            }\r\n            if (newEnd >= 1) {\r\n                newStart = newEnd - difference;\r\n            }\r\n            var newRange = {\r\n                start: newStart,\r\n                end: newEnd\r\n            };\r\n            this._panEndXRange = newRange;\r\n            this.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n        }\r\n        if (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n            var panStartRange = this._panStartYRange;\r\n            var range = cursor.yRange;\r\n            var axisRange = this.getCommonAxisRange(this.yAxes);\r\n            var difference = panStartRange.end - panStartRange.start;\r\n            var delta = range.start * (axisRange.end - axisRange.start);\r\n            var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n            var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n            if (newStart <= 0) {\r\n                newEnd = newStart + difference;\r\n            }\r\n            if (newEnd >= 1) {\r\n                newStart = newEnd - difference;\r\n            }\r\n            var newRange = {\r\n                start: newStart,\r\n                end: newEnd\r\n            };\r\n            this._panEndYRange = newRange;\r\n            this.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n        }\r\n        this.handleHideCursor();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.handleYAxisSet = function (series) {\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user starts zooming using chart\r\n     * cursor, e.g. zooms axes.\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorZoomStart = function (event) {\r\n        // Nothing here\r\n        // This method is here only as a \"placeholder\" for extending classes to\r\n        // override if necessary\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"scrollbarX\", {\r\n        /**\r\n         * @return Scrollbar\r\n         */\r\n        get: function () {\r\n            return this._scrollbarX;\r\n        },\r\n        /**\r\n         * Horizontal (X) scrollbar.\r\n         *\r\n         * @param scrollbar Scrollbar\r\n         */\r\n        set: function (scrollbar) {\r\n            var _this = this;\r\n            if (this._scrollbarX) {\r\n                this.removeDispose(this._scrollbarX);\r\n            }\r\n            this._scrollbarX = scrollbar;\r\n            if (scrollbar) {\r\n                this._disposers.push(scrollbar);\r\n                scrollbar.parent = this.topAxesContainer;\r\n                scrollbar.shouldClone = false;\r\n                scrollbar.startGrip.exportable = false;\r\n                scrollbar.endGrip.exportable = false;\r\n                scrollbar.toBack();\r\n                scrollbar.orientation = \"horizontal\";\r\n                scrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n                // accessibility related\r\n                scrollbar.adapter.add(\"positionValue\", function (arg) {\r\n                    var xAxis = _this.xAxes.getIndex(0);\r\n                    if (xAxis) {\r\n                        arg.value = xAxis.getPositionLabel(xAxis.renderer.inversed\r\n                            ? 1 - arg.position\r\n                            : arg.position);\r\n                    }\r\n                    return arg;\r\n                });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart.prototype, \"scrollbarY\", {\r\n        /**\r\n         * @return Scrollbar\r\n         */\r\n        get: function () {\r\n            return this._scrollbarY;\r\n        },\r\n        /**\r\n         * Vertical (Y) scrollbar.\r\n         *\r\n         * @param scrollbar Scrollbar\r\n         */\r\n        set: function (scrollbar) {\r\n            var _this = this;\r\n            if (this._scrollbarY) {\r\n                this.removeDispose(this._scrollbarY);\r\n            }\r\n            this._scrollbarY = scrollbar;\r\n            if (scrollbar) {\r\n                this._disposers.push(scrollbar);\r\n                scrollbar.parent = this.rightAxesContainer;\r\n                scrollbar.startGrip.exportable = false;\r\n                scrollbar.shouldClone = false;\r\n                scrollbar.endGrip.exportable = false;\r\n                scrollbar.toFront();\r\n                scrollbar.orientation = \"vertical\";\r\n                scrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n                // accessibility related\r\n                scrollbar.adapter.add(\"positionValue\", function (arg) {\r\n                    var yAxis = _this.yAxes.getIndex(0);\r\n                    if (yAxis) {\r\n                        arg.value = yAxis.getPositionLabel(arg.position);\r\n                    }\r\n                    return arg;\r\n                });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n     * on it changes.\r\n     *\r\n     * @param event Scrollbar range change event\r\n     */\r\n    XYChart.prototype.handleXScrollbarChange = function (event) {\r\n        if (this.inited) {\r\n            var scrollbar = event.target;\r\n            var range = scrollbar.range;\r\n            if (range.start == 0) {\r\n                range.priority = \"start\";\r\n            }\r\n            if (range.end == 1) {\r\n                range.priority = \"end\";\r\n            }\r\n            range = this.zoomAxes(this.xAxes, range);\r\n            scrollbar.fixRange(range);\r\n        }\r\n    };\r\n    /**\r\n     * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n     * on it changes.\r\n     *\r\n     * @param event Scrollbar range change event\r\n     */\r\n    XYChart.prototype.handleYScrollbarChange = function (event) {\r\n        if (this.inited) {\r\n            var scrollbar = event.target;\r\n            var range = scrollbar.range;\r\n            if (range.end == 1) {\r\n                range.priority = \"end\";\r\n            }\r\n            if (range.start == 0) {\r\n                range.priority = \"start\";\r\n            }\r\n            range = this.zoomAxes(this.yAxes, range);\r\n            scrollbar.fixRange(range);\r\n        }\r\n    };\r\n    /**\r\n     * Zooms axes that are affected by to specific relative range.\r\n     *\r\n     * @param axes       List of axes to zoom\r\n     * @param range      Range of values to zoom to (0-1)\r\n     * @param instantly  If set to `true` will skip zooming animation\r\n     * @return Recalculated range that is common to all involved axes\r\n     */\r\n    XYChart.prototype.zoomAxes = function (axes, range, instantly, round, declination) {\r\n        var realRange = { start: 0, end: 1 };\r\n        this.showSeriesTooltip(); // hides\r\n        if (!this.dataInvalid) {\r\n            $iter.each(axes.iterator(), function (axis) {\r\n                if (axis.renderer.inversed) {\r\n                    range = $math.invertRange(range);\r\n                }\r\n                axis.hideTooltip(0);\r\n                if (round) {\r\n                    //let diff = range.end - range.start;\r\n                    if (axis instanceof CategoryAxis) {\r\n                        var cellWidth = axis.getCellEndPosition(0) - axis.getCellStartPosition(0);\r\n                        range.start = axis.roundPosition(range.start + cellWidth / 2 - (axis.startLocation) * cellWidth, axis.startLocation);\r\n                        range.end = axis.roundPosition(range.end - cellWidth / 2 + (1 - axis.endLocation) * cellWidth, axis.endLocation);\r\n                    }\r\n                    else {\r\n                        range.start = axis.roundPosition(range.start + 0.0001, 0, axis.startLocation);\r\n                        range.end = axis.roundPosition(range.end + 0.0001, 0, axis.endLocation);\r\n                    }\r\n                }\r\n                var axisRange = axis.zoom(range, instantly, instantly, declination);\r\n                if (axis.renderer.inversed) {\r\n                    axisRange = $math.invertRange(axisRange);\r\n                }\r\n                realRange = axisRange;\r\n            });\r\n        }\r\n        return realRange;\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"maskBullets\", {\r\n        /**\r\n         * @return Mask bullet container?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maskBullets\");\r\n        },\r\n        /**\r\n         * Indicates if bullet container is masked.\r\n         *\r\n         * If it is set to `true`, any bullets that do not fit into bullet container\r\n         * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n         * of the plot area so they are not cut off.\r\n         *\r\n         * @param value Mask bullet container?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"maskBullets\", value, true) && this.bulletsContainer) {\r\n                if (value) {\r\n                    this.bulletsContainer.mask = this._bulletMask;\r\n                }\r\n                else {\r\n                    this.bulletsContainer.mask = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart.prototype, \"arrangeTooltips\", {\r\n        /**\r\n         * @return Arrange tooltips?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"arrangeTooltips\");\r\n        },\r\n        /**\r\n         * Indicates if chart should arrange series tooltips so that they would not\r\n         * overlap.\r\n         *\r\n         * If set to `true` (default), the chart will adjust vertical positions of\r\n         * all simultaneously shown tooltips to avoid overlapping.\r\n         *\r\n         * However, if you have a vertically-arranged chart, it might not make sense,\r\n         * because tooltips would most probably not be aligned horizontally. In this\r\n         * case it would probably be a good idea to set this setting to `false`.\r\n         *\r\n         * @default true\r\n         * @param value Arrange tooltips?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"arrangeTooltips\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles mouse wheel event.\r\n     *\r\n     * @param event  Original event\r\n     */\r\n    XYChart.prototype.handleWheel = function (event) {\r\n        var plotContainer = this.plotContainer;\r\n        var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n        var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n        var shift = event.shift.y;\r\n        this.handleWheelReal(shift, this.mouseWheelBehavior, plotPoint);\r\n    };\r\n    /**\r\n     * Handles mouse wheel event.\r\n     *\r\n     * @param event  Original event\r\n     */\r\n    XYChart.prototype.handleHorizontalWheel = function (event) {\r\n        var plotContainer = this.plotContainer;\r\n        var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n        var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n        this.handleWheelReal(event.shift.x, this.horizontalMouseWheelBehavior, plotPoint);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.handleWheelReal = function (shift, mouseWheelBehavior, plotPoint) {\r\n        if (shift != 0) {\r\n            var plotContainer = this.plotContainer;\r\n            var rangeX = this.getCommonAxisRange(this.xAxes);\r\n            var rangeY = this.getCommonAxisRange(this.yAxes);\r\n            var shiftStep = 0.1;\r\n            var maxPanOut = 0;\r\n            if (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n                var differenceX = rangeX.end - rangeX.start;\r\n                var newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100 * (rangeX.end - rangeX.start));\r\n                var newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (rangeX.end - rangeX.start), 1 + maxPanOut);\r\n                if (newStartX <= 0) {\r\n                    newEndX = newStartX + differenceX;\r\n                }\r\n                if (newEndX >= 1) {\r\n                    newStartX = newEndX - differenceX;\r\n                }\r\n                this.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n            }\r\n            if (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n                shift *= -1;\r\n                var differenceY = rangeY.end - rangeY.start;\r\n                var newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100 * (rangeY.end - rangeY.start));\r\n                var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n                if (newStartY <= 0) {\r\n                    newEndY = newStartY + differenceY;\r\n                }\r\n                if (newEndY >= 1) {\r\n                    newStartY = newEndY - differenceY;\r\n                }\r\n                this.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n            }\r\n            if (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n                var locationX = plotPoint.x / plotContainer.maxWidth;\r\n                var location2X = this.xAxes.getIndex(0).toAxisPosition(locationX);\r\n                var newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * (rangeX.end - rangeX.start) * shift / 100 * locationX);\r\n                newStartX = Math.min(newStartX, location2X);\r\n                var newEndX = Math.min(rangeX.end + shiftStep * (rangeX.end - rangeX.start) * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n                newEndX = Math.max(newEndX, location2X);\r\n                this.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n            }\r\n            if (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n                var locationY = plotPoint.y / plotContainer.maxHeight;\r\n                var location2Y = this.yAxes.getIndex(0).toAxisPosition(locationY);\r\n                var newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * (rangeY.end - rangeY.start) * shift / 100 * (1 - locationY));\r\n                newStartY = Math.min(newStartY, location2Y);\r\n                var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n                newEndY = Math.max(newEndY, location2Y);\r\n                this.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"mouseWheelBehavior\", {\r\n        /**\r\n         * @return Mouse wheel behavior\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"mouseWheelBehavior\");\r\n        },\r\n        /**\r\n         * Specifies action for when mouse wheel is used when over the chart.\r\n         *\r\n         * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`,`\"panXY\"`, `\"none\"` (default).\r\n         *\r\n         * You can control sensitivity of wheel zooming via `mouseOptions`.\r\n         *\r\n         * @default \"none\"\r\n         * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n         * @param mouse wheel behavior\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n                if (value != \"none\") {\r\n                    this._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n                    this._disposers.push(this._mouseWheelDisposer);\r\n                }\r\n                else {\r\n                    if (this._mouseWheelDisposer) {\r\n                        this.plotContainer.wheelable = false;\r\n                        this.plotContainer.hoverable = false;\r\n                        this._mouseWheelDisposer.dispose();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart.prototype, \"horizontalMouseWheelBehavior\", {\r\n        /**\r\n         * @return Horizontal mouse wheel behavior\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"horizontalMouseWheelBehavior\");\r\n        },\r\n        /**\r\n         * Specifies action for when horizontal mouse wheel is used when over the chart.\r\n         *\r\n         * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n         *\r\n         * @default \"none\"\r\n         * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n         * @param mouse wheel behavior\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"horizontalMouseWheelBehavior\", value)) {\r\n                if (value != \"none\") {\r\n                    this._mouseWheelDisposer2 = this.plotContainer.events.on(\"wheel\", this.handleHorizontalWheel, this, false);\r\n                    this._disposers.push(this._mouseWheelDisposer2);\r\n                }\r\n                else {\r\n                    if (this._mouseWheelDisposer2) {\r\n                        this.plotContainer.wheelable = false;\r\n                        this.plotContainer.hoverable = false;\r\n                        this._mouseWheelDisposer2.dispose();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n     * so that particular chart types can popuplate this setting with their\r\n     * own type-specific data fields so they are parsed properly.\r\n     *\r\n     * @param fields  Array of date fields\r\n     * @return Array of date fields populated with chart's date fields\r\n     */\r\n    XYChart.prototype.dataSourceDateFields = function (fields) {\r\n        var _this = this;\r\n        // Process parent\r\n        fields = _super.prototype.dataSourceDateFields.call(this, fields);\r\n        // Check if we have any series with date-fields\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            fields = _this.populateDataSourceFields(fields, series.dataFields, [\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]);\r\n        });\r\n        return fields;\r\n    };\r\n    /**\r\n     * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n     * so that particular chart types can popuplate this setting with their\r\n     * own type-specific data fields so they are parsed properly.\r\n     *\r\n     * @param value  Array of number fields\r\n     * @return Array of number fields populated with chart's number fields\r\n     */\r\n    XYChart.prototype.dataSourceNumberFields = function (fields) {\r\n        var _this = this;\r\n        fields = _super.prototype.dataSourceDateFields.call(this, fields);\r\n        // Check if we have any series with date-fields\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            fields = _this.populateDataSourceFields(fields, series.dataFields, [\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]);\r\n        });\r\n        return fields;\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    XYChart.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Save axis ranges for later processing\r\n            var xAxes = [];\r\n            var yAxes = [];\r\n            // Set up axes\r\n            if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n                for (var i = 0, len = config.xAxes.length; i < len; i++) {\r\n                    if (!config.xAxes[i].type) {\r\n                        throw Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n                    }\r\n                    else if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n                        // Maybe convert string dates?\r\n                        for (var x = 0, len_1 = config.xAxes[i][\"axisRanges\"].length; x < len_1; x++) {\r\n                            var range = config.xAxes[i][\"axisRanges\"][x];\r\n                            if ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n                                range.date = this.dateFormatter.parse(range.date);\r\n                            }\r\n                            if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n                                range.endDate = this.dateFormatter.parse(range.endDate);\r\n                            }\r\n                        }\r\n                        xAxes.push({\r\n                            axisRanges: config.xAxes[i][\"axisRanges\"],\r\n                            index: i\r\n                        });\r\n                        delete (config.xAxes[i][\"axisRanges\"]);\r\n                    }\r\n                }\r\n            }\r\n            if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n                for (var i = 0, len = config.yAxes.length; i < len; i++) {\r\n                    if (!config.yAxes[i].type) {\r\n                        throw Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n                    }\r\n                    else if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n                        // Maybe convert string dates?\r\n                        for (var x = 0, len_2 = config.yAxes[i][\"axisRanges\"].length; x < len_2; x++) {\r\n                            var range = config.yAxes[i][\"axisRanges\"][x];\r\n                            if ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n                                range.date = this.dateFormatter.parse(range.date);\r\n                            }\r\n                            if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n                                range.endDate = this.dateFormatter.parse(range.endDate);\r\n                            }\r\n                        }\r\n                        yAxes.push({\r\n                            axisRanges: config.yAxes[i][\"axisRanges\"],\r\n                            index: i\r\n                        });\r\n                        delete (config.yAxes[i][\"axisRanges\"]);\r\n                    }\r\n                }\r\n            }\r\n            // Set up series\r\n            if ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n                for (var i = 0, len = config.series.length; i < len; i++) {\r\n                    config.series[i].type = config.series[i].type || \"LineSeries\";\r\n                }\r\n            }\r\n            // Set up cursor\r\n            if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n                config.cursor.type = \"XYCursor\";\r\n            }\r\n            // Set up scrollbars\r\n            if ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n                config.scrollbarX.type = \"Scrollbar\";\r\n            }\r\n            if ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n                config.scrollbarY.type = \"Scrollbar\";\r\n            }\r\n            _super.prototype.processConfig.call(this, config);\r\n            // Finish up with ranges.\r\n            // We need to do this here because series are processed last in JSON\r\n            // config. Therefore their respective objects are not yet are available\r\n            // when axis (and respectively their ranges) are being processed.\r\n            if (yAxes.length) {\r\n                for (var i = 0, len = yAxes.length; i < len; i++) {\r\n                    this.yAxes.getIndex(yAxes[i].index).config = {\r\n                        axisRanges: yAxes[i].axisRanges\r\n                    };\r\n                }\r\n            }\r\n            if (xAxes.length) {\r\n                for (var i = 0, len = xAxes.length; i < len; i++) {\r\n                    this.xAxes.getIndex(xAxes[i].index).config = {\r\n                        axisRanges: xAxes[i].axisRanges\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param a  Element 1\r\n     * @param b  Element 2\r\n     * @return Sorting number\r\n     */\r\n    XYChart.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        // Must come last\r\n        else if (a == \"scrollbarX\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"scrollbarX\") {\r\n            return -1;\r\n        }\r\n        else if (a == \"scrollbarY\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"scrollbarY\") {\r\n            return -1;\r\n        }\r\n        else if (a == \"cursor\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"cursor\") {\r\n            return -1;\r\n        }\r\n        else if (a == \"series\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"series\") {\r\n            return -1;\r\n        }\r\n        else {\r\n            return _super.prototype.configOrder.call(this, a, b);\r\n        }\r\n    };\r\n    /**\r\n     * Creates a new Series of type suitable for this chart.\r\n     *\r\n     * @return New series\r\n     */\r\n    XYChart.prototype.createSeries = function () {\r\n        return new XYSeries();\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"zoomOutButton\", {\r\n        /**\r\n         * @return Zoom out button\r\n         */\r\n        get: function () {\r\n            return this._zoomOutButton;\r\n        },\r\n        /**\r\n         * A [[Button]] element that is used for zooming out the chart.\r\n         *\r\n         * This button appears only when chart is zoomed in, and disappears\r\n         * autoamatically when it is zoome dout.\r\n         *\r\n         * @param button  Zoom out button\r\n         */\r\n        set: function (button) {\r\n            var _this = this;\r\n            this._zoomOutButton = button;\r\n            if (button) {\r\n                button.events.on(\"hit\", function () {\r\n                    _this.zoomAxes(_this.xAxes, { start: 0, end: 1 });\r\n                    _this.zoomAxes(_this.yAxes, { start: 0, end: 1 });\r\n                }, undefined, false);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all parameters from another [[XYChart]].\r\n     *\r\n     * @param source Source XYChart\r\n     */\r\n    XYChart.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        source.xAxes.each(function (axis) {\r\n            _this.xAxes.push(axis.clone());\r\n        });\r\n        source.yAxes.each(function (axis) {\r\n            _this.yAxes.push(axis.clone());\r\n        });\r\n        //this.xAxes.copyFrom(source.xAxes);\r\n        //this.yAxes.copyFrom(source.yAxes);\r\n        _super.prototype.copyFrom.call(this, source);\r\n        //this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n        if (source.cursor) {\r\n            this.cursor = source.cursor.clone();\r\n        }\r\n        if (source.scrollbarX) {\r\n            this.scrollbarX = source.scrollbarX.clone();\r\n        }\r\n        if (source.scrollbarY) {\r\n            this.scrollbarY = source.scrollbarY.clone();\r\n        }\r\n        //@todo copy all container properties\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        var scrollbarX = this.scrollbarX;\r\n        if (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n            scrollbarX.scrollbarChart.disposeData();\r\n        }\r\n        var scrollbarY = this.scrollbarY;\r\n        if (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n            scrollbarY.scrollbarChart.disposeData();\r\n        }\r\n        this.xAxes.each(function (axis) {\r\n            axis.disposeData();\r\n        });\r\n        this.yAxes.each(function (axis) {\r\n            axis.disposeData();\r\n        });\r\n    };\r\n    /**\r\n     * Adds one or several (array) of data items to the existing data.\r\n     *\r\n     * @param rawDataItem One or many raw data item objects\r\n     */\r\n    XYChart.prototype.addData = function (rawDataItem, removeCount) {\r\n        if (this.scrollbarX instanceof XYChartScrollbar) {\r\n            this.addScrollbarData(this.scrollbarX, removeCount);\r\n        }\r\n        if (this.scrollbarY instanceof XYChartScrollbar) {\r\n            this.addScrollbarData(this.scrollbarY, removeCount);\r\n        }\r\n        _super.prototype.addData.call(this, rawDataItem, removeCount);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.addScrollbarData = function (scrollbar, removeCount) {\r\n        var chart = scrollbar.scrollbarChart;\r\n        chart._parseDataFrom = chart.data.length;\r\n        chart.invalidateData();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.removeScrollbarData = function (scrollbar, removeCount) {\r\n        var chart = scrollbar.scrollbarChart;\r\n        if ($type.isNumber(removeCount)) {\r\n            while (removeCount > 0) {\r\n                var dataItem = this.dataItems.getIndex(0);\r\n                if (dataItem) {\r\n                    chart.dataItems.remove(dataItem);\r\n                }\r\n                chart.dataUsers.each(function (dataUser) {\r\n                    var dataItem = dataUser.dataItems.getIndex(0);\r\n                    if (dataItem) {\r\n                        dataUser.dataItems.remove(dataItem);\r\n                    }\r\n                });\r\n                chart._parseDataFrom--;\r\n                removeCount--;\r\n            }\r\n            chart.invalidateData();\r\n        }\r\n    };\r\n    /**\r\n     * Removes elements from the beginning of data\r\n     *\r\n     * @param count number of elements to remove\r\n     */\r\n    XYChart.prototype.removeData = function (count) {\r\n        if (this.scrollbarX instanceof XYChartScrollbar) {\r\n            this.removeScrollbarData(this.scrollbarX, count);\r\n        }\r\n        if (this.scrollbarY instanceof XYChartScrollbar) {\r\n            this.removeScrollbarData(this.scrollbarY, count);\r\n        }\r\n        _super.prototype.removeData.call(this, count);\r\n    };\r\n    /**\r\n     * @param  value  Tap to activate?\r\n     */\r\n    XYChart.prototype.setTapToActivate = function (value) {\r\n        _super.prototype.setTapToActivate.call(this, value);\r\n        if (this.cursor) {\r\n            this.cursor.interactions.isTouchProtected = value;\r\n            this.plotContainer.interactions.isTouchProtected = value;\r\n        }\r\n    };\r\n    XYChart.prototype.handleTapToActivate = function () {\r\n        _super.prototype.handleTapToActivate.call(this);\r\n        if (this.cursor) {\r\n            this.cursor.interactions.isTouchProtected = false;\r\n            this.plotContainer.interactions.isTouchProtected = false;\r\n        }\r\n    };\r\n    XYChart.prototype.handleTapToActivateDeactivation = function () {\r\n        _super.prototype.handleTapToActivateDeactivation.call(this);\r\n        if (this.cursor) {\r\n            this.cursor.interactions.isTouchProtected = true;\r\n            this.plotContainer.interactions.isTouchProtected = true;\r\n        }\r\n    };\r\n    return XYChart;\r\n}(SerialChart));\r\nexport { XYChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n/**\r\n * Add default responsive rules\r\n */\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.maybeXS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof XYChart && target.scrollbarX) {\r\n            var state = target.states.create(stateId);\r\n            var sbstate = target.scrollbarX.states.create(stateId);\r\n            sbstate.properties.disabled = true;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.maybeXS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof XYChart && target.scrollbarY) {\r\n            var state = target.states.create(stateId);\r\n            var sbstate = target.scrollbarY.states.create(stateId);\r\n            sbstate.properties.disabled = true;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n//# sourceMappingURL=XYChart.js.map","/**\r\n * Module for building 3D serial charts.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar XYChart3DDataItem = /** @class */ (function (_super) {\r\n    __extends(XYChart3DDataItem, _super);\r\n    function XYChart3DDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"XYChart3DDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return XYChart3DDataItem;\r\n}(XYChartDataItem));\r\nexport { XYChart3DDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nvar XYChart3D = /** @class */ (function (_super) {\r\n    __extends(XYChart3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYChart3D() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Type of the axis renderer to use for X axes.\r\n         */\r\n        _this._axisRendererX = AxisRendererX3D;\r\n        /**\r\n         * Type of the axis renderer to use for Y axes.\r\n         */\r\n        _this._axisRendererY = AxisRendererY3D;\r\n        _this.className = \"XYChart3D\";\r\n        // Set defaults\r\n        _this.depth = 30;\r\n        _this.angle = 30;\r\n        // Creeate container for columns\r\n        var columnsContainer = _this.seriesContainer.createChild(Container);\r\n        columnsContainer.shouldClone = false;\r\n        columnsContainer.isMeasured = false;\r\n        columnsContainer.layout = \"none\";\r\n        _this.columnsContainer = columnsContainer;\r\n        _this.columnsContainer.mask = _this.createChild(Sprite);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * This is done because for some reason IE doesn't change mask if path of a\r\n     * mask changes.\r\n     */\r\n    XYChart3D.prototype.updateSeriesMasks = function () {\r\n        _super.prototype.updateSeriesMasks.call(this);\r\n        if ($utils.isIE()) {\r\n            var columnsContainer = this.columnsContainer;\r\n            var mask = columnsContainer.mask;\r\n            columnsContainer.mask = undefined;\r\n            columnsContainer.mask = mask;\r\n        }\r\n    };\r\n    Object.defineProperty(XYChart3D.prototype, \"depth\", {\r\n        /**\r\n         * @return Depth (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"depth\");\r\n        },\r\n        /**\r\n         * Depth of the 3D chart / columns in pixels.\r\n         *\r\n         * @param value  Depth (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"depth\", value);\r\n            this.fixLayout();\r\n            this.invalidateDataUsers();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart3D.prototype, \"angle\", {\r\n        /**\r\n         * @return Angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"angle\");\r\n        },\r\n        /**\r\n         * Angle the chart is viewed at.\r\n         *\r\n         * @todo Description (review)\r\n         * @param value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"angle\", value);\r\n            this.fixLayout();\r\n            this.invalidateDataUsers();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart3D.prototype, \"dx3D\", {\r\n        /**\r\n         * A calculated horizontal 3D offset (px).\r\n         *\r\n         * @readonly\r\n         * @return Offset (px)\r\n         */\r\n        get: function () {\r\n            return $math.cos(this.angle) * this.depth;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart3D.prototype, \"dy3D\", {\r\n        /**\r\n         * A calculated vertical 3D offset (px).\r\n         *\r\n         * @readonly\r\n         * @return Offset (px)\r\n         */\r\n        get: function () {\r\n            return -$math.sin(this.angle) * this.depth;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * (Re)validates layout\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart3D.prototype.validateLayout = function () {\r\n        _super.prototype.validateLayout.call(this);\r\n        this.fixColumns();\r\n    };\r\n    /**\r\n     * Updates the layout (padding and scrollbar positions) to accommodate for\r\n     * 3D depth and angle.\r\n     */\r\n    XYChart3D.prototype.fixLayout = function () {\r\n        this.chartContainer.marginTop = -this.dy3D;\r\n        this.chartContainer.paddingRight = this.dx3D;\r\n        if (this.scrollbarX) {\r\n            this.scrollbarX.dy = this.dy3D;\r\n            this.scrollbarX.dx = this.dx3D;\r\n        }\r\n        if (this.scrollbarY) {\r\n            this.scrollbarY.dy = this.dy3D;\r\n            this.scrollbarY.dx = this.dx3D;\r\n        }\r\n        this.fixColumns();\r\n        _super.prototype.fixLayout.call(this);\r\n    };\r\n    /**\r\n     * Updates column positions, offset and dimensions based on chart's angle\r\n     * and depth.\r\n     */\r\n    XYChart3D.prototype.fixColumns = function () {\r\n        var _this = this;\r\n        var count = 1;\r\n        var i = 0;\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (series instanceof ColumnSeries3D) {\r\n                if (!series.clustered && i > 0) {\r\n                    count++;\r\n                }\r\n                series.depthIndex = count - 1;\r\n                i++;\r\n            }\r\n        });\r\n        var s = 0;\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (series instanceof ColumnSeries3D) {\r\n                series.depth = _this.depth / (count);\r\n                series.angle = _this.angle;\r\n                if (series.columnsContainer == _this.columnsContainer) {\r\n                    series.dx = _this.depth / (count) * $math.cos(_this.angle) * (series.depthIndex);\r\n                    series.dy = -_this.depth / (count) * $math.sin(_this.angle) * (series.depthIndex);\r\n                }\r\n                var inversed_1 = false;\r\n                if ((series.baseAxis == series.xAxis && series.xAxis.renderer.inversed) || (series.baseAxis == series.yAxis && series.yAxis.renderer.inversed)) {\r\n                    inversed_1 = true;\r\n                }\r\n                var i_1 = 1;\r\n                series.dataItems.each(function (dataItem) {\r\n                    var column = dataItem.column;\r\n                    if (column) {\r\n                        if (inversed_1) {\r\n                            column.zIndex = 1000 * (1000 - i_1) + s - series.depthIndex * 100;\r\n                        }\r\n                        else {\r\n                            column.zIndex = 1000 * i_1 + s - series.depthIndex * 100;\r\n                        }\r\n                    }\r\n                    i_1++;\r\n                });\r\n                if (inversed_1) {\r\n                    s--;\r\n                }\r\n                else {\r\n                    s++;\r\n                }\r\n            }\r\n        });\r\n        this.maskColumns();\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    XYChart3D.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up series\r\n            if ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n                for (var i = 0, len = config.series.length; i < len; i++) {\r\n                    config.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    XYChart3D.prototype.maskColumns = function () {\r\n        var w = this.plotContainer.pixelWidth;\r\n        var h = this.plotContainer.pixelHeight;\r\n        var dx = this.dx3D;\r\n        var dy = this.dy3D;\r\n        var path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n        var columnsContainer = this.columnsContainer;\r\n        if (columnsContainer && columnsContainer.mask) {\r\n            columnsContainer.mask.path = path;\r\n        }\r\n    };\r\n    return XYChart3D;\r\n}(XYChart));\r\nexport { XYChart3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n//# sourceMappingURL=XYChart3D.js.map","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line } from \"./Line\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nvar QuadraticCurve = /** @class */ (function (_super) {\r\n    __extends(QuadraticCurve, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function QuadraticCurve() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"QuadraticCurve\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.pixelPerfect = false;\r\n        _this.fill = color();\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the waved line.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    QuadraticCurve.prototype.draw = function () {\r\n        //super.draw();\r\n        if ($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy)) {\r\n            var p1 = { x: this.x1, y: this.y1 };\r\n            var p2 = { x: this.x2, y: this.y2 };\r\n            var cp = { x: this.cpx, y: this.cpy };\r\n            var d = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n            this.path = d;\r\n        }\r\n    };\r\n    Object.defineProperty(QuadraticCurve.prototype, \"cpx\", {\r\n        /**\r\n         * @return X\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cpx\");\r\n        },\r\n        /**\r\n         * X coordinate of control point.\r\n         *\r\n         * @param value X\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cpx\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuadraticCurve.prototype, \"cpy\", {\r\n        /**\r\n         * @return Y\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cpy\");\r\n        },\r\n        /**\r\n         * Y coordinate of control point.\r\n         *\r\n         * @param value Y\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cpy\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position along the line (0-1) into pixel coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @return Coordinates\r\n     */\r\n    QuadraticCurve.prototype.positionToPoint = function (position) {\r\n        var p1 = { x: this.x1, y: this.y1 };\r\n        var cp = { x: this.cpx, y: this.cpy };\r\n        var p2 = { x: this.x2, y: this.y2 };\r\n        var point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n        var point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n        return { x: point1.x, y: point1.y, angle: $math.getAngle(point1, point2) };\r\n    };\r\n    return QuadraticCurve;\r\n}(Line));\r\nexport { QuadraticCurve };\r\n//# sourceMappingURL=QuadraticCurve.js.map","/**\r\n * Module: gauge\r\n */\r\n/**\r\n * Elements: types\r\n */\r\nexport { GaugeChartDataItem, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\r\nexport { RadarChartDataItem, RadarChart } from \"./.internal/charts/types/RadarChart\";\r\nexport { XYChartDataItem, XYChart } from \"./.internal/charts/types/XYChart\";\r\nexport { SerialChartDataItem, SerialChart } from \"./.internal/charts/types/SerialChart\";\r\nexport { PieChart3DDataItem, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\r\nexport { PieChartDataItem, PieChart } from \"./.internal/charts/types/PieChart\";\r\nexport { SlicedChart, SlicedChartDataItem } from \"./.internal/charts/types/SlicedChart\";\r\nexport { FlowDiagramDataItem, FlowDiagram } from \"./.internal/charts/types/FlowDiagram\";\r\nexport { SankeyDiagramDataItem, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\r\nexport { ChordDiagramDataItem, ChordDiagram } from \"./.internal/charts/types/ChordDiagram\";\r\nexport { TreeMapDataItem, TreeMap } from \"./.internal/charts/types/TreeMap\";\r\nexport { XYChart3DDataItem, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\r\n/**\r\n * Elements: charts\r\n */\r\nexport { ChartDataItem, Chart } from \"./.internal/charts/Chart\";\r\nexport { LegendDataItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\r\nexport { HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\r\n/**\r\n * Elements: series\r\n */\r\nexport { SeriesDataItem, Series } from \"./.internal/charts/series/Series\";\r\nexport { XYSeriesDataItem, XYSeries } from \"./.internal/charts/series/XYSeries\";\r\nexport { LineSeriesDataItem, LineSeries } from \"./.internal/charts/series/LineSeries\";\r\nexport { LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\r\nexport { CandlestickSeriesDataItem, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\r\nexport { OHLCSeriesDataItem, OHLCSeries } from \"./.internal/charts/series/OHLCSeries\";\r\nexport { ColumnSeriesDataItem, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\r\nexport { StepLineSeriesDataItem, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\r\nexport { RadarSeriesDataItem, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\r\nexport { RadarColumnSeriesDataItem, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\r\nexport { PieSeriesDataItem, PieSeries } from \"./.internal/charts/series/PieSeries\";\r\nexport { FunnelSeries, FunnelSeriesDataItem } from \"./.internal/charts/series/FunnelSeries\";\r\nexport { PyramidSeries, PyramidSeriesDataItem } from \"./.internal/charts/series/PyramidSeries\";\r\nexport { PictorialStackedSeries, PictorialStackedSeriesDataItem } from \"./.internal/charts/series/PictorialStackedSeries\";\r\nexport { PieTick } from \"./.internal/charts/elements/PieTick\";\r\nexport { FunnelSlice } from \"./.internal/charts/elements/FunnelSlice\";\r\nexport { PieSeries3DDataItem, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\r\nexport { TreeMapSeriesDataItem, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\r\nexport { ColumnSeries3DDataItem, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\r\nexport { ConeSeriesDataItem, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\r\nexport { CurvedColumnSeries, CurvedColumnSeriesDataItem } from \"./.internal/charts/series/CurvedColumnSeries\";\r\n/**\r\n * Elements: axes\r\n */\r\nexport { AxisDataItem, Axis } from \"./.internal/charts/axes/Axis\";\r\nexport { Grid } from \"./.internal/charts/axes/Grid\";\r\nexport { AxisTick } from \"./.internal/charts/axes/AxisTick\";\r\nexport { AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\r\nexport { AxisLine } from \"./.internal/charts/axes/AxisLine\";\r\nexport { AxisFill } from \"./.internal/charts/axes/AxisFill\";\r\nexport { AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\r\nexport { AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\r\nexport { AxisBullet } from \"./.internal/charts/axes/AxisBullet\";\r\nexport { ValueAxisDataItem, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\r\nexport { CategoryAxisDataItem, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\r\nexport { CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\r\nexport { DateAxisDataItem, DateAxis } from \"./.internal/charts/axes/DateAxis\";\r\nexport { DurationAxisDataItem, DurationAxis } from \"./.internal/charts/axes/DurationAxis\";\r\nexport { DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\r\nexport { ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\r\nexport { AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\r\nexport { AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\r\nexport { AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\r\nexport { AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\r\nexport { AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\r\nexport { AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\r\nexport { GridCircular } from \"./.internal/charts/axes/GridCircular\";\r\nexport { AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\r\nexport { AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\r\n/**\r\n * Elements: elements\r\n */\r\nexport { Tick } from \"./.internal/charts/elements/Tick\";\r\nexport { Bullet } from \"./.internal/charts/elements/Bullet\";\r\nexport { LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\r\nexport { CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\r\nexport { ErrorBullet } from \"./.internal/charts/elements/ErrorBullet\";\r\nexport { XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\r\nexport { ClockHand } from \"./.internal/charts/elements/ClockHand\";\r\nexport { FlowDiagramNode } from \"./.internal/charts/elements/FlowDiagramNode\";\r\nexport { FlowDiagramLink } from \"./.internal/charts/elements/FlowDiagramLink\";\r\nexport { SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\r\nexport { SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\r\nexport { ChordNode } from \"./.internal/charts/elements/ChordNode\";\r\nexport { ChordLink } from \"./.internal/charts/elements/ChordLink\";\r\nexport { NavigationBarDataItem, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\r\nexport { Column } from \"./.internal/charts/elements/Column\";\r\nexport { Candlestick } from \"./.internal/charts/elements/Candlestick\";\r\nexport { OHLC } from \"./.internal/charts/elements/OHLC\";\r\nexport { RadarColumn } from \"./.internal/charts/elements/RadarColumn\";\r\nexport { Column3D } from \"./.internal/charts/elements/Column3D\";\r\nexport { ConeColumn } from \"./.internal/charts/elements/ConeColumn\";\r\nexport { CurvedColumn } from \"./.internal/charts/elements/CurvedColumn\";\r\n/**\r\n * Elements: cursors\r\n */\r\nexport { XYCursor } from \"./.internal/charts/cursors/XYCursor\";\r\nexport { Cursor } from \"./.internal/charts/cursors/Cursor\";\r\nexport { RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\r\n//# sourceMappingURL=charts.js.map","export default \"<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-12 col-lg-6\\\">\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Simple Column Chart</h4>\\n      </div>\\n      <div card-bottom id=\\\"chart1\\\" style=\\\"width: 100%; height: 500px\\\"></div>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\"> Layered Column Chart</h4>\\n      </div>\\n      <div card-bottom id=\\\"chart2\\\" style=\\\"width: 100%; height: 500px\\\"></div>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\"> Bar and line chart mix</h4>\\n      </div>\\n      <div card-bottom id=\\\"chart3\\\" style=\\\"width: 100%; height: 500px\\\"></div>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\"> Line Chart with Scroll and Zoom</h4>\\n      </div>\\n      <div card-bottom id=\\\"chart4\\\" style=\\\"width: 100%; height: 500px\\\"></div>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\"> Radar Chart</h4>\\n      </div>\\n      <div card-bottom id=\\\"chart5\\\" style=\\\"width: 100%; height: 500px\\\"></div>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\"> Polar Chart</h4>\\n      </div>\\n      <div card-bottom id=\\\"chart6\\\" style=\\\"width: 100%; height: 500px\\\"></div>\\n    </app-iq-card>\\n  </div>\\n  <div class=\\\"col-sm-12 col-lg-6\\\">\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Column and Line Mix Chart</h4>\\n      </div>\\n      <div card-bottom id=\\\"chart7\\\" style=\\\"width: 100%; height: 500px\\\"></div>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\"> Stacked Column Chart</h4>\\n      </div>\\n      <div card-bottom id=\\\"chart8\\\" style=\\\"width: 100%; height: 500px\\\"></div>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\"> Date Based Data</h4>\\n      </div>\\n      <div card-bottom id=\\\"chart9\\\" style=\\\"width: 100%; height: 500px\\\"></div>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\"> zoomable on Value Axis</h4>\\n      </div>\\n      <div card-bottom id=\\\"chart10\\\" style=\\\"width: 100%; height: 500px\\\"></div>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\"> Polar Scatter</h4>\\n      </div>\\n      <div card-bottom id=\\\"chart11\\\" style=\\\"width: 100%; height: 500px\\\"></div>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\"> 3D Pie Chart</h4>\\n      </div>\\n      <div card-bottom id=\\\"chart12\\\" style=\\\"width: 100%; height: 500px\\\"></div>\\n    </app-iq-card>\\n  </div>\\n</div>\\n\";","export default \"<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-12 col-lg-6\\\">\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Line Chart</h4>\\n      </div>\\n      <app-apex-chart card-bottom ids=\\\"line1\\\" [options]=\\\"line1\\\"></app-apex-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Column Chart</h4>\\n      </div>\\n      <app-apex-chart card-bottom ids=\\\"column1\\\" [options]=\\\"column1\\\"></app-apex-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Mixes Chart</h4>\\n      </div>\\n      <app-apex-chart card-bottom ids=\\\"mixed1\\\" [options]=\\\"mixed1\\\"></app-apex-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\"> Bubble Charts</h4>\\n      </div>\\n      <app-apex-chart card-bottom ids=\\\"bubble1\\\" [options]=\\\"bubble1\\\"></app-apex-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\"> Pie Charts</h4>\\n      </div>\\n      <app-apex-chart card-bottom ids=\\\"chart1\\\" [options]=\\\"chart1\\\"></app-apex-chart>\\n    </app-iq-card>\\n  </div>\\n  <div class=\\\"col-sm-12 col-lg-6\\\">\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Line Area Chart</h4>\\n      </div>\\n      <app-apex-chart card-bottom ids=\\\"area1\\\" [options]=\\\"area1\\\"></app-apex-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Bar Chart</h4>\\n      </div>\\n      <app-apex-chart card-bottom ids=\\\"bar2\\\" [options]=\\\"bar2\\\"></app-apex-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\"> Candlestick Charts</h4>\\n      </div>\\n      <app-apex-chart card-bottom ids=\\\"candle1\\\" [options]=\\\"candle1\\\"></app-apex-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">  Scatter Charts</h4>\\n      </div>\\n      <app-apex-chart card-bottom ids=\\\"scatter\\\" [options]=\\\"scatter\\\"></app-apex-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Radial Bar Charts</h4>\\n      </div>\\n      <app-apex-chart card-bottom ids=\\\"radial\\\" [options]=\\\"radial\\\"></app-apex-chart>\\n    </app-iq-card>\\n  </div>\\n</div>\\n\";","export default \"<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-12 col-lg-6\\\">\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Basic line Chart</h4>\\n      </div>\\n      <div id=\\\"high-basicline-chart\\\"></div>\\n      <app-high-chart card-bottom ids=\\\"chart1\\\" [options]=\\\"chart1\\\"></app-high-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Column and Bar Chart</h4>\\n      </div>\\n      <app-high-chart card-bottom ids=\\\"chart2\\\" [options]=\\\"chart2\\\"></app-high-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Pie Chart</h4>\\n      </div>\\n      <app-high-chart card-bottom ids=\\\"chart3\\\" [options]=\\\"chart3\\\"></app-high-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Dynamic Chart</h4>\\n      </div>\\n      <app-high-chart card-bottom ids=\\\"chart4\\\" [options]=\\\"chart4\\\"></app-high-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Gauges Chart</h4>\\n      </div>\\n      <app-high-chart card-bottom ids=\\\"chart5\\\" [options]=\\\"chart5\\\"></app-high-chart>\\n    </app-iq-card>\\n  </div>\\n  <div class=\\\"col-sm-12 col-lg-6\\\">\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Area Chart</h4>\\n      </div>\\n      <app-high-chart card-bottom ids=\\\"chart6\\\" [options]=\\\"chart6\\\"></app-high-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Scatter plot Chart</h4>\\n      </div>\\n      <app-high-chart card-bottom ids=\\\"chart7\\\" [options]=\\\"chart7\\\"></app-high-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Dual axes, line and column Chart</h4>\\n      </div>\\n      <app-high-chart card-bottom ids=\\\"chart8\\\" [options]=\\\"chart8\\\"></app-high-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">3D Chart</h4>\\n      </div>\\n      <app-high-chart card-bottom ids=\\\"chart9\\\" [options]=\\\"chart9\\\"></app-high-chart>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Bar With Nagative Chart</h4>\\n      </div>\\n      <app-high-chart card-bottom ids=\\\"chart10\\\" [options]=\\\"chart10\\\"></app-high-chart>\\n    </app-iq-card>\\n  </div>\\n</div>\\n\";","export default \"<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-12 col-lg-6\\\">\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Line Chart</h4>\\n      </div>\\n      <div id=\\\"morris-line-chart\\\" style=\\\"height: 300px; margin-bottom: 40px;\\\"></div>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Area Chart</h4>\\n      </div>\\n      <div id=\\\"morris-area-chart\\\" style=\\\"height: 300px;\\\"></div>\\n    </app-iq-card>\\n  </div>\\n  <div class=\\\"col-sm-12 col-lg-6\\\">\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Bar Chart</h4>\\n      </div>\\n      <div id=\\\"morris-bar-chart\\\" style=\\\"height: 300px; margin-bottom: 90px;\\\"></div>\\n    </app-iq-card>\\n    <app-iq-card>\\n      <div card-header class=\\\"iq-header-title\\\">\\n        <h4 class=\\\"card-title\\\">Donut Chart</h4>\\n      </div>\\n      <div id=\\\"morris-donut-chart\\\" style=\\\"height: 300px;\\\"></div>\\n    </app-iq-card>\\n  </div>\\n</div>\\n\";","import {Component, NgZone, OnInit} from '@angular/core';\nimport * as am4charts from '@amcharts/amcharts4/charts';\nimport * as am4core from '@amcharts/amcharts4/core';\n\n@Component({\n  selector: 'app-chart-am',\n  templateUrl: './chart-am.component.html',\n  styles: []\n})\nexport class ChartAmComponent implements OnInit {\n\n  private chart: am4charts.XYChart;\n\n  constructor(private zone: NgZone) {\n  }\n\n  public chart1 = function(element) {\n    const chart = am4core.create(element, am4charts.XYChart);\n    chart.colors.list = [am4core.color('#0084ff')];\n\n    // Add data\n    chart.data = [{\n      country: 'USA',\n      visits: 2025\n    }, {\n      country: 'China',\n      visits: 1882\n    }, {\n      country: 'Japan',\n      visits: 1809\n    }, {\n      country: 'Germany',\n      visits: 1322\n    }, {\n      country: 'UK',\n      visits: 1122\n    }, {\n      country: 'France',\n      visits: 1114\n    }];\n    const categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\n    categoryAxis.dataFields.category = 'country';\n    categoryAxis.renderer.grid.template.location = 0;\n    categoryAxis.renderer.minGridDistance = 30;\n\n    categoryAxis.renderer.labels.template.adapter.add('dy', function(dy, target) {\n      if (target.dataItem && target.dataItem.index) {\n        return dy + 25;\n      }\n      return dy;\n    });\n\n    const valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n\n    // Create series\n    const series = chart.series.push(new am4charts.ColumnSeries());\n    series.dataFields.valueY = 'visits';\n    series.dataFields.categoryX = 'country';\n    series.name = 'Visits';\n    series.columns.template.tooltipText = '{categoryX}: [bold]{valueY}[/]';\n    series.columns.template.fillOpacity = .8;\n\n    const columnTemplate = series.columns.template;\n    columnTemplate.strokeWidth = 2;\n    columnTemplate.strokeOpacity = 1;\n  };\n  public chart2 = function(element) {\n    const chart = am4core.create(element, am4charts.XYChart);\n    chart.colors.list = [am4core.color('#00ca00'), am4core.color('#0084ff')];\n\n    // Add percent sign to all numbers\n    chart.numberFormatter.numberFormat = '#.#\\'%\\'';\n\n    // Add data\n    chart.data = [{\n      country: 'USA',\n      year2004: 3.5,\n      year2005: 4.2\n    }, {\n      country: 'UK',\n      year2004: 1.7,\n      year2005: 3.1\n    }, {\n      country: 'Canada',\n      year2004: 2.8,\n      year2005: 2.9\n    }, {\n      country: 'Japan',\n      year2004: 2.6,\n      year2005: 2.3\n    }, {\n      country: 'France',\n      year2004: 1.4,\n      year2005: 2.1\n    }, {\n      country: 'Brazil',\n      year2004: 2.6,\n      year2005: 4.9\n    }];\n    // Create axes\n    const categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\n    categoryAxis.dataFields.category = 'country';\n    categoryAxis.renderer.grid.template.location = 0;\n    categoryAxis.renderer.minGridDistance = 30;\n\n    const valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.title.text = 'GDP growth rate';\n    valueAxis.title.fontWeight = '800';\n\n    // Create series\n    const series = chart.series.push(new am4charts.ColumnSeries());\n    series.dataFields.valueY = 'year2004';\n    series.dataFields.categoryX = 'country';\n    series.clustered = false;\n    series.tooltipText = 'GDP grow in {categoryX} (2004): [bold]{valueY}[/]';\n\n    const series2 = chart.series.push(new am4charts.ColumnSeries());\n    series2.dataFields.valueY = 'year2005';\n    series2.dataFields.categoryX = 'country';\n    series2.clustered = false;\n    series2.columns.template.width = am4core.percent(50);\n    series2.tooltipText = 'GDP grow in {categoryX} (2005): [bold]{valueY}[/]';\n\n    chart.cursor = new am4charts.XYCursor();\n    chart.cursor.lineX.disabled = true;\n    chart.cursor.lineY.disabled = true;\n  };\n  public chart3 = function(element) {\n    const chart = am4core.create(element, am4charts.XYChart);\n    chart.colors.list = [am4core.color('#57aeff'),\n        am4core.color('#0084ff')];\n\n    chart.data = [{\n                year: 2005,\n                income: 23.5,\n                expenses: 18.1\n            }, {\n                year: '2006',\n                income: 26.2,\n                expenses: 22.8\n            }, {\n                year: '2007',\n                income: 30.1,\n                expenses: 23.9\n            }, {\n                year: '2008',\n                income: 29.5,\n                expenses: 25.1\n            }, {\n                year: '2009',\n                income: 24.6,\n                expenses: 25\n            }];\n\n        // create category axis for years\n    const categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());\n    categoryAxis.dataFields.category = 'year';\n    categoryAxis.renderer.inversed = true;\n    categoryAxis.renderer.grid.template.location = 0;\n\n        // create value axis for income and expenses\n    const valueAxis = chart.xAxes.push(new am4charts.ValueAxis());\n    valueAxis.renderer.opposite = true;\n\n\n        // create columns\n    const series = chart.series.push(new am4charts.ColumnSeries());\n    series.dataFields.categoryY = 'year';\n    series.dataFields.valueX = 'income';\n    series.name = 'Income';\n    series.columns.template.fillOpacity = 0.5;\n    series.columns.template.strokeOpacity = 0;\n    series.tooltipText = 'Income in {categoryY}: {valueX.value}';\n\n        // create line\n    const lineSeries = chart.series.push(new am4charts.LineSeries());\n    lineSeries.dataFields.categoryY = 'year';\n    lineSeries.dataFields.valueX = 'expenses';\n    lineSeries.name = 'Expenses';\n    lineSeries.strokeWidth = 3;\n    lineSeries.tooltipText = 'Expenses in {categoryY}: {valueX.value}';\n\n        // add bullets\n    const circleBullet = lineSeries.bullets.push(new am4charts.CircleBullet());\n    circleBullet.circle.fill = am4core.color('#fff');\n    circleBullet.circle.strokeWidth = 2;\n\n        // add chart cursor\n    chart.cursor = new am4charts.XYCursor();\n    chart.cursor.behavior = 'zoomY';\n\n        // add legend\n    chart.legend = new am4charts.Legend();\n  };\n  public chart4 = function(element) {\n    const chart = am4core.create(element, am4charts.XYChart);\n    chart.colors.list = [am4core.color('#57aeff')];\n\n    // Add data\n    chart.data = generateChartData();\n\n    // Create axes\n    const dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.minGridDistance = 50;\n\n    const valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n\n    // Create series\n    const series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.valueY = 'visits';\n    series.dataFields.dateX = 'date';\n    series.strokeWidth = 2;\n    series.minBulletDistance = 10;\n    series.tooltipText = '{valueY}';\n    series.tooltip.pointerOrientation = 'vertical';\n    series.tooltip.background.cornerRadius = 20;\n    series.tooltip.background.fillOpacity = 0.5;\n    series.tooltip.label.padding(12, 12, 12, 12);\n\n    // Add scrollbar\n    const scrollbarX = new am4charts.XYChartScrollbar();\n    scrollbarX.series.push(series);\n    chart.scrollbarX = scrollbarX;\n\n    // Add cursor\n    chart.cursor = new am4charts.XYCursor();\n    chart.cursor.xAxis = dateAxis;\n    chart.cursor.snapToSeries = series;\n\n    function generateChartData() {\n      const chartData = [];\n      const firstDate = new Date();\n      firstDate.setDate(firstDate.getDate() - 1000);\n      let visits = 1200;\n      for (let i = 0; i < 500; i++) {\n        const newDate = new Date(firstDate);\n        newDate.setDate(newDate.getDate() + i);\n\n        visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\n\n        chartData.push({\n          date: newDate,\n          visits\n        });\n      }\n      return chartData;\n    }\n  };\n  public chart5 = function(element) {\n    const chart = am4core.create(element, am4charts.RadarChart);\n    chart.colors.list = [am4core.color('#57aeff')];\n\n    /* Add data */\n    chart.data = [{\n      country: 'Lithuania',\n      litres: 501\n    }, {\n      country: 'Czechia',\n      litres: 301\n    }, {\n      country: 'Ireland',\n      litres: 266\n    }, {\n      country: 'Germany',\n      litres: 165\n    }, {\n      country: 'Australia',\n      litres: 139\n    }, {\n      country: 'Austria',\n      litres: 336\n    }, {\n      country: 'UK',\n      litres: 290\n    }, {\n      country: 'Belgium',\n      litres: 325\n    }, {\n      country: 'The Netherlands',\n      litres: 40\n    }];\n\n    /* Create axes */\n    const categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis<am4charts.AxisRendererCircular>());\n    categoryAxis.dataFields.category = 'country';\n\n    const valueAxis = chart.yAxes.push(new am4charts.ValueAxis<am4charts.AxisRendererRadial>());\n    valueAxis.renderer.axisFills.template.fill = chart.colors.getIndex(2);\n    valueAxis.renderer.axisFills.template.fillOpacity = 0.05;\n\n    /* Create and configure series */\n    const series = chart.series.push(new am4charts.RadarSeries());\n    series.dataFields.valueY = 'litres';\n    series.dataFields.categoryX = 'country';\n    series.name = 'Sales';\n    series.strokeWidth = 3;\n  };\n  public chart6 = function(element) {\n    const chart = am4core.create(element, am4charts.RadarChart);\n\n    /* Add data */\n    chart.data = [{\n      direction: 'N',\n      value: 8\n    }, {\n      direction: 'NE',\n      value: 9\n    }, {\n      direction: 'E',\n      value: 4.5\n    }, {\n      direction: 'SE',\n      value: 3.5\n    }, {\n      direction: 'S',\n      value: 9.2\n    }, {\n      direction: 'SW',\n      value: 8.4\n    }, {\n      direction: 'W',\n      value: 11.1\n    }, {\n      direction: 'NW',\n      value: 10\n    }];\n\n    /* Create axes */\n    const categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis<am4charts.AxisRendererCircular>());\n    categoryAxis.dataFields.category = 'direction';\n\n    const valueAxis = chart.yAxes.push(new am4charts.ValueAxis<am4charts.AxisRendererRadial>());\n    valueAxis.renderer.gridType = 'polygons';\n\n    const range = categoryAxis.axisRanges.create();\n    range.category = 'NW';\n    range.endCategory = 'NW';\n    range.axisFill.fill = am4core.color('#0084ff');\n    range.axisFill.fillOpacity = 0.3;\n\n    const range2 = categoryAxis.axisRanges.create();\n    range2.category = 'N';\n    range2.endCategory = 'N';\n    range2.axisFill.fill = am4core.color('#e64141');\n    range2.axisFill.fillOpacity = 0.3;\n\n    const range3 = categoryAxis.axisRanges.create();\n    range3.category = 'SE';\n    range3.endCategory = 'SW';\n    range3.axisFill.fill = am4core.color('#00ca00');\n    range3.axisFill.fillOpacity = 0.3;\n    range3.locations.endCategory = 0;\n\n    /* Create and configure series */\n    const series = chart.series.push(new am4charts.RadarSeries());\n    series.dataFields.valueY = 'value';\n    series.dataFields.categoryX = 'direction';\n    series.name = 'Wind direction';\n    series.strokeWidth = 3;\n    series.fillOpacity = 0.2;\n  };\n  public chart7 = function(element) {\n    const chart = am4core.create(element, am4charts.XYChart);\n    chart.colors.list = [am4core.color('#73bbff'), ];\n\n    // Export\n    chart.exporting.menu = new am4core.ExportMenu();\n\n    // Data for both series\n    const data = [{\n      year: '2009',\n      income: 23.5,\n      expenses: 21.1\n    }, {\n      year: '2010',\n      income: 26.2,\n      expenses: 30.5\n    }, {\n      year: '2011',\n      income: 30.1,\n      expenses: 34.9\n    }, {\n      year: '2012',\n      income: 29.5,\n      expenses: 31.1\n    }, {\n      year: '2013',\n      income: 30.6,\n      expenses: 28.2,\n      lineDash: '5,5',\n    }, {\n      year: '2014',\n      income: 34.1,\n      expenses: 32.9,\n      strokeWidth: 1,\n      columnDash: '5,5',\n      fillOpacity: 0.2,\n      additional: '(projection)'\n    }];\n\n    /* Create axes */\n    const categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\n    categoryAxis.dataFields.category = 'year';\n    categoryAxis.renderer.minGridDistance = 30;\n\n    /* Create value axis */\n    const valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n\n    /* Create series */\n    const columnSeries = chart.series.push(new am4charts.ColumnSeries());\n    columnSeries.name = 'Income';\n    columnSeries.dataFields.valueY = 'income';\n    columnSeries.dataFields.categoryX = 'year';\n\n    columnSeries.columns.template.tooltipText = '[#fff font-size: 15px]{name} in {categoryX}:\\n[/][#fff font-size: 20px]{valueY}[/] [#fff]{additional}[/]';\n    columnSeries.columns.template.propertyFields.fillOpacity = 'fillOpacity';\n    columnSeries.columns.template.propertyFields.stroke = 'stroke';\n    columnSeries.columns.template.propertyFields.strokeWidth = 'strokeWidth';\n    columnSeries.columns.template.propertyFields.strokeDasharray = 'columnDash';\n    columnSeries.tooltip.label.textAlign = 'middle';\n\n    const lineSeries = chart.series.push(new am4charts.LineSeries());\n    lineSeries.name = 'Expenses';\n    lineSeries.dataFields.valueY = 'expenses';\n    lineSeries.dataFields.categoryX = 'year';\n\n    lineSeries.stroke = am4core.color('#0084ff');\n    lineSeries.strokeWidth = 3;\n    lineSeries.propertyFields.strokeDasharray = 'lineDash';\n    lineSeries.tooltip.label.textAlign = 'middle';\n\n    const bullet = lineSeries.bullets.push(new am4charts.Bullet());\n    bullet.fill = am4core.color('#fdd400'); // tooltips grab fill from parent by default\n    bullet.tooltipText = '[#fff font-size: 15px]{name} in {categoryX}:\\n[/][#fff font-size: 20px]{valueY}[/] [#fff]{additional}[/]';\n    const circle = bullet.createChild(am4core.Circle);\n    circle.radius = 4;\n    circle.fill = am4core.color('#fff');\n    circle.strokeWidth = 3;\n\n    chart.data = data;\n  };\n  public chart8 = function(element) {\n    const chart = am4core.create(element, am4charts.XYChart);\n    chart.colors.list = [am4core.color('#ef8282'),\n    am4core.color('#57dc57'),\n    am4core.color('#ffe357')];\n    // Add data\n    chart.data = [{\n      year: '2016',\n      europe: 2.5,\n      namerica: 2.5,\n      asia: 2.1,\n      lamerica: 0.3,\n      meast: 0.2\n    }, {\n      year: '2017',\n      europe: 2.6,\n      namerica: 2.7,\n      asia: 2.2,\n      lamerica: 0.3,\n      meast: 0.3\n    }, {\n      year: '2018',\n      europe: 2.8,\n      namerica: 2.9,\n      asia: 2.4,\n      lamerica: 0.3,\n      meast: 0.3\n    }];\n\n    // Create axes\n    const categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\n    categoryAxis.dataFields.category = 'year';\n    categoryAxis.renderer.grid.template.location = 0;\n\n\n    const valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.renderer.inside = true;\n    valueAxis.renderer.labels.template.disabled = true;\n    valueAxis.min = 0;\n\n    // Create series\n    function createSeries(field, name) {\n\n      // Set up series\n      const series = chart.series.push(new am4charts.ColumnSeries());\n      series.name = name;\n      series.dataFields.valueY = field;\n      series.dataFields.categoryX = 'year';\n      series.sequencedInterpolation = true;\n\n      // Make it stacked\n      series.stacked = true;\n\n      // Configure columns\n      series.columns.template.width = am4core.percent(60);\n      series.columns.template.tooltipText = '[bold]{name}[/]\\n[font-size:14px]{categoryX}: {valueY}';\n\n      // Add label\n      const labelBullet = series.bullets.push(new am4charts.LabelBullet());\n      labelBullet.label.text = '{valueY}';\n      labelBullet.locationY = 0.5;\n\n      return series;\n    }\n\n    createSeries('europe', 'Europe');\n    createSeries('namerica', 'North America');\n    createSeries('asia', 'Asia-Pacific');\n\n    // Legend\n    chart.legend = new am4charts.Legend();\n  };\n  public chart9 = function(element) {\n    const chart = am4core.create(element, am4charts.XYChart);\n    chart.colors.list = [am4core.color('#57aeff')];\n\n    // Add data\n    chart.data = [{\n      date: '2012-07-27',\n      value: 13\n    }, {\n      date: '2012-07-28',\n      value: 11\n    }, {\n      date: '2012-07-29',\n      value: 15\n    }, {\n      date: '2012-07-30',\n      value: 16\n    }, {\n      date: '2012-07-31',\n      value: 18\n    }, {\n      date: '2012-08-01',\n      value: 13\n    }, {\n      date: '2012-08-02',\n      value: 22\n    }, {\n      date: '2012-08-03',\n      value: 23\n    }, {\n      date: '2012-08-04',\n      value: 20\n    }, {\n      date: '2012-08-05',\n      value: 17\n    }, {\n      date: '2012-08-06',\n      value: 16\n    }, {\n      date: '2012-08-07',\n      value: 18\n    }, {\n      date: '2012-08-08',\n      value: 21\n    }, {\n      date: '2012-08-09',\n      value: 26\n    }, {\n      date: '2012-08-10',\n      value: 24\n    }, {\n      date: '2012-08-11',\n      value: 29\n    }, {\n      date: '2012-08-12',\n      value: 32\n    }, {\n      date: '2012-08-13',\n      value: 18\n    }, {\n      date: '2012-08-14',\n      value: 24\n    }, {\n      date: '2012-08-15',\n      value: 22\n    }, {\n      date: '2012-08-16',\n      value: 18\n    }, {\n      date: '2012-08-17',\n      value: 19\n    }, {\n      date: '2012-08-18',\n      value: 14\n    }, {\n      date: '2012-08-19',\n      value: 15\n    }, {\n      date: '2012-08-20',\n      value: 12\n    }, {\n      date: '2012-08-21',\n      value: 8\n    }, {\n      date: '2012-08-22',\n      value: 9\n    }, {\n      date: '2012-08-23',\n      value: 8\n    }, {\n      date: '2012-08-24',\n      value: 7\n    }, {\n      date: '2012-08-25',\n      value: 5\n    }, {\n      date: '2012-08-26',\n      value: 11\n    }, {\n      date: '2012-08-27',\n      value: 13\n    }, {\n      date: '2012-08-28',\n      value: 18\n    }, {\n      date: '2012-08-29',\n      value: 20\n    }, {\n      date: '2012-08-30',\n      value: 29\n    }, {\n      date: '2012-08-31',\n      value: 33\n    }, {\n      date: '2012-09-01',\n      value: 42\n    }, {\n      date: '2012-09-02',\n      value: 35\n    }, {\n      date: '2012-09-03',\n      value: 31\n    }, {\n      date: '2012-09-04',\n      value: 47\n    }, {\n      date: '2012-09-05',\n      value: 52\n    }, {\n      date: '2012-09-06',\n      value: 46\n    }, {\n      date: '2012-09-07',\n      value: 41\n    }, {\n      date: '2012-09-08',\n      value: 43\n    }, {\n      date: '2012-09-09',\n      value: 40\n    }, {\n      date: '2012-09-10',\n      value: 39\n    }, {\n      date: '2012-09-11',\n      value: 34\n    }, {\n      date: '2012-09-12',\n      value: 29\n    }, {\n      date: '2012-09-13',\n      value: 34\n    }, {\n      date: '2012-09-14',\n      value: 37\n    }, {\n      date: '2012-09-15',\n      value: 42\n    }, {\n      date: '2012-09-16',\n      value: 49\n    }, {\n      date: '2012-09-17',\n      value: 46\n    }, {\n      date: '2012-09-18',\n      value: 47\n    }, {\n      date: '2012-09-19',\n      value: 55\n    }, {\n      date: '2012-09-20',\n      value: 59\n    }, {\n      date: '2012-09-21',\n      value: 58\n    }, {\n      date: '2012-09-22',\n      value: 57\n    }, {\n      date: '2012-09-23',\n      value: 61\n    }, {\n      date: '2012-09-24',\n      value: 59\n    }, {\n      date: '2012-09-25',\n      value: 67\n    }, {\n      date: '2012-09-26',\n      value: 65\n    }, {\n      date: '2012-09-27',\n      value: 61\n    }, {\n      date: '2012-09-28',\n      value: 66\n    }, {\n      date: '2012-09-29',\n      value: 69\n    }, {\n      date: '2012-09-30',\n      value: 71\n    }, {\n      date: '2012-10-01',\n      value: 67\n    }, {\n      date: '2012-10-02',\n      value: 63\n    }, {\n      date: '2012-10-03',\n      value: 46\n    }, {\n      date: '2012-10-04',\n      value: 32\n    }, {\n      date: '2012-10-05',\n      value: 21\n    }, {\n      date: '2012-10-06',\n      value: 18\n    }, {\n      date: '2012-10-07',\n      value: 21\n    }, {\n      date: '2012-10-08',\n      value: 28\n    }, {\n      date: '2012-10-09',\n      value: 27\n    }, {\n      date: '2012-10-10',\n      value: 36\n    }, {\n      date: '2012-10-11',\n      value: 33\n    }, {\n      date: '2012-10-12',\n      value: 31\n    }, {\n      date: '2012-10-13',\n      value: 30\n    }, {\n      date: '2012-10-14',\n      value: 34\n    }, {\n      date: '2012-10-15',\n      value: 38\n    }, {\n      date: '2012-10-16',\n      value: 37\n    }, {\n      date: '2012-10-17',\n      value: 44\n    }, {\n      date: '2012-10-18',\n      value: 49\n    }, {\n      date: '2012-10-19',\n      value: 53\n    }, {\n      date: '2012-10-20',\n      value: 57\n    }, {\n      date: '2012-10-21',\n      value: 60\n    }, {\n      date: '2012-10-22',\n      value: 61\n    }, {\n      date: '2012-10-23',\n      value: 69\n    }, {\n      date: '2012-10-24',\n      value: 67\n    }, {\n      date: '2012-10-25',\n      value: 72\n    }, {\n      date: '2012-10-26',\n      value: 77\n    }, {\n      date: '2012-10-27',\n      value: 75\n    }, {\n      date: '2012-10-28',\n      value: 70\n    }, {\n      date: '2012-10-29',\n      value: 72\n    }, {\n      date: '2012-10-30',\n      value: 70\n    }, {\n      date: '2012-10-31',\n      value: 72\n    }, {\n      date: '2012-11-01',\n      value: 73\n    }, {\n      date: '2012-11-02',\n      value: 67\n    }, {\n      date: '2012-11-03',\n      value: 68\n    }, {\n      date: '2012-11-04',\n      value: 65\n    }, {\n      date: '2012-11-05',\n      value: 71\n    }, {\n      date: '2012-11-06',\n      value: 75\n    }, {\n      date: '2012-11-07',\n      value: 74\n    }, {\n      date: '2012-11-08',\n      value: 71\n    }, {\n      date: '2012-11-09',\n      value: 76\n    }, {\n      date: '2012-11-10',\n      value: 77\n    }, {\n      date: '2012-11-11',\n      value: 81\n    }, {\n      date: '2012-11-12',\n      value: 83\n    }, {\n      date: '2012-11-13',\n      value: 80\n    }, {\n      date: '2012-11-14',\n      value: 81\n    }, {\n      date: '2012-11-15',\n      value: 87\n    }, {\n      date: '2012-11-16',\n      value: 82\n    }, {\n      date: '2012-11-17',\n      value: 86\n    }, {\n      date: '2012-11-18',\n      value: 80\n    }, {\n      date: '2012-11-19',\n      value: 87\n    }, {\n      date: '2012-11-20',\n      value: 83\n    }, {\n      date: '2012-11-21',\n      value: 85\n    }, {\n      date: '2012-11-22',\n      value: 84\n    }, {\n      date: '2012-11-23',\n      value: 82\n    }, {\n      date: '2012-11-24',\n      value: 73\n    }, {\n      date: '2012-11-25',\n      value: 71\n    }, {\n      date: '2012-11-26',\n      value: 75\n    }, {\n      date: '2012-11-27',\n      value: 79\n    }, {\n      date: '2012-11-28',\n      value: 70\n    }, {\n      date: '2012-11-29',\n      value: 73\n    }, {\n      date: '2012-11-30',\n      value: 61\n    }, {\n      date: '2012-12-01',\n      value: 62\n    }, {\n      date: '2012-12-02',\n      value: 66\n    }, {\n      date: '2012-12-03',\n      value: 65\n    }, {\n      date: '2012-12-04',\n      value: 73\n    }, {\n      date: '2012-12-05',\n      value: 79\n    }, {\n      date: '2012-12-06',\n      value: 78\n    }, {\n      date: '2012-12-07',\n      value: 78\n    }, {\n      date: '2012-12-08',\n      value: 78\n    }, {\n      date: '2012-12-09',\n      value: 74\n    }, {\n      date: '2012-12-10',\n      value: 73\n    }, {\n      date: '2012-12-11',\n      value: 75\n    }, {\n      date: '2012-12-12',\n      value: 70\n    }, {\n      date: '2012-12-13',\n      value: 77\n    }, {\n      date: '2012-12-14',\n      value: 67\n    }, {\n      date: '2012-12-15',\n      value: 62\n    }, {\n      date: '2012-12-16',\n      value: 64\n    }, {\n      date: '2012-12-17',\n      value: 61\n    }, {\n      date: '2012-12-18',\n      value: 59\n    }, {\n      date: '2012-12-19',\n      value: 53\n    }, {\n      date: '2012-12-20',\n      value: 54\n    }, {\n      date: '2012-12-21',\n      value: 56\n    }, {\n      date: '2012-12-22',\n      value: 59\n    }, {\n      date: '2012-12-23',\n      value: 58\n    }, {\n      date: '2012-12-24',\n      value: 55\n    }, {\n      date: '2012-12-25',\n      value: 52\n    }, {\n      date: '2012-12-26',\n      value: 54\n    }, {\n      date: '2012-12-27',\n      value: 50\n    }, {\n      date: '2012-12-28',\n      value: 50\n    }, {\n      date: '2012-12-29',\n      value: 51\n    }, {\n      date: '2012-12-30',\n      value: 52\n    }, {\n      date: '2012-12-31',\n      value: 58\n    }, {\n      date: '2013-01-01',\n      value: 60\n    }, {\n      date: '2013-01-02',\n      value: 67\n    }, {\n      date: '2013-01-03',\n      value: 64\n    }, {\n      date: '2013-01-04',\n      value: 66\n    }, {\n      date: '2013-01-05',\n      value: 60\n    }, {\n      date: '2013-01-06',\n      value: 63\n    }, {\n      date: '2013-01-07',\n      value: 61\n    }, {\n      date: '2013-01-08',\n      value: 60\n    }, {\n      date: '2013-01-09',\n      value: 65\n    }, {\n      date: '2013-01-10',\n      value: 75\n    }, {\n      date: '2013-01-11',\n      value: 77\n    }, {\n      date: '2013-01-12',\n      value: 78\n    }, {\n      date: '2013-01-13',\n      value: 70\n    }, {\n      date: '2013-01-14',\n      value: 70\n    }, {\n      date: '2013-01-15',\n      value: 73\n    }, {\n      date: '2013-01-16',\n      value: 71\n    }, {\n      date: '2013-01-17',\n      value: 74\n    }, {\n      date: '2013-01-18',\n      value: 78\n    }, {\n      date: '2013-01-19',\n      value: 85\n    }, {\n      date: '2013-01-20',\n      value: 82\n    }, {\n      date: '2013-01-21',\n      value: 83\n    }, {\n      date: '2013-01-22',\n      value: 88\n    }, {\n      date: '2013-01-23',\n      value: 85\n    }, {\n      date: '2013-01-24',\n      value: 85\n    }, {\n      date: '2013-01-25',\n      value: 80\n    }, {\n      date: '2013-01-26',\n      value: 87\n    }, {\n      date: '2013-01-27',\n      value: 84\n    }, {\n      date: '2013-01-28',\n      value: 83\n    }, {\n      date: '2013-01-29',\n      value: 84\n    }, {\n      date: '2013-01-30',\n      value: 81\n    }];\n\n    // Set input format for the dates\n    chart.dateFormatter.inputDateFormat = 'yyyy-MM-dd';\n\n    // Create axes\n    const dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    const valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n\n    // Create series\n    const series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.valueY = 'value';\n    series.dataFields.dateX = 'date';\n    series.tooltipText = '{value}';\n    series.strokeWidth = 2;\n    series.minBulletDistance = 15;\n\n    // Drop-shaped tooltips\n    series.tooltip.background.cornerRadius = 20;\n    series.tooltip.background.strokeOpacity = 0;\n    series.tooltip.pointerOrientation = 'vertical';\n    series.tooltip.label.minWidth = 40;\n    series.tooltip.label.minHeight = 40;\n    series.tooltip.label.textAlign = 'middle';\n    series.tooltip.label.textValign = 'middle';\n\n    // Make bullets grow on hover\n    const bullet = series.bullets.push(new am4charts.CircleBullet());\n    bullet.circle.strokeWidth = 2;\n    bullet.circle.radius = 4;\n    bullet.circle.fill = am4core.color('#fff');\n\n    const bullethover = bullet.states.create('hover');\n    bullethover.properties.scale = 1.3;\n\n    // Make a panning cursor\n    chart.cursor = new am4charts.XYCursor();\n    chart.cursor.behavior = 'panXY';\n    chart.cursor.xAxis = dateAxis;\n    chart.cursor.snapToSeries = series;\n\n    // Create vertical scrollbar and place it before the value axis\n    chart.scrollbarY = new am4core.Scrollbar();\n    chart.scrollbarY.parent = chart.leftAxesContainer;\n    chart.scrollbarY.toBack();\n\n    // Create a horizontal scrollbar with previe and place it underneath the date axis\n\n    let scrollbarX = new am4charts.XYChartScrollbar();\n    scrollbarX.series.push(series);\n    chart.scrollbarX = scrollbarX;\n    // chart.scrollbarX = new am4charts.XYChartScrollbar();\n    // chart.scrollbarX.series.push(series);\n    // chart.scrollbarX.parent = chart.bottomAxesContainer;\n\n    dateAxis.start = 0.79;\n    dateAxis.keepSelection = true;\n  };\n  public chart10 = function(element) {\n    const chart = am4core.create(element, am4charts.XYChart);\n    chart.colors.list = [am4core.color('#57aeff')];\n\n        // Add data\n    chart.data = [ {\n          date: '2012-07-27',\n          value: 13\n        }, {\n          date: '2012-07-28',\n          value: 11\n        }, {\n          date: '2012-07-29',\n          value: 15\n        }, {\n          date: '2012-07-30',\n          value: 16\n        }, {\n          date: '2012-07-31',\n          value: 18\n        }, {\n          date: '2012-08-01',\n          value: 13\n        }, {\n          date: '2012-08-02',\n          value: 22\n        }, {\n          date: '2012-08-03',\n          value: 23\n        }, {\n          date: '2012-08-04',\n          value: 20\n        }, {\n          date: '2012-08-05',\n          value: 17\n        }, {\n          date: '2012-08-06',\n          value: 16\n        }, {\n          date: '2012-08-07',\n          value: 18\n        }, {\n          date: '2012-08-08',\n          value: 21\n        }, {\n          date: '2012-08-09',\n          value: 26\n        }, {\n          date: '2012-08-10',\n          value: 24\n        }, {\n          date: '2012-08-11',\n          value: 29\n        }, {\n          date: '2012-08-12',\n          value: 32\n        }, {\n          date: '2012-08-13',\n          value: 18\n        }, {\n          date: '2012-08-14',\n          value: 24\n        }, {\n          date: '2012-08-15',\n          value: 22\n        }, {\n          date: '2012-08-16',\n          value: 18\n        }, {\n          date: '2012-08-17',\n          value: 19\n        }, {\n          date: '2012-08-18',\n          value: 14\n        }, {\n          date: '2012-08-19',\n          value: 15\n        }, {\n          date: '2012-08-20',\n          value: 12\n        }, {\n          date: '2012-08-21',\n          value: 8\n        }, {\n          date: '2012-08-22',\n          value: 9\n        }, {\n          date: '2012-08-23',\n          value: 8\n        }, {\n          date: '2012-08-24',\n          value: 7\n        }, {\n          date: '2012-08-25',\n          value: 5\n        }, {\n          date: '2012-08-26',\n          value: 11\n        }, {\n          date: '2012-08-27',\n          value: 13\n        }, {\n          date: '2012-08-28',\n          value: 18\n        }, {\n          date: '2012-08-29',\n          value: 20\n        }, {\n          date: '2012-08-30',\n          value: 29\n        }, {\n          date: '2012-08-31',\n          value: 33\n        }, {\n          date: '2012-09-01',\n          value: 42\n        }, {\n          date: '2012-09-02',\n          value: 35\n        }, {\n          date: '2012-09-03',\n          value: 31\n        }, {\n          date: '2012-09-04',\n          value: 47\n        }, {\n          date: '2012-09-05',\n          value: 52\n        }, {\n          date: '2012-09-06',\n          value: 46\n        }, {\n          date: '2012-09-07',\n          value: 41\n        }, {\n          date: '2012-09-08',\n          value: 43\n        }, {\n          date: '2012-09-09',\n          value: 40\n        }, {\n          date: '2012-09-10',\n          value: 39\n        }, {\n          date: '2012-09-11',\n          value: 34\n        }, {\n          date: '2012-09-12',\n          value: 29\n        }, {\n          date: '2012-09-13',\n          value: 34\n        }, {\n          date: '2012-09-14',\n          value: 37\n        }, {\n          date: '2012-09-15',\n          value: 42\n        }, {\n          date: '2012-09-16',\n          value: 49\n        }, {\n          date: '2012-09-17',\n          value: 46\n        }, {\n          date: '2012-09-18',\n          value: 47\n        }, {\n          date: '2012-09-19',\n          value: 55\n        }, {\n          date: '2012-09-20',\n          value: 59\n        }, {\n          date: '2012-09-21',\n          value: 58\n        }, {\n          date: '2012-09-22',\n          value: 57\n        }, {\n          date: '2012-09-23',\n          value: 61\n        }, {\n          date: '2012-09-24',\n          value: 59\n        }, {\n          date: '2012-09-25',\n          value: 67\n        }, {\n          date: '2012-09-26',\n          value: 65\n        }, {\n          date: '2012-09-27',\n          value: 61\n        }, {\n          date: '2012-09-28',\n          value: 66\n        }, {\n          date: '2012-09-29',\n          value: 69\n        }, {\n          date: '2012-09-30',\n          value: 71\n        }, {\n          date: '2012-10-01',\n          value: 67\n        }, {\n          date: '2012-10-02',\n          value: 63\n        }, {\n          date: '2012-10-03',\n          value: 46\n        }, {\n          date: '2012-10-04',\n          value: 32\n        }, {\n          date: '2012-10-05',\n          value: 21\n        }, {\n          date: '2012-10-06',\n          value: 18\n        }, {\n          date: '2012-10-07',\n          value: 21\n        }, {\n          date: '2012-10-08',\n          value: 28\n        }, {\n          date: '2012-10-09',\n          value: 27\n        }, {\n          date: '2012-10-10',\n          value: 36\n        }, {\n          date: '2012-10-11',\n          value: 33\n        }, {\n          date: '2012-10-12',\n          value: 31\n        }, {\n          date: '2012-10-13',\n          value: 30\n        }, {\n          date: '2012-10-14',\n          value: 34\n        }, {\n          date: '2012-10-15',\n          value: 38\n        }, {\n          date: '2012-10-16',\n          value: 37\n        }, {\n          date: '2012-10-17',\n          value: 44\n        }, {\n          date: '2012-10-18',\n          value: 49\n        }, {\n          date: '2012-10-19',\n          value: 53\n        }, {\n          date: '2012-10-20',\n          value: 57\n        }, {\n          date: '2012-10-21',\n          value: 60\n        }, {\n          date: '2012-10-22',\n          value: 61\n        }, {\n          date: '2012-10-23',\n          value: 69\n        }, {\n          date: '2012-10-24',\n          value: 67\n        }, {\n          date: '2012-10-25',\n          value: 72\n        }, {\n          date: '2012-10-26',\n          value: 77\n        }, {\n          date: '2012-10-27',\n          value: 75\n        }, {\n          date: '2012-10-28',\n          value: 70\n        }, {\n          date: '2012-10-29',\n          value: 72\n        }, {\n          date: '2012-10-30',\n          value: 70\n        }, {\n          date: '2012-10-31',\n          value: 72\n        }, {\n          date: '2012-11-01',\n          value: 73\n        }, {\n          date: '2012-11-02',\n          value: 67\n        }, {\n          date: '2012-11-03',\n          value: 68\n        }, {\n          date: '2012-11-04',\n          value: 65\n        }, {\n          date: '2012-11-05',\n          value: 71\n        }, {\n          date: '2012-11-06',\n          value: 75\n        }, {\n          date: '2012-11-07',\n          value: 74\n        }, {\n          date: '2012-11-08',\n          value: 71\n        }, {\n          date: '2012-11-09',\n          value: 76\n        }, {\n          date: '2012-11-10',\n          value: 77\n        }, {\n          date: '2012-11-11',\n          value: 81\n        }, {\n          date: '2012-11-12',\n          value: 83\n        }, {\n          date: '2012-11-13',\n          value: 80\n        }, {\n          date: '2012-11-18',\n          value: 80\n        }, {\n          date: '2012-11-19',\n          value: 87\n        }, {\n          date: '2012-11-20',\n          value: 83\n        }, {\n          date: '2012-11-21',\n          value: 85\n        }, {\n          date: '2012-11-22',\n          value: 84\n        }, {\n          date: '2012-11-23',\n          value: 82\n        }, {\n          date: '2012-11-24',\n          value: 73\n        }, {\n          date: '2012-11-25',\n          value: 71\n        }, {\n          date: '2012-11-26',\n          value: 75\n        }, {\n          date: '2012-11-27',\n          value: 79\n        }, {\n          date: '2012-11-28',\n          value: 70\n        }, {\n          date: '2012-11-29',\n          value: 73\n        }, {\n          date: '2012-11-30',\n          value: 61\n        }, {\n          date: '2012-12-01',\n          value: 62\n        }, {\n          date: '2012-12-02',\n          value: 66\n        }, {\n          date: '2012-12-03',\n          value: 65\n        }, {\n          date: '2012-12-04',\n          value: 73\n        }, {\n          date: '2012-12-05',\n          value: 79\n        }, {\n          date: '2012-12-06',\n          value: 78\n        }, {\n          date: '2012-12-07',\n          value: 78\n        }, {\n          date: '2012-12-08',\n          value: 78\n        }, {\n          date: '2012-12-09',\n          value: 74\n        }, {\n          date: '2012-12-10',\n          value: 73\n        }, {\n          date: '2012-12-11',\n          value: 75\n        }, {\n          date: '2012-12-12',\n          value: 70\n        }, {\n          date: '2012-12-13',\n          value: 77\n        }, {\n          date: '2012-12-14',\n          value: 67\n        }, {\n          date: '2012-12-15',\n          value: 62\n        }\n        , {\n          date: '2012-12-16',\n          value: 64\n        }, {\n          date: '2012-12-17',\n          value: 61\n        }, {\n          date: '2012-12-18',\n          value: 59\n        }, {\n          date: '2012-12-19',\n          value: 53\n        }, {\n          date: '2012-12-20',\n          value: 54\n        }, {\n          date: '2012-12-21',\n          value: 56\n        }, {\n          date: '2012-12-22',\n          value: 59\n        }, {\n          date: '2012-12-23',\n          value: 58\n        }, {\n          date: '2012-12-24',\n          value: 55\n        }, {\n          date: '2012-12-25',\n          value: 52\n        }, {\n          date: '2012-12-26',\n          value: 54\n        }, {\n          date: '2012-12-27',\n          value: 50\n        }, {\n          date: '2012-12-28',\n          value: 50\n        }, {\n          date: '2012-12-29',\n          value: 51\n        }, {\n          date: '2012-12-30',\n          value: 52\n        }, {\n          date: '2012-12-31',\n          value: 58\n        }, {\n          date: '2013-01-01',\n          value: 60\n        }, {\n          date: '2013-01-02',\n          value: 67\n        }, {\n          date: '2013-01-03',\n          value: 64\n        }, {\n          date: '2013-01-04',\n          value: 66\n        }, {\n          date: '2013-01-05',\n          value: 60\n        }, {\n          date: '2013-01-06',\n          value: 63\n        }, {\n          date: '2013-01-07',\n          value: 61\n        }, {\n          date: '2013-01-08',\n          value: 60\n        }, {\n          date: '2013-01-09',\n          value: 65\n        }, {\n          date: '2013-01-10',\n          value: 75\n        }, {\n          date: '2013-01-11',\n          value: 77\n        }, {\n          date: '2013-01-12',\n          value: 78\n        }, {\n          date: '2013-01-13',\n          value: 70\n        }, {\n          date: '2013-01-14',\n          value: 70\n        }, {\n          date: '2013-01-15',\n          value: 73\n        }, {\n          date: '2013-01-16',\n          value: 71\n        }, {\n          date: '2013-01-17',\n          value: 74\n        }, {\n          date: '2013-01-18',\n          value: 78\n        }, {\n          date: '2013-01-19',\n          value: 85\n        }, {\n          date: '2013-01-20',\n          value: 82\n        }, {\n          date: '2013-01-21',\n          value: 83\n        }, {\n          date: '2013-01-22',\n          value: 88\n        }, {\n          date: '2013-01-23',\n          value: 85\n        }, {\n          date: '2013-01-24',\n          value: 85\n        }, {\n          date: '2013-01-25',\n          value: 80\n        }, {\n          date: '2013-01-26',\n          value: 87\n        }, {\n          date: '2013-01-27',\n          value: 84\n        }, {\n          date: '2013-01-28',\n          value: 83\n        }, {\n          date: '2013-01-29',\n          value: 84\n        }, {\n          date: '2013-01-30',\n          value: 81\n        } ];\n\n        // Create axes\n    const dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n    dateAxis.renderer.minGridDistance = 50;\n\n    const valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n\n        // Create series\n    const series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.valueY = 'value';\n    series.dataFields.dateX = 'date';\n    series.strokeWidth = 3;\n    series.fillOpacity = 0.5;\n\n        // Add vertical scrollbar\n    chart.scrollbarY = new am4core.Scrollbar();\n    chart.scrollbarY.marginLeft = 0;\n\n        // Add cursor\n    chart.cursor = new am4charts.XYCursor();\n    chart.cursor.behavior = 'zoomY';\n    chart.cursor.lineX.disabled = true;\n  };\n  public chart11 = function(element) {\n    const chart = am4core.create(element, am4charts.RadarChart);\n    chart.colors.list = [am4core.color('#0084ff'), am4core.color('#ffd400'), am4core.color('#00ca00')];\n\n    /* Add data */\n    chart.data = [{\n      country: 'Lithuania',\n      litres: 501,\n      units: 250\n    }, {\n      country: 'Czech Republic',\n      litres: 301,\n      units: 222\n    }, {\n      country: 'Ireland',\n      litres: 266,\n      units: 179\n    }, {\n      country: 'Germany',\n      litres: 165,\n      units: 298\n    }, {\n      country: 'Australia',\n      litres: 139,\n      units: 299\n    }];\n\n    /* Create axes */\n    const xAxis = chart.xAxes.push(new am4charts.ValueAxis<am4charts.AxisRendererCircular>());\n    xAxis.renderer.maxLabelPosition = 0.99;\n\n    const yAxis = chart.yAxes.push(new am4charts.CategoryAxis<am4charts.AxisRendererRadial>());\n    yAxis.renderer.labels.template.verticalCenter = 'bottom';\n    yAxis.renderer.labels.template.horizontalCenter = 'right';\n    yAxis.renderer.maxLabelPosition = 0.99;\n    yAxis.renderer.labels.template.paddingBottom = 1;\n    yAxis.renderer.labels.template.paddingRight = 3;\n\n    /* Create and configure series */\n    const series1 = chart.series.push(new am4charts.RadarSeries());\n    series1.bullets.push(new am4charts.CircleBullet());\n    series1.strokeOpacity = 0;\n    series1.dataFields.valueX = 'x';\n    series1.dataFields.valueY = 'y';\n    series1.name = 'Series #1';\n    series1.sequencedInterpolation = true;\n    series1.sequencedInterpolationDelay = 10;\n    series1.data = [\n      { x: 83, y: 5.1 },\n      { x: 44, y: 5.8 },\n      { x: 76, y: 9 },\n      { x: 2, y: 1.4 },\n      { x: 100, y: 8.3 },\n      { x: 96, y: 1.7 },\n      { x: 68, y: 3.9 },\n      { x: 0, y: 3 },\n      { x: 100, y: 4.1 },\n      { x: 16, y: 5.5 },\n      { x: 71, y: 6.8 },\n      { x: 100, y: 7.9 },\n      { x: 9, y: 6.8 },\n      { x: 85, y: 8.3 },\n      { x: 51, y: 6.7 },\n      { x: 95, y: 3.8 },\n      { x: 95, y: 4.4 },\n      { x: 1, y: 0.2 },\n      { x: 107, y: 9.7 },\n      { x: 50, y: 4.2 },\n      { x: 42, y: 9.2 },\n      { x: 35, y: 8 },\n      { x: 44, y: 6 },\n      { x: 64, y: 0.7 },\n      { x: 53, y: 3.3 },\n      { x: 92, y: 4.1 },\n      { x: 43, y: 7.3 },\n      { x: 15, y: 7.5 },\n      { x: 43, y: 4.3 },\n      { x: 90, y: 9.9 }\n    ];\n\n    const series2 = chart.series.push(new am4charts.RadarSeries());\n    series2.bullets.push(new am4charts.CircleBullet());\n    series2.strokeOpacity = 0;\n    series2.dataFields.valueX = 'x';\n    series2.dataFields.valueY = 'y';\n    series2.name = 'Series #2';\n    series2.sequencedInterpolation = true;\n    series2.sequencedInterpolationDelay = 10;\n    series2.data = [\n      { x: 178, y: 1.3 },\n      { x: 129, y: 3.4 },\n      { x: 99, y: 2.4 },\n      { x: 80, y: 9.9 },\n      { x: 118, y: 9.4 },\n      { x: 103, y: 8.7 },\n      { x: 91, y: 4.2 },\n      { x: 151, y: 1.2 },\n      { x: 168, y: 5.2 },\n      { x: 168, y: 1.6 },\n      { x: 152, y: 1.2 },\n      { x: 149, y: 3.4 },\n      { x: 182, y: 8.8 },\n      { x: 106, y: 6.7 },\n      { x: 111, y: 9.2 },\n      { x: 130, y: 6.3 },\n      { x: 147, y: 2.9 },\n      { x: 81, y: 8.1 },\n      { x: 138, y: 7.7 },\n      { x: 107, y: 3.9 },\n      { x: 124, y: 0.7 },\n      { x: 130, y: 2.6 },\n      { x: 86, y: 9.2 },\n      { x: 169, y: 7.5 },\n      { x: 122, y: 9.9 },\n      { x: 100, y: 3.8 },\n      { x: 172, y: 4.1 },\n      { x: 140, y: 7.3 },\n      { x: 161, y: 2.3 },\n      { x: 141, y: 0.9 }\n    ];\n\n    const series3 = chart.series.push(new am4charts.RadarSeries());\n    series3.bullets.push(new am4charts.CircleBullet());\n    series3.strokeOpacity = 0;\n    series3.dataFields.valueX = 'x';\n    series3.dataFields.valueY = 'y';\n    series3.name = 'Series #3';\n    series3.sequencedInterpolation = true;\n    series3.sequencedInterpolationDelay = 10;\n    series3.data = [\n      { x: 419, y: 4.9 },\n      { x: 417, y: 5.5 },\n      { x: 434, y: 0.1 },\n      { x: 344, y: 2.5 },\n      { x: 279, y: 7.5 },\n      { x: 307, y: 8.4 },\n      { x: 279, y: 9 },\n      { x: 220, y: 8.4 },\n      { x: 204, y: 8 },\n      { x: 446, y: 0.9 },\n      { x: 397, y: 8.9 },\n      { x: 351, y: 1.7 },\n      { x: 393, y: 0.7 },\n      { x: 254, y: 1.8 },\n      { x: 260, y: 0.4 },\n      { x: 300, y: 3.5 },\n      { x: 199, y: 2.7 },\n      { x: 182, y: 5.8 },\n      { x: 173, y: 2 },\n      { x: 201, y: 9.7 },\n      { x: 288, y: 1.2 },\n      { x: 333, y: 7.4 },\n      { x: 308, y: 1.9 },\n      { x: 330, y: 8 },\n      { x: 408, y: 1.7 },\n      { x: 274, y: 0.8 },\n      { x: 296, y: 3.1 },\n      { x: 279, y: 4.3 },\n      { x: 379, y: 5.6 },\n      { x: 175, y: 6.8 }\n    ];\n\n    /* Add legend */\n    chart.legend = new am4charts.Legend();\n\n    /* Add cursor */\n    chart.cursor = new am4charts.RadarCursor();\n  };\n  public chart12 = function(element) {\n    const chart = am4core.create(element, am4charts.PieChart3D);\n    chart.hiddenState.properties.opacity = 0; // this creates initial fade-in\n\n    chart.colors.list = [\n      am4core.color('red'),\n      am4core.color('yellow'),\n      am4core.color('#FF6F91'),\n      am4core.color('#FF9671'),\n      am4core.color('#FFC75F'),\n      am4core.color('#F9F871')\n    ];\n\n    chart.legend = new am4charts.Legend();\n\n    chart.data = [\n      {\n        country: 'Lithuania',\n        litres: 501.9\n      },\n      {\n        country: 'Germany',\n        litres: 165.8\n      },\n      {\n        country: 'Australia',\n        litres: 139.9\n      },\n      {\n        country: 'Austria',\n        litres: 128.3\n      },\n      {\n        country: 'UK',\n        litres: 99\n      },\n      {\n        country: 'Belgium',\n        litres: 60\n      }\n    ];\n\n    const series = chart.series.push(new am4charts.PieSeries3D());\n    series.dataFields.value = 'litres';\n    series.dataFields.category = 'country';\n\n  };\n\n  ngOnInit() {\n    this.zone.runOutsideAngular(() => {\n      this.chart1('chart1');\n      this.chart2('chart2');\n      this.chart3('chart3');\n      this.chart4('chart4');\n      this.chart5('chart5');\n      this.chart6('chart6');\n      this.chart7('chart7');\n      this.chart8('chart8');\n      this.chart9('chart9');\n      this.chart10('chart10');\n      this.chart11('chart11');\n      this.chart12('chart12');\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chart-apex',\n  templateUrl: './chart-apex.component.html',\n  styles: []\n})\nexport class ChartApexComponent implements OnInit {\n\n  constructor() { }\n  public line1 = {\n    chart: {\n      height: 350,\n      type: 'line',\n      zoom: {\n        enabled: false\n      }\n    },\n    series: [{\n      name: \"Desktops\",\n      data: [10, 41, 35, 51, 49, 62, 69, 91, 148]\n    }],\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: 'straight'\n    },\n    title: {\n      text: 'Product Trends by Month',\n      align: 'left'\n    },\n    grid: {\n      row: {\n        colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n        opacity: 0.5\n      },\n    },\n    xaxis: {\n      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep'],\n    }\n  }\n\n  public column1 = {\n    chart: {\n      height: 350,\n      type: 'bar',\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        columnWidth: '55%',\n        endingShape: 'rounded'\n      },\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      width: 2,\n      colors: ['transparent']\n    },\n    series: [{\n      name: 'Net Profit',\n      data: [44, 55, 57, 56, 61, 58]\n    }, {\n      name: 'Revenue',\n      data: [76, 85, 101, 98, 87, 105]\n    }, {\n      name: 'Free Cash Flow',\n      data: [35, 41, 36, 26, 45, 48]\n    }],\n    xaxis: {\n      categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n    },\n    yaxis: {\n      title: {\n        text: '$ (thousands)'\n      }\n    },\n    fill: {\n      opacity: 1\n\n    },\n    tooltip: {\n      y: {\n        formatter: function (val) {\n          return \"$ \" + val + \" thousands\"\n        }\n      }\n    }\n  }\n\n  public mixed1 = {\n    chart: {\n      height: 350,\n      type: 'line',\n      stacked: false,\n    },\n    stroke: {\n      width: [0, 2, 5],\n      curve: 'smooth'\n    },\n    plotOptions: {\n      bar: {\n        columnWidth: '50%'\n      }\n    },\n    colors: ['#ffc107', '#00ca00', '#0084ff'],\n    series: [{\n      name: 'Facebook',\n      type: 'column',\n      data: [23, 11, 22, 27, 13, 22, 37, 21, 44, 22, 30]\n    }, {\n      name: 'Vine',\n      type: 'area',\n      data: [44, 55, 41, 67, 22, 43, 21, 41, 56, 27, 43]\n    }, {\n      name: 'Dribbble',\n      type: 'line',\n      data: [30, 25, 36, 30, 45, 35, 64, 52, 59, 36, 39]\n    }],\n    fill: {\n      opacity: [0.85, 0.25, 1],\n      gradient: {\n        inverseColors: false,\n        shade: 'light',\n        type: \"vertical\",\n        opacityFrom: 0.85,\n        opacityTo: 0.55,\n        stops: [0, 100, 100, 100]\n      }\n    },\n    labels: ['01/01/2003', '02/01/2003', '03/01/2003', '04/01/2003', '05/01/2003', '06/01/2003', '07/01/2003', '08/01/2003', '09/01/2003', '10/01/2003', '11/01/2003'],\n    markers: {\n      size: 0\n    },\n    xaxis: {\n      type: 'datetime'\n    },\n    yaxis: {\n      min: 0\n    },\n    tooltip: {\n      shared: true,\n      intersect: false,\n      y: {\n        formatter: function (y) {\n          if (typeof y !== \"undefined\") {\n            return y.toFixed(0) + \" views\";\n          }\n          return y;\n        }\n      }\n    },\n    legend: {\n      labels: {\n        useSeriesColors: true\n      },\n      markers: {\n        customHTML: [\n          function () {\n            return ''\n          }, function () {\n            return ''\n          }, function () {\n            return ''\n          }\n        ]\n      }\n    }\n  };\n  public generateData = function(baseval, count, yrange) {\n    let i = 0;\n    let series = [];\n    while (i < count) {\n        const y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n        const z = Math.floor(Math.random() * (75 - 15 + 1)) + 15;\n\n        series.push([baseval, y, z]);\n        baseval += 86400000;\n        i++;\n    }\n    return series;\n};\n  public bubble1 = {\n    chart: {\n        height: 350,\n        type: 'bubble',\n    },\n    dataLabels: {\n        enabled: false\n    },\n    series: [{\n            name: 'Product1',\n            data: this.generateData(new Date('11 Feb 2017 GMT').getTime(), 20, {\n                min: 10,\n                max: 60\n            })\n        },\n        {\n            name: 'Product2',\n            data: this.generateData(new Date('11 Feb 2017 GMT').getTime(), 20, {\n                min: 10,\n                max: 60\n            })\n        },\n        {\n            name: 'Product3',\n            data: this.generateData(new Date('11 Feb 2017 GMT').getTime(), 20, {\n                min: 10,\n                max: 60\n            })\n        }\n    ],\n    fill: {\n        type: 'gradient',\n    },\n    title: {\n        text: '3D Bubble Chart'\n    },\n    xaxis: {\n        tickAmount: 12,\n        type: 'datetime',\n\n        labels: {\n            rotate: 0,\n        }\n    },\n    yaxis: {\n        max: 70\n    },\n    theme: {\n        palette: 'palette2'\n    }\n};\n\n  public chart1 = {\n    chart: {\n      width: 380,\n      type: 'pie',\n    },\n    labels: ['Team A', 'Team B', 'Team C', 'Team D', 'Team E'],\n    series: [44, 55, 13, 43, 22],\n    responsive: [{\n      breakpoint: 480,\n      options: {\n        chart: {\n          width: 200\n        },\n        legend: {\n          position: 'bottom'\n        }\n      }\n    }]\n  };\n\n  public area1 = {\n    chart: {\n        height: 350,\n        type: 'area',\n    },\n    dataLabels: {\n        enabled: false\n    },\n    stroke: {\n        curve: 'smooth'\n    },\n    series: [{\n        name: 'series1',\n        data: [31, 40, 28, 51, 42, 109, 100]\n    }, {\n        name: 'series2',\n        data: [11, 32, 45, 32, 34, 52, 41]\n    }],\n\n    xaxis: {\n        type: 'datetime',\n        categories: [\"2018-09-19T00:00:00\", \"2018-09-19T01:30:00\", \"2018-09-19T02:30:00\", \"2018-09-19T03:30:00\", \"2018-09-19T04:30:00\", \"2018-09-19T05:30:00\", \"2018-09-19T06:30:00\"],\n    },\n    tooltip: {\n        x: {\n            format: 'dd/MM/yy HH:mm'\n        },\n    }\n}\n\n  public bar2 = {\n    chart: {\n      height: 350,\n      type: 'bar',\n    },\n    plotOptions: {\n      bar: {\n        horizontal: true,\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    series: [{\n      data: [470, 540, 580, 690, 1100, 1200, 1380]\n    }],\n    xaxis: {\n      categories: ['Netherlands', 'Italy', 'France', 'Japan', 'United States', 'China', 'Germany'],\n    }\n  }\n\n  public candle1 = {\n    chart: {\n      height: 350,\n      type: 'candlestick',\n    },\n    series: [{\n      data: [{\n        x: new Date(1538778600000),\n        y: [6629.81, 6650.5, 6623.04, 6633.33]\n      },\n      {\n        x: new Date(1538780400000),\n        y: [6632.01, 6643.59, 6620, 6630.11]\n      },\n      {\n        x: new Date(1538782200000),\n        y: [6630.71, 6648.95, 6623.34, 6635.65]\n      },\n      {\n        x: new Date(1538784000000),\n        y: [6635.65, 6651, 6629.67, 6638.24]\n      },\n      {\n        x: new Date(1538785800000),\n        y: [6638.24, 6640, 6620, 6624.47]\n      },\n      {\n        x: new Date(1538787600000),\n        y: [6624.53, 6636.03, 6621.68, 6624.31]\n      },\n      {\n        x: new Date(1538789400000),\n        y: [6624.61, 6632.2, 6617, 6626.02]\n      },\n      {\n        x: new Date(1538791200000),\n        y: [6627, 6627.62, 6584.22, 6603.02]\n      },\n      {\n        x: new Date(1538793000000),\n        y: [6605, 6608.03, 6598.95, 6604.01]\n      },\n      {\n        x: new Date(1538794800000),\n        y: [6604.5, 6614.4, 6602.26, 6608.02]\n      },\n      {\n        x: new Date(1538796600000),\n        y: [6608.02, 6610.68, 6601.99, 6608.91]\n      },\n      {\n        x: new Date(1538798400000),\n        y: [6608.91, 6618.99, 6608.01, 6612]\n      },\n      {\n        x: new Date(1538800200000),\n        y: [6612, 6615.13, 6605.09, 6612]\n      },\n      {\n        x: new Date(1538802000000),\n        y: [6612, 6624.12, 6608.43, 6622.95]\n      },\n      {\n        x: new Date(1538803800000),\n        y: [6623.91, 6623.91, 6615, 6615.67]\n      },\n      {\n        x: new Date(1538805600000),\n        y: [6618.69, 6618.74, 6610, 6610.4]\n      },\n      {\n        x: new Date(1538807400000),\n        y: [6611, 6622.78, 6610.4, 6614.9]\n      },\n      {\n        x: new Date(1538809200000),\n        y: [6614.9, 6626.2, 6613.33, 6623.45]\n      },\n      {\n        x: new Date(1538811000000),\n        y: [6623.48, 6627, 6618.38, 6620.35]\n      },\n      {\n        x: new Date(1538812800000),\n        y: [6619.43, 6620.35, 6610.05, 6615.53]\n      },\n      {\n        x: new Date(1538814600000),\n        y: [6615.53, 6617.93, 6610, 6615.19]\n      },\n      {\n        x: new Date(1538816400000),\n        y: [6615.19, 6621.6, 6608.2, 6620]\n      },\n      {\n        x: new Date(1538818200000),\n        y: [6619.54, 6625.17, 6614.15, 6620]\n      },\n      {\n        x: new Date(1538820000000),\n        y: [6620.33, 6634.15, 6617.24, 6624.61]\n      },\n      {\n        x: new Date(1538821800000),\n        y: [6625.95, 6626, 6611.66, 6617.58]\n      },\n      {\n        x: new Date(1538823600000),\n        y: [6619, 6625.97, 6595.27, 6598.86]\n      },\n      {\n        x: new Date(1538825400000),\n        y: [6598.86, 6598.88, 6570, 6587.16]\n      },\n      {\n        x: new Date(1538827200000),\n        y: [6588.86, 6600, 6580, 6593.4]\n      },\n      {\n        x: new Date(1538829000000),\n        y: [6593.99, 6598.89, 6585, 6587.81]\n      },\n      {\n        x: new Date(1538830800000),\n        y: [6587.81, 6592.73, 6567.14, 6578]\n      },\n      {\n        x: new Date(1538832600000),\n        y: [6578.35, 6581.72, 6567.39, 6579]\n      },\n      {\n        x: new Date(1538834400000),\n        y: [6579.38, 6580.92, 6566.77, 6575.96]\n      },\n      {\n        x: new Date(1538836200000),\n        y: [6575.96, 6589, 6571.77, 6588.92]\n      },\n      {\n        x: new Date(1538838000000),\n        y: [6588.92, 6594, 6577.55, 6589.22]\n      },\n      {\n        x: new Date(1538839800000),\n        y: [6589.3, 6598.89, 6589.1, 6596.08]\n      },\n      {\n        x: new Date(1538841600000),\n        y: [6597.5, 6600, 6588.39, 6596.25]\n      },\n      {\n        x: new Date(1538843400000),\n        y: [6598.03, 6600, 6588.73, 6595.97]\n      },\n      {\n        x: new Date(1538845200000),\n        y: [6595.97, 6602.01, 6588.17, 6602]\n      },\n      {\n        x: new Date(1538847000000),\n        y: [6602, 6607, 6596.51, 6599.95]\n      },\n      {\n        x: new Date(1538848800000),\n        y: [6600.63, 6601.21, 6590.39, 6591.02]\n      },\n      {\n        x: new Date(1538850600000),\n        y: [6591.02, 6603.08, 6591, 6591]\n      },\n      {\n        x: new Date(1538852400000),\n        y: [6591, 6601.32, 6585, 6592]\n      },\n      {\n        x: new Date(1538854200000),\n        y: [6593.13, 6596.01, 6590, 6593.34]\n      },\n      {\n        x: new Date(1538856000000),\n        y: [6593.34, 6604.76, 6582.63, 6593.86]\n      },\n      {\n        x: new Date(1538857800000),\n        y: [6593.86, 6604.28, 6586.57, 6600.01]\n      },\n      {\n        x: new Date(1538859600000),\n        y: [6601.81, 6603.21, 6592.78, 6596.25]\n      },\n      {\n        x: new Date(1538861400000),\n        y: [6596.25, 6604.2, 6590, 6602.99]\n      },\n      {\n        x: new Date(1538863200000),\n        y: [6602.99, 6606, 6584.99, 6587.81]\n      },\n      {\n        x: new Date(1538865000000),\n        y: [6587.81, 6595, 6583.27, 6591.96]\n      },\n      {\n        x: new Date(1538866800000),\n        y: [6591.97, 6596.07, 6585, 6588.39]\n      },\n      {\n        x: new Date(1538868600000),\n        y: [6587.6, 6598.21, 6587.6, 6594.27]\n      },\n      {\n        x: new Date(1538870400000),\n        y: [6596.44, 6601, 6590, 6596.55]\n      },\n      {\n        x: new Date(1538872200000),\n        y: [6598.91, 6605, 6596.61, 6600.02]\n      },\n      {\n        x: new Date(1538874000000),\n        y: [6600.55, 6605, 6589.14, 6593.01]\n      },\n      {\n        x: new Date(1538875800000),\n        y: [6593.15, 6605, 6592, 6603.06]\n      },\n      ]\n    }],\n    title: {\n      text: 'CandleStick Chart',\n      align: 'left'\n    },\n    xaxis: {\n      type: 'datetime'\n    },\n    yaxis: {\n      tooltip: {\n        enabled: true\n      }\n    }\n  }\n\n  public scatter = {\n    chart: {\n      height: 350,\n      type: 'scatter',\n      zoom: {\n        enabled: true,\n        type: 'xy'\n      }\n    },\n\n    series: [{\n      name: \"SAMPLE A\",\n      data: [\n        [16.4, 5.4], [21.7, 2], [25.4, 3], [19, 2], [10.9, 1], [13.6, 3.2], [10.9, 7.4], [10.9, 0], [10.9, 8.2], [16.4, 0], [16.4, 1.8], [13.6, 0.3], [13.6, 0], [29.9, 0], [27.1, 2.3], [16.4, 0], [13.6, 3.7], [10.9, 5.2], [16.4, 6.5], [10.9, 0], [24.5, 7.1], [10.9, 0], [8.1, 4.7]]\n    }, {\n      name: \"SAMPLE B\",\n      data: [\n        [36.4, 13.4], [1.7, 11], [5.4, 8], [9, 17], [1.9, 4], [3.6, 12.2], [1.9, 14.4], [1.9, 9], [1.9, 13.2], [1.4, 7], [6.4, 8.8], [3.6, 4.3], [1.6, 10], [9.9, 2], [7.1, 15], [1.4, 0], [3.6, 13.7], [1.9, 15.2], [6.4, 16.5], [0.9, 10], [4.5, 17.1], [10.9, 10], [0.1, 14.7]]\n    }, {\n      name: \"SAMPLE C\",\n      data: [\n        [21.7, 3], [23.6, 3.5], [24.6, 3], [29.9, 3], [21.7, 20], [23, 2], [10.9, 3], [28, 4], [27.1, 0.3], [16.4, 4], [13.6, 0], [19, 5], [22.4, 3], [24.5, 3], [32.6, 3], [27.1, 4], [29.6, 6], [31.6, 8], [21.6, 5], [20.9, 4], [22.4, 0], [32.6, 10.3], [29.7, 20.8]]\n    }],\n    xaxis: {\n      tickAmount: 5,\n      labels: {\n        formatter: function (val) {\n          return parseFloat(val).toFixed(1)\n        }\n      }\n    },\n    yaxis: {\n      tickAmount: 5\n    }\n  }\n\n  public radial = {\n    chart: {\n      height: 350,\n      type: 'radialBar',\n    },\n    plotOptions: {\n      radialBar: {\n        dataLabels: {\n          name: {\n            fontSize: '22px',\n          },\n          value: {\n            fontSize: '16px',\n          },\n          total: {\n            show: true,\n            label: 'Total',\n            formatter: function (w) {\n              // By default this function returns the average of all series. The below is just an example to show the use of custom formatter function\n              return 249\n            }\n          }\n        }\n      }\n    },\n    series: [44, 55, 67, 83],\n    labels: ['Apples', 'Oranges', 'Bananas', 'Berries'],\n\n  }\n  ngOnInit() {\n  }\n\n\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport * as Highcharts from 'highcharts';\n\n@Component({\n  selector: 'app-chart-high',\n  templateUrl: './chart-high.component.html',\n  styles: []\n})\nexport class ChartHighComponent implements OnInit {\n\n  constructor() { }\n\n  public chart1 = {\n\n    title: {\n      text: 'Solar Employment Growth by Sector, 2010-2016'\n    },\n\n    subtitle: {\n      text: 'Source: thesolarfoundation.com'\n    },\n\n    yAxis: {\n      title: {\n        text: 'Number of Employees'\n      }\n    },\n    legend: {\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'middle'\n    },\n\n    plotOptions: {\n      series: {\n        label: {\n          connectorAllowed: false\n        },\n        pointStart: 2010\n      }\n    },\n\n    series: [{\n      name: 'Installation',\n      data: [43934, 52503, 57177, 69658, 97031, 119931, 137133, 154175],\n      color: '#007bff'\n    }, {\n      name: 'Manufacturing',\n      data: [24916, 24064, 29742, 29851, 32490, 30282, 38121, 40434],\n      color: '#dc3545'\n    }, {\n      name: 'Sales & Distribution',\n      data: [11744, 17722, 16005, 19771, 20185, 24377, 32147, 39387],\n      color: '#28a745'\n    }, {\n      name: 'Project Development',\n      data: [null, null, 7988, 12169, 15112, 22452, 34400, 34227],\n      color: '#ffc107'\n    }, {\n      name: 'Other',\n      data: [12908, 5948, 8105, 11248, 8989, 11816, 18274, 18111],\n      color: '#17a2b8'\n    }],\n\n    responsive: {\n      rules: [{\n        condition: {\n          maxWidth: 500\n        },\n        chartOptions: {\n          legend: {\n            layout: 'horizontal',\n            align: 'center',\n            verticalAlign: 'bottom'\n          }\n        }\n      }]\n    }\n\n  };\n  public chart2 = {\n    chart: {\n      type: 'bar'\n    },\n    title: {\n      text: 'Historic World Population by Region'\n    },\n    subtitle: {\n      text: 'Source: <a href=\"https://en.wikipedia.org/wiki/World_population\">Wikipedia.org</a>'\n    },\n    xAxis: {\n      categories: ['Africa', 'America', 'Asia', 'Europe', 'Oceania'],\n      title: {\n        text: null\n      }\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'Population (millions)',\n        align: 'high'\n      },\n      labels: {\n        overflow: 'justify'\n      }\n    },\n    tooltip: {\n      valueSuffix: ' millions'\n    },\n    plotOptions: {\n      bar: {\n        dataLabels: {\n          enabled: true\n        }\n      }\n    },\n    legend: {\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'top',\n      x: -40,\n      y: 80,\n      floating: true,\n      borderWidth: 1,\n      backgroundColor:\n        Highcharts.defaultOptions.legend.backgroundColor || '#FFFFFF',\n      shadow: true\n    },\n    credits: {\n      enabled: false\n    },\n    series: [{\n      name: 'Year 1900',\n      data: [133, 156, 947, 408, 6],\n      color: '#dc3545'\n    }, {\n      name: 'Year 2000',\n      data: [814, 841, 3714, 727, 31],\n      color: '#28a745'\n    }, {\n      name: 'Year 2016',\n      data: [1216, 1001, 4436, 738, 40],\n      color: '#ffc107'\n    }]\n  };\n  public chart3 = {\n    chart: {\n        plotBackgroundColor: null,\n        plotBorderWidth: null,\n        plotShadow: false,\n        type: 'pie'\n    },\n    colorAxis: {},\n    title: {\n        text: 'Browser market shares in January, 2018'\n    },\n    tooltip: {\n        pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n    },\n    plotOptions: {\n        pie: {\n            allowPointSelect: true,\n            cursor: 'pointer',\n            dataLabels: {\n                enabled: true,\n                format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n            }\n        }\n    },\n    series: [{\n        name: 'Brands',\n        colorByPoint: true,\n        data: [{\n            name: 'Chrome',\n            y: 61.41,\n            sliced: true,\n            selected: true\n        }, {\n            name: 'Internet Explorer',\n            y: 11.84\n        }, {\n            name: 'Firefox',\n            y: 10.85\n        }, {\n            name: 'Edge',\n            y: 4.67\n        }, {\n            name: 'Safari',\n            y: 4.18\n        }, {\n            name: 'Sogou Explorer',\n            y: 1.64\n        }, {\n            name: 'Opera',\n            y: 1.6\n        }, {\n            name: 'QQ',\n            y: 1.2\n        }, {\n            name: 'Other',\n            y: 2.61\n        }]\n    }]\n  };\n\n  public chart4 = {\n    chart: {\n      type: 'spline',\n      animation: Highcharts.SVGElement, // don't animate in old IE\n      marginRight: 10,\n      events: {\n        load() {\n\n          // set up the updating of the chart each second\n          const series = this.series[0];\n          setInterval(function() {\n            // tslint:disable-next-line: one-variable-per-declaration\n            const x = (new Date()).getTime(), // current time\n               y = Math.random();\n            series.addPoint([x, y], true, true);\n          }, 1000);\n        }\n      }\n    },\n    time: {\n      useUTC: false\n    },\n\n    title: {\n      text: 'Live random data'\n    },\n\n    accessibility: {\n      announceNewData: {\n        enabled: true,\n        minAnnounceInterval: 15000,\n        announcementFormatter(allSeries, newSeries, newPoint) {\n          if (newPoint) {\n            return 'New point added. Value: ' + newPoint.y;\n          }\n          return false;\n        }\n      }\n    },\n\n    xAxis: {\n      type: 'datetime',\n      tickPixelInterval: 150\n    },\n\n    yAxis: {\n      title: {\n        text: 'Value'\n      },\n      plotLines: [{\n        value: 0,\n        width: 1,\n        color: '#808080'\n      }]\n    },\n\n    tooltip: {\n      headerFormat: '<b>{series.name}</b><br/>',\n      pointFormat: '{point.x:%Y-%m-%d %H:%M:%S}<br/>{point.y:.2f}'\n    },\n\n    legend: {\n      enabled: false\n    },\n\n    exporting: {\n      enabled: false\n    },\n\n    series: [{\n      name: 'Random data',\n      color: '#0084ff',\n      data: (function() {\n        // generate an array of random data\n        let data = [],\n          time = (new Date()).getTime(),\n          i;\n\n        for (i = -19; i <= 0; i += 1) {\n          data.push({\n            x: time + i * 1000,\n            y: Math.random()\n          });\n        }\n        return data;\n      }())\n    }]\n  };\n\n  public chart5 = {\n\n    chart: {\n        type: 'gauge',\n        plotBackgroundColor: null,\n        plotBackgroundImage: null,\n        plotBorderWidth: 0,\n        plotShadow: false\n    },\n\n    title: {\n        text: 'Speedometer'\n    },\n\n    pane: {\n        startAngle: -150,\n        endAngle: 150,\n        background: [{\n            backgroundColor: {\n                linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },\n                stops: [\n                    [0, '#FFF'],\n                    [1, '#333']\n                ]\n            },\n            borderWidth: 0,\n            outerRadius: '109%'\n        }, {\n            backgroundColor: {\n                linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },\n                stops: [\n                    [0, '#333'],\n                    [1, '#FFF']\n                ]\n            },\n            borderWidth: 1,\n            outerRadius: '107%'\n        }, {\n            // default background\n        }, {\n            backgroundColor: '#DDD',\n            borderWidth: 0,\n            outerRadius: '105%',\n            innerRadius: '103%'\n        }]\n    },\n\n    // the value axis\n    yAxis: {\n        min: 0,\n        max: 200,\n\n        minorTickInterval: 'auto',\n        minorTickWidth: 1,\n        minorTickLength: 10,\n        minorTickPosition: 'inside',\n        minorTickColor: '#666',\n\n        tickPixelInterval: 30,\n        tickWidth: 2,\n        tickPosition: 'inside',\n        tickLength: 10,\n        tickColor: '#666',\n        labels: {\n            step: 2,\n            rotation: 'auto'\n        },\n        title: {\n            text: 'km/h'\n        },\n        plotBands: [{\n            from: 0,\n            to: 120,\n            color: '#55BF3B' // green\n        }, {\n            from: 120,\n            to: 160,\n            color: '#DDDF0D' // yellow\n        }, {\n            from: 160,\n            to: 200,\n            color: '#DF5353' // red\n        }]\n    },\n\n    series: [{\n        name: 'Speed',\n        data: [80],\n        tooltip: {\n            valueSuffix: ' km/h'\n        }\n    }]\n\n};\n\n    public chart6 = {\n      chart: {\n          type: 'area'\n      },\n      accessibility: {\n          // tslint:disable-next-line: max-line-length\n          description: 'Image description: An area chart compares the nuclear stockpiles of the USA and the USSR/Russia between 1945 and 2017. The number of nuclear weapons is plotted on the Y-axis and the years on the X-axis. The chart is interactive, and the year-on-year stockpile levels can be traced for each country. The US has a stockpile of 6 nuclear weapons at the dawn of the nuclear age in 1945. This number has gradually increased to 369 by 1950 when the USSR enters the arms race with 6 weapons. At this point, the US starts to rapidly build its stockpile culminating in 32,040 warheads by 1966 compared to the USSR’s 7,089. From this peak in 1966, the US stockpile gradually decreases as the USSR’s stockpile expands. By 1978 the USSR has closed the nuclear gap at 25,393. The USSR stockpile continues to grow until it reaches a peak of 45,000 in 1986 compared to the US arsenal of 24,401. From 1986, the nuclear stockpiles of both countries start to fall. By 2000, the numbers have fallen to 10,577 and 21,000 for the US and Russia, respectively. The decreases continue until 2017 at which point the US holds 4,018 weapons compared to Russia’s 4,500.'\n      },\n      title: {\n          text: 'US and USSR nuclear stockpiles'\n      },\n      subtitle: {\n          text: 'Sources: <a href=\"https://thebulletin.org/2006/july/global-nuclear-stockpiles-1945-2006\">' +\n              'thebulletin.org</a> &amp; <a href=\"https://www.armscontrol.org/factsheets/Nuclearweaponswhohaswhat\">' +\n              'armscontrol.org</a>'\n      },\n      xAxis: {\n          allowDecimals: false,\n          labels: {\n              formatter() {\n                  return this.value; // clean, unformatted number for year\n              }\n          },\n          accessibility: {\n              rangeDescription: 'Range: 1940 to 2017.'\n          }\n      },\n      yAxis: {\n          title: {\n              text: 'Nuclear weapon states'\n          },\n          labels: {\n              formatter() {\n                  return this.value / 1000 + 'k';\n              }\n          }\n      },\n      tooltip: {\n          pointFormat: '{series.name} had stockpiled <b>{point.y:,.0f}</b><br/>warheads in {point.x}'\n      },\n      plotOptions: {\n          area: {\n              pointStart: 1940,\n              marker: {\n                  enabled: false,\n                  symbol: 'circle',\n                  radius: 2,\n                  states: {\n                      hover: {\n                          enabled: true\n                      }\n                  }\n              }\n          }\n      },\n      series: [{\n          name: 'USA',\n          data: [\n              null, null, null, null, null, 6, 11, 32, 110, 235,\n              369, 640, 1005, 1436, 2063, 3057, 4618, 6444, 9822, 15468,\n              20434, 24126, 27387, 29459, 31056, 31982, 32040, 31233, 29224, 27342,\n              26662, 26956, 27912, 28999, 28965, 27826, 25579, 25722, 24826, 24605,\n              24304, 23464, 23708, 24099, 24357, 24237, 24401, 24344, 23586, 22380,\n              21004, 17287, 14747, 13076, 12555, 12144, 11009, 10950, 10871, 10824,\n              10577, 10527, 10475, 10421, 10358, 10295, 10104, 9914, 9620, 9326,\n              5113, 5113, 4954, 4804, 4761, 4717, 4368, 4018\n          ],\n          color: '#57aeff'\n      }, {\n          name: 'USSR/Russia',\n          data: [null, null, null, null, null, null, null, null, null, null,\n              5, 25, 50, 120, 150, 200, 426, 660, 869, 1060,\n              1605, 2471, 3322, 4238, 5221, 6129, 7089, 8339, 9399, 10538,\n              11643, 13092, 14478, 15915, 17385, 19055, 21205, 23044, 25393, 27935,\n              30062, 32049, 33952, 35804, 37431, 39197, 45000, 43000, 41000, 39000,\n              37000, 35000, 33000, 31000, 29000, 27000, 25000, 24000, 23000, 22000,\n              21000, 20000, 19000, 18000, 18000, 17000, 16000, 15537, 14162, 12787,\n              12600, 11400, 5500, 4512, 4502, 4502, 4500, 4500\n          ],\n          color: '#57dc57'\n      }]\n  };\n\n  public chart7 = {\n    chart: {\n        type: 'scatter',\n        zoomType: 'xy'\n    },\n    accessibility: {\n        description: 'A scatter plot compares the height and weight of 507 individuals by gender. Height in centimeters is plotted on the X-axis and weight in kilograms is plotted on the Y-axis. The chart is interactive, and each data point can be hovered over to expose the height and weight data for each individual. The scatter plot is fairly evenly divided by gender with females dominating the left-hand side of the chart and males dominating the right-hand side. The height data for females ranges from 147.2 to 182.9 centimeters with the greatest concentration between 160 and 165 centimeters. The weight data for females ranges from 42 to 105.2 kilograms with the greatest concentration at around 60 kilograms. The height data for males ranges from 157.2 to 198.1 centimeters with the greatest concentration between 175 and 180 centimeters. The weight data for males ranges from 53.9 to 116.4 kilograms with the greatest concentration at around 80 kilograms.'\n    },\n    title: {\n        text: 'Height Versus Weight of 507 Individuals by Gender'\n    },\n    subtitle: {\n        text: 'Source: Heinz  2003'\n    },\n    xAxis: {\n        title: {\n            enabled: true,\n            text: 'Height (cm)'\n        },\n        startOnTick: true,\n        endOnTick: true,\n        showLastLabel: true\n    },\n    yAxis: {\n        title: {\n            text: 'Weight (kg)'\n        }\n    },\n    legend: {\n        layout: 'vertical',\n        align: 'left',\n        verticalAlign: 'top',\n        x: 100,\n        y: 70,\n        floating: true,\n        backgroundColor: Highcharts.defaultOptions.chart.backgroundColor,\n        borderWidth: 1\n    },\n    plotOptions: {\n        scatter: {\n            marker: {\n                radius: 5,\n                states: {\n                    hover: {\n                        enabled: true,\n                        lineColor: 'rgb(100,100,100)'\n                    }\n                }\n            },\n            states: {\n                hover: {\n                    marker: {\n                        enabled: false\n                    }\n                }\n            },\n            tooltip: {\n                headerFormat: '<b>{series.name}</b><br>',\n                pointFormat: '{point.x} cm, {point.y} kg'\n            }\n        }\n    },\n    series: [{\n        name: 'Female',\n        color: 'rgba(223, 83, 83, .5)',\n        data: [[161.2, 51.6], [167.5, 59.0], [159.5, 49.2], [157.0, 63.0], [155.8, 53.6],\n            [170.0, 59.0], [159.1, 47.6], [166.0, 69.8], [176.2, 66.8], [160.2, 75.2],\n            [172.5, 55.2], [170.9, 54.2], [172.9, 62.5], [153.4, 42.0], [160.0, 50.0],\n            [147.2, 49.8], [168.2, 49.2], [175.0, 73.2], [157.0, 47.8], [167.6, 68.8],\n            [159.5, 50.6], [175.0, 82.5], [166.8, 57.2], [176.5, 87.8], [170.2, 72.8],\n            [174.0, 54.5], [173.0, 59.8], [179.9, 67.3], [170.5, 67.8], [160.0, 47.0],\n            [154.4, 46.2], [162.0, 55.0], [176.5, 83.0], [160.0, 54.4], [152.0, 45.8],\n            [162.1, 53.6], [170.0, 73.2], [160.2, 52.1], [161.3, 67.9], [166.4, 56.6],\n            [168.9, 62.3], [163.8, 58.5], [167.6, 54.5], [160.0, 50.2], [161.3, 60.3],\n            [167.6, 58.3], [165.1, 56.2], [160.0, 50.2], [170.0, 72.9], [157.5, 59.8],\n            [167.6, 61.0], [160.7, 69.1], [163.2, 55.9], [152.4, 46.5], [157.5, 54.3],\n            [168.3, 54.8], [180.3, 60.7], [165.5, 60.0], [165.0, 62.0], [164.5, 60.3],\n            [156.0, 52.7], [160.0, 74.3], [163.0, 62.0], [165.7, 73.1], [161.0, 80.0],\n            [162.0, 54.7], [166.0, 53.2], [174.0, 75.7], [172.7, 61.1], [167.6, 55.7],\n            [151.1, 48.7], [164.5, 52.3], [163.5, 50.0], [152.0, 59.3], [169.0, 62.5],\n            [164.0, 55.7], [161.2, 54.8], [155.0, 45.9], [170.0, 70.6], [176.2, 67.2],\n            [170.0, 69.4], [162.5, 58.2], [170.3, 64.8], [164.1, 71.6], [169.5, 52.8],\n            [163.2, 59.8], [154.5, 49.0], [159.8, 50.0], [173.2, 69.2], [170.0, 55.9],\n            [161.4, 63.4], [169.0, 58.2], [166.2, 58.6], [159.4, 45.7], [162.5, 52.2],\n            [159.0, 48.6], [162.8, 57.8], [159.0, 55.6], [179.8, 66.8], [162.9, 59.4],\n            [161.0, 53.6], [151.1, 73.2], [168.2, 53.4], [168.9, 69.0], [173.2, 58.4],\n            [171.8, 56.2], [178.0, 70.6], [164.3, 59.8], [163.0, 72.0], [168.5, 65.2],\n            [166.8, 56.6], [172.7, 105.2], [163.5, 51.8], [169.4, 63.4], [167.8, 59.0],\n            [159.5, 47.6], [167.6, 63.0], [161.2, 55.2], [160.0, 45.0], [163.2, 54.0],\n            [162.2, 50.2], [161.3, 60.2], [149.5, 44.8], [157.5, 58.8], [163.2, 56.4],\n            [172.7, 62.0], [155.0, 49.2], [156.5, 67.2], [164.0, 53.8], [160.9, 54.4]]\n\n    }, {\n        name: 'Male',\n        color: 'rgba(119, 152, 191, .5)',\n        data: [[174.0, 65.6], [175.3, 71.8], [193.5, 80.7], [186.5, 72.6], [187.2, 78.8],\n            [181.5, 74.8], [184.0, 86.4], [184.5, 78.4], [175.0, 62.0], [184.0, 81.6],\n            [180.0, 76.6], [177.8, 83.6], [192.0, 90.0], [176.0, 74.6], [174.0, 71.0],\n            [184.0, 79.6], [192.7, 93.8], [171.5, 70.0], [173.0, 72.4], [176.0, 85.9],\n            [176.0, 78.8], [180.5, 77.8], [172.7, 66.2], [176.0, 86.4], [173.5, 81.8],\n            [178.0, 89.6], [180.3, 82.8], [180.3, 76.4], [164.5, 63.2], [173.0, 60.9],\n            [183.5, 74.8], [175.5, 70.0], [188.0, 72.4], [189.2, 84.1], [172.8, 69.1],\n            [170.0, 59.5], [182.0, 67.2], [170.0, 61.3], [177.8, 68.6], [184.2, 80.1],\n            [186.7, 87.8], [171.4, 84.7], [172.7, 73.4], [175.3, 72.1], [180.3, 82.6],\n            [182.9, 88.7], [188.0, 84.1], [177.2, 94.1], [172.1, 74.9], [167.0, 59.1],\n            [169.5, 75.6], [174.0, 86.2], [172.7, 75.3], [182.2, 87.1], [164.1, 55.2],\n            [163.0, 57.0], [171.5, 61.4], [184.2, 76.8], [174.0, 86.8], [174.0, 72.2],\n            [177.0, 71.6], [186.0, 84.8], [167.0, 68.2], [171.8, 66.1], [182.0, 72.0],\n            [167.0, 64.6], [177.8, 74.8], [164.5, 70.0], [192.0, 101.6], [175.5, 63.2],\n            [171.2, 79.1], [181.6, 78.9], [167.4, 67.7], [181.1, 66.0], [177.0, 68.2],\n            [174.5, 63.9], [177.5, 72.0], [170.5, 56.8], [182.4, 74.5], [197.1, 90.9],\n            [180.1, 93.0], [175.5, 80.9], [180.6, 72.7], [184.4, 68.0], [175.5, 70.9],\n            [180.3, 83.2], [180.3, 83.2]]\n    }]\n};\n\npublic chart8 = {\n  chart: {\n      zoomType: 'xy'\n  },\n  title: {\n      text: 'Average Monthly Temperature and Rainfall in Tokyo'\n  },\n  subtitle: {\n      text: 'Source: WorldClimate.com'\n  },\n  xAxis: [{\n      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n          'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n      crosshair: true\n  }],\n  yAxis: [{ // Primary yAxis\n      labels: {\n          format: '{value}°C',\n          style: {\n              color: Highcharts.getOptions().colors[1]\n          }\n      },\n      title: {\n          text: 'Temperature',\n          style: {\n              color: Highcharts.getOptions().colors[1]\n          }\n      }\n  }, { // Secondary yAxis\n      title: {\n          text: 'Rainfall',\n          style: {\n              color: Highcharts.getOptions().colors[0]\n          }\n      },\n      labels: {\n          format: '{value} mm',\n          style: {\n              color: Highcharts.getOptions().colors[0]\n          }\n      },\n      opposite: true\n  }],\n  tooltip: {\n      shared: true\n  },\n  legend: {\n      layout: 'vertical',\n      align: 'left',\n      x: 120,\n      verticalAlign: 'top',\n      y: 100,\n      floating: true,\n      backgroundColor:\n          Highcharts.defaultOptions.legend.backgroundColor || // theme\n          'rgba(255,255,255,0.25)'\n  },\n  series: [{\n      name: 'Rainfall',\n      type: 'column',\n      yAxis: 1,\n      data: [49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4],\n      color: '#57aeff',\n      tooltip: {\n          valueSuffix: ' mm'\n      }\n\n  }, {\n      name: 'Temperature',\n      type: 'spline',\n      data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6],\n      color: '#00ca00',\n      tooltip: {\n          valueSuffix: '°C'\n      }\n  }]\n};\n\npublic chart9 = {\n  chart: {\n      renderTo: 'high-3d-chart',\n      type: 'column',\n      options3d: {\n          enabled: true,\n          alpha: 15,\n          beta: 15,\n          depth: 50,\n          viewDistance: 25\n      }\n  },\n  title: {\n      text: 'Chart rotation demo'\n  },\n  subtitle: {\n      text: 'Test options by dragging the sliders below'\n  },\n  plotOptions: {\n      column: {\n          depth: 25\n      }\n  },\n  series: [{\n      data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4],\n      color: '#57aeff'\n  }]\n};\n\n// tslint:disable-next-line: one-variable-per-declaration\n categories = [\n  '0-4', '5-9', '10-14', '15-19',\n  '20-24', '25-29', '30-34', '35-39', '40-44',\n  '45-49', '50-54', '55-59', '60-64', '65-69',\n  '70-74', '75-79', '80-84', '85-89', '90-94',\n  '95-99', '100 + '\n  ];\npublic chart10 = {\n  categories : [\n    '0-4', '5-9', '10-14', '15-19',\n    '20-24', '25-29', '30-34', '35-39', '40-44',\n    '45-49', '50-54', '55-59', '60-64', '65-69',\n    '70-74', '75-79', '80-84', '85-89', '90-94',\n    '95-99', '100 + '\n    ],\n  chart: {\n      type: 'bar'\n  },\n  title: {\n      text: 'Population pyramid for Germany, 2018'\n  },\n  subtitle: {\n      text: 'Source: <a href=\"http://populationpyramid.net/germany/2018/\">Population Pyramids of the World from 1950 to 2100</a>'\n  },\n  accessibility: {\n      point: {\n          descriptionFormatter: function (point) {\n              var index = point.index + 1,\n                  category = point.category,\n                  val = Math.abs(point.y),\n                  series = point.series.name;\n\n              return index + ', Age ' + category + ', ' + val + '%. ' + series + '.';\n          }\n      }\n  },\n  xAxis: [{\n      categories: this.categories,\n      reversed: false,\n      labels: {\n          step: 1\n      },\n      accessibility: {\n          description: 'Age (male)'\n      }\n  }, { // mirror axis on right side\n      opposite: true,\n      reversed: false,\n      categories: this.categories,\n      linkedTo: 0,\n      labels: {\n          step: 1\n      },\n      accessibility: {\n          description: 'Age (female)'\n      }\n  }],\n  yAxis: {\n      title: {\n          text: null\n      },\n      labels: {\n          formatter: function () {\n              return Math.abs(this.value) + '%';\n          }\n      },\n      accessibility: {\n          description: 'Percentage population',\n          rangeDescription: 'Range: 0 to 5%'\n      }\n  },\n\n  plotOptions: {\n      series: {\n          stacking: 'normal'\n      }\n  },\n\n  tooltip: {\n      formatter: function () {\n          return '<b>' + this.series.name + ', age ' + this.point.category + '</b><br/>' +\n              'Population: ' + Highcharts.numberFormat(Math.abs(this.point.y), 1) + '%';\n      }\n  },\n\n  series: [{\n      name: 'Male',\n      data: [\n          -2.2, -2.1, -2.2, -2.4,\n          -2.7, -3.0, -3.3, -3.2,\n          -2.9, -3.5, -4.4, -4.1,\n          -0.0\n      ],\n      color: '#57dc57'\n  }, {\n      name: 'Female',\n      data: [\n          2.1, 2.0, 2.1, 2.3, 2.6,\n          2.9, 3.2, 3.1, 2.9, 3.4,\n          0.0\n      ],\n      color: '#57aeff'\n  }]\n};\n\nngOnInit() {\n  }\n//   function(chart) {\n//     if (!chart.renderer.forExport) {\n//         setInterval(function() {\n//             let point = chart.series[0].points[0],\n//                 newVal,\n//                 inc = Math.round((Math.random() - 0.5) * 20);\n//             newVal = point.y + inc;\n//             if (newVal < 0 || newVal > 200) {\n//                 newVal = point.y - inc;\n//             }\n\n//             point.update(newVal);\n\n//         }, 3000);\n//     }\n// }\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MorrisChartComponent } from './morris-chart/morris-chart.component';\nimport { ChartHighComponent } from './chart-high/chart-high.component';\nimport { ChartAmComponent } from './chart-am/chart-am.component';\nimport { ChartApexComponent } from './chart-apex/chart-apex.component';\n\n\nconst routes: Routes = [\n  {\n    path: 'morris-chart',\n    component : MorrisChartComponent\n  },\n  {\n    path: 'chart-high',\n    component : ChartHighComponent\n  },\n  {\n    path: 'chart-am',\n    component : ChartAmComponent\n  },\n  {\n    path: 'chart-apex',\n    component : ChartApexComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ChartsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {SofboxModule} from '../../components/sofbox/sofbox.module';\nimport { ChartsRoutingModule } from './charts-routing.module';\nimport { MorrisChartComponent } from './morris-chart/morris-chart.component';\nimport { ChartHighComponent } from './chart-high/chart-high.component';\nimport { ChartAmComponent } from './chart-am/chart-am.component';\nimport { ChartApexComponent } from './chart-apex/chart-apex.component';\n\n\n@NgModule({\n  declarations: [MorrisChartComponent, ChartHighComponent, ChartAmComponent, ChartApexComponent],\n  imports: [\n    CommonModule,\n    ChartsRoutingModule,\n    SofboxModule\n  ],\n  exports: [MorrisChartComponent, ChartHighComponent, ChartAmComponent, ChartApexComponent]\n})\nexport class ChartsModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-morris-chart',\n  templateUrl: './morris-chart.component.html',\n  styles: []\n})\nexport class MorrisChartComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n"],"sourceRoot":"webpack:///"}